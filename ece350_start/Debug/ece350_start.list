
ece350_start.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049a4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  08004b44  08004b44  00005b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cd0  08004cd0  00006074  2**0
                  CONTENTS
  4 .ARM          00000008  08004cd0  08004cd0  00005cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004cd8  08004cd8  00006074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004cd8  08004cd8  00005cd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004cdc  08004cdc  00005cdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004ce0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f4  20000074  08004d54  00006074  2**2
                  ALLOC
 10 ._user_heap_stack 00008000  20000568  08004d54  00006568  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006074  2**0
                  CONTENTS, READONLY
 12 .debug_line   0000ac11  00000000  00000000  000060a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 00000087  00000000  00000000  00010cb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   000092cf  00000000  00000000  00010d3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001fc0  00000000  00000000  0001a00b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000850  00000000  00000000  0001bfd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00087a4a  00000000  00000000  0001c820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000618  00000000  00000000  000a426a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00016c0d  00000000  00000000  000a4882  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000bb48f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002844  00000000  00000000  000bb4d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004b2c 	.word	0x08004b2c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08004b2c 	.word	0x08004b2c

080001e0 <PendSV_Handler>:
.extern osScheduler
.global PendSV_Handler

.thumb_func
PendSV_Handler:
	MRS     R0, PSP
 80001e0:	f3ef 8009 	mrs	r0, PSP
	STMDB	R0!, {R4-R11}
 80001e4:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	MSR     PSP, R0
 80001e8:	f380 8809 	msr	PSP, r0

    BL 		osScheduler
 80001ec:	f001 fb30 	bl	8001850 <osScheduler>

	MRS     R0, PSP
 80001f0:	f3ef 8009 	mrs	r0, PSP
	LDMIA 	R0!, {R4-R11}
 80001f4:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	MSR		PSP, R0
 80001f8:	f380 8809 	msr	PSP, r0

	MOV LR, #0xFFFFFFFD			// put magic number into LR
 80001fc:	f06f 0e02 	mvn.w	lr, #2
	BX LR						// a "branch" to this magic number will
 8000200:	4770      	bx	lr

08000202 <SVC_Handler>:
.global SVC_Handler
.extern SVC_Handler_Main

.thumb_func
SVC_Handler:
	TST LR, #4 // check LR to know which stack is used
 8000202:	f01e 0f04 	tst.w	lr, #4
	ITE EQ // 2 next instructions are conditional
 8000206:	bf0c      	ite	eq
	MRSEQ R0, MSP // save MSP if bit 2 is 0
 8000208:	f3ef 8008 	mrseq	r0, MSP
	MRSNE R0, PSP // save PSP if bit 2 is 1
 800020c:	f3ef 8009 	mrsne	r0, PSP

	B SVC_Handler_Main
 8000210:	f001 bdd2 	b.w	8001db8 <SVC_Handler_Main>
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2iz>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a64:	d215      	bcs.n	8000a92 <__aeabi_d2iz+0x36>
 8000a66:	d511      	bpl.n	8000a8c <__aeabi_d2iz+0x30>
 8000a68:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d912      	bls.n	8000a98 <__aeabi_d2iz+0x3c>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a82:	fa23 f002 	lsr.w	r0, r3, r2
 8000a86:	bf18      	it	ne
 8000a88:	4240      	negne	r0, r0
 8000a8a:	4770      	bx	lr
 8000a8c:	f04f 0000 	mov.w	r0, #0
 8000a90:	4770      	bx	lr
 8000a92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a96:	d105      	bne.n	8000aa4 <__aeabi_d2iz+0x48>
 8000a98:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a9c:	bf08      	it	eq
 8000a9e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000ac0:	f000 b96a 	b.w	8000d98 <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9d08      	ldr	r5, [sp, #32]
 8000ae2:	460c      	mov	r4, r1
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d14e      	bne.n	8000b86 <__udivmoddi4+0xaa>
 8000ae8:	4694      	mov	ip, r2
 8000aea:	458c      	cmp	ip, r1
 8000aec:	4686      	mov	lr, r0
 8000aee:	fab2 f282 	clz	r2, r2
 8000af2:	d962      	bls.n	8000bba <__udivmoddi4+0xde>
 8000af4:	b14a      	cbz	r2, 8000b0a <__udivmoddi4+0x2e>
 8000af6:	f1c2 0320 	rsb	r3, r2, #32
 8000afa:	4091      	lsls	r1, r2
 8000afc:	fa20 f303 	lsr.w	r3, r0, r3
 8000b00:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b04:	4319      	orrs	r1, r3
 8000b06:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b0e:	fa1f f68c 	uxth.w	r6, ip
 8000b12:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b16:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b1a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b1e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b22:	fb04 f106 	mul.w	r1, r4, r6
 8000b26:	4299      	cmp	r1, r3
 8000b28:	d90a      	bls.n	8000b40 <__udivmoddi4+0x64>
 8000b2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b2e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000b32:	f080 8112 	bcs.w	8000d5a <__udivmoddi4+0x27e>
 8000b36:	4299      	cmp	r1, r3
 8000b38:	f240 810f 	bls.w	8000d5a <__udivmoddi4+0x27e>
 8000b3c:	3c02      	subs	r4, #2
 8000b3e:	4463      	add	r3, ip
 8000b40:	1a59      	subs	r1, r3, r1
 8000b42:	fa1f f38e 	uxth.w	r3, lr
 8000b46:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b4a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b4e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b52:	fb00 f606 	mul.w	r6, r0, r6
 8000b56:	429e      	cmp	r6, r3
 8000b58:	d90a      	bls.n	8000b70 <__udivmoddi4+0x94>
 8000b5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b5e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000b62:	f080 80fc 	bcs.w	8000d5e <__udivmoddi4+0x282>
 8000b66:	429e      	cmp	r6, r3
 8000b68:	f240 80f9 	bls.w	8000d5e <__udivmoddi4+0x282>
 8000b6c:	4463      	add	r3, ip
 8000b6e:	3802      	subs	r0, #2
 8000b70:	1b9b      	subs	r3, r3, r6
 8000b72:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b76:	2100      	movs	r1, #0
 8000b78:	b11d      	cbz	r5, 8000b82 <__udivmoddi4+0xa6>
 8000b7a:	40d3      	lsrs	r3, r2
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b86:	428b      	cmp	r3, r1
 8000b88:	d905      	bls.n	8000b96 <__udivmoddi4+0xba>
 8000b8a:	b10d      	cbz	r5, 8000b90 <__udivmoddi4+0xb4>
 8000b8c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b90:	2100      	movs	r1, #0
 8000b92:	4608      	mov	r0, r1
 8000b94:	e7f5      	b.n	8000b82 <__udivmoddi4+0xa6>
 8000b96:	fab3 f183 	clz	r1, r3
 8000b9a:	2900      	cmp	r1, #0
 8000b9c:	d146      	bne.n	8000c2c <__udivmoddi4+0x150>
 8000b9e:	42a3      	cmp	r3, r4
 8000ba0:	d302      	bcc.n	8000ba8 <__udivmoddi4+0xcc>
 8000ba2:	4290      	cmp	r0, r2
 8000ba4:	f0c0 80f0 	bcc.w	8000d88 <__udivmoddi4+0x2ac>
 8000ba8:	1a86      	subs	r6, r0, r2
 8000baa:	eb64 0303 	sbc.w	r3, r4, r3
 8000bae:	2001      	movs	r0, #1
 8000bb0:	2d00      	cmp	r5, #0
 8000bb2:	d0e6      	beq.n	8000b82 <__udivmoddi4+0xa6>
 8000bb4:	e9c5 6300 	strd	r6, r3, [r5]
 8000bb8:	e7e3      	b.n	8000b82 <__udivmoddi4+0xa6>
 8000bba:	2a00      	cmp	r2, #0
 8000bbc:	f040 8090 	bne.w	8000ce0 <__udivmoddi4+0x204>
 8000bc0:	eba1 040c 	sub.w	r4, r1, ip
 8000bc4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bc8:	fa1f f78c 	uxth.w	r7, ip
 8000bcc:	2101      	movs	r1, #1
 8000bce:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bd2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bd6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bda:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bde:	fb07 f006 	mul.w	r0, r7, r6
 8000be2:	4298      	cmp	r0, r3
 8000be4:	d908      	bls.n	8000bf8 <__udivmoddi4+0x11c>
 8000be6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bea:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000bee:	d202      	bcs.n	8000bf6 <__udivmoddi4+0x11a>
 8000bf0:	4298      	cmp	r0, r3
 8000bf2:	f200 80cd 	bhi.w	8000d90 <__udivmoddi4+0x2b4>
 8000bf6:	4626      	mov	r6, r4
 8000bf8:	1a1c      	subs	r4, r3, r0
 8000bfa:	fa1f f38e 	uxth.w	r3, lr
 8000bfe:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c02:	fb08 4410 	mls	r4, r8, r0, r4
 8000c06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c0a:	fb00 f707 	mul.w	r7, r0, r7
 8000c0e:	429f      	cmp	r7, r3
 8000c10:	d908      	bls.n	8000c24 <__udivmoddi4+0x148>
 8000c12:	eb1c 0303 	adds.w	r3, ip, r3
 8000c16:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000c1a:	d202      	bcs.n	8000c22 <__udivmoddi4+0x146>
 8000c1c:	429f      	cmp	r7, r3
 8000c1e:	f200 80b0 	bhi.w	8000d82 <__udivmoddi4+0x2a6>
 8000c22:	4620      	mov	r0, r4
 8000c24:	1bdb      	subs	r3, r3, r7
 8000c26:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c2a:	e7a5      	b.n	8000b78 <__udivmoddi4+0x9c>
 8000c2c:	f1c1 0620 	rsb	r6, r1, #32
 8000c30:	408b      	lsls	r3, r1
 8000c32:	fa22 f706 	lsr.w	r7, r2, r6
 8000c36:	431f      	orrs	r7, r3
 8000c38:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c3c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c40:	ea43 030c 	orr.w	r3, r3, ip
 8000c44:	40f4      	lsrs	r4, r6
 8000c46:	fa00 f801 	lsl.w	r8, r0, r1
 8000c4a:	0c38      	lsrs	r0, r7, #16
 8000c4c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c50:	fbb4 fef0 	udiv	lr, r4, r0
 8000c54:	fa1f fc87 	uxth.w	ip, r7
 8000c58:	fb00 441e 	mls	r4, r0, lr, r4
 8000c5c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c60:	fb0e f90c 	mul.w	r9, lr, ip
 8000c64:	45a1      	cmp	r9, r4
 8000c66:	fa02 f201 	lsl.w	r2, r2, r1
 8000c6a:	d90a      	bls.n	8000c82 <__udivmoddi4+0x1a6>
 8000c6c:	193c      	adds	r4, r7, r4
 8000c6e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000c72:	f080 8084 	bcs.w	8000d7e <__udivmoddi4+0x2a2>
 8000c76:	45a1      	cmp	r9, r4
 8000c78:	f240 8081 	bls.w	8000d7e <__udivmoddi4+0x2a2>
 8000c7c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c80:	443c      	add	r4, r7
 8000c82:	eba4 0409 	sub.w	r4, r4, r9
 8000c86:	fa1f f983 	uxth.w	r9, r3
 8000c8a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c8e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c92:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c96:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c9a:	45a4      	cmp	ip, r4
 8000c9c:	d907      	bls.n	8000cae <__udivmoddi4+0x1d2>
 8000c9e:	193c      	adds	r4, r7, r4
 8000ca0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000ca4:	d267      	bcs.n	8000d76 <__udivmoddi4+0x29a>
 8000ca6:	45a4      	cmp	ip, r4
 8000ca8:	d965      	bls.n	8000d76 <__udivmoddi4+0x29a>
 8000caa:	3b02      	subs	r3, #2
 8000cac:	443c      	add	r4, r7
 8000cae:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cb2:	fba0 9302 	umull	r9, r3, r0, r2
 8000cb6:	eba4 040c 	sub.w	r4, r4, ip
 8000cba:	429c      	cmp	r4, r3
 8000cbc:	46ce      	mov	lr, r9
 8000cbe:	469c      	mov	ip, r3
 8000cc0:	d351      	bcc.n	8000d66 <__udivmoddi4+0x28a>
 8000cc2:	d04e      	beq.n	8000d62 <__udivmoddi4+0x286>
 8000cc4:	b155      	cbz	r5, 8000cdc <__udivmoddi4+0x200>
 8000cc6:	ebb8 030e 	subs.w	r3, r8, lr
 8000cca:	eb64 040c 	sbc.w	r4, r4, ip
 8000cce:	fa04 f606 	lsl.w	r6, r4, r6
 8000cd2:	40cb      	lsrs	r3, r1
 8000cd4:	431e      	orrs	r6, r3
 8000cd6:	40cc      	lsrs	r4, r1
 8000cd8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cdc:	2100      	movs	r1, #0
 8000cde:	e750      	b.n	8000b82 <__udivmoddi4+0xa6>
 8000ce0:	f1c2 0320 	rsb	r3, r2, #32
 8000ce4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ce8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cec:	fa24 f303 	lsr.w	r3, r4, r3
 8000cf0:	4094      	lsls	r4, r2
 8000cf2:	430c      	orrs	r4, r1
 8000cf4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cfc:	fa1f f78c 	uxth.w	r7, ip
 8000d00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d04:	fb08 3110 	mls	r1, r8, r0, r3
 8000d08:	0c23      	lsrs	r3, r4, #16
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb00 f107 	mul.w	r1, r0, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d908      	bls.n	8000d28 <__udivmoddi4+0x24c>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000d1e:	d22c      	bcs.n	8000d7a <__udivmoddi4+0x29e>
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d92a      	bls.n	8000d7a <__udivmoddi4+0x29e>
 8000d24:	3802      	subs	r0, #2
 8000d26:	4463      	add	r3, ip
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d30:	fb08 3311 	mls	r3, r8, r1, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb01 f307 	mul.w	r3, r1, r7
 8000d3c:	42a3      	cmp	r3, r4
 8000d3e:	d908      	bls.n	8000d52 <__udivmoddi4+0x276>
 8000d40:	eb1c 0404 	adds.w	r4, ip, r4
 8000d44:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000d48:	d213      	bcs.n	8000d72 <__udivmoddi4+0x296>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d911      	bls.n	8000d72 <__udivmoddi4+0x296>
 8000d4e:	3902      	subs	r1, #2
 8000d50:	4464      	add	r4, ip
 8000d52:	1ae4      	subs	r4, r4, r3
 8000d54:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d58:	e739      	b.n	8000bce <__udivmoddi4+0xf2>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	e6f0      	b.n	8000b40 <__udivmoddi4+0x64>
 8000d5e:	4608      	mov	r0, r1
 8000d60:	e706      	b.n	8000b70 <__udivmoddi4+0x94>
 8000d62:	45c8      	cmp	r8, r9
 8000d64:	d2ae      	bcs.n	8000cc4 <__udivmoddi4+0x1e8>
 8000d66:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d6a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d6e:	3801      	subs	r0, #1
 8000d70:	e7a8      	b.n	8000cc4 <__udivmoddi4+0x1e8>
 8000d72:	4631      	mov	r1, r6
 8000d74:	e7ed      	b.n	8000d52 <__udivmoddi4+0x276>
 8000d76:	4603      	mov	r3, r0
 8000d78:	e799      	b.n	8000cae <__udivmoddi4+0x1d2>
 8000d7a:	4630      	mov	r0, r6
 8000d7c:	e7d4      	b.n	8000d28 <__udivmoddi4+0x24c>
 8000d7e:	46d6      	mov	lr, sl
 8000d80:	e77f      	b.n	8000c82 <__udivmoddi4+0x1a6>
 8000d82:	4463      	add	r3, ip
 8000d84:	3802      	subs	r0, #2
 8000d86:	e74d      	b.n	8000c24 <__udivmoddi4+0x148>
 8000d88:	4606      	mov	r6, r0
 8000d8a:	4623      	mov	r3, r4
 8000d8c:	4608      	mov	r0, r1
 8000d8e:	e70f      	b.n	8000bb0 <__udivmoddi4+0xd4>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	4463      	add	r3, ip
 8000d94:	e730      	b.n	8000bf8 <__udivmoddi4+0x11c>
 8000d96:	bf00      	nop

08000d98 <__aeabi_idiv0>:
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop

08000d9c <k_mem_init>:
		}
	}
	printf("Exit\r\n");
}

int k_mem_init() {
 8000d9c:	b480      	push	{r7}
 8000d9e:	b085      	sub	sp, #20
 8000da0:	af00      	add	r7, sp, #0
	if (
			!kernel_init ||
 8000da2:	4b2f      	ldr	r3, [pc, #188]	@ (8000e60 <k_mem_init+0xc4>)
 8000da4:	681b      	ldr	r3, [r3, #0]
	if (
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d003      	beq.n	8000db2 <k_mem_init+0x16>
			!kernel_init ||
 8000daa:	4b2e      	ldr	r3, [pc, #184]	@ (8000e64 <k_mem_init+0xc8>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d002      	beq.n	8000db8 <k_mem_init+0x1c>
			kernel_mem_init
	) { return RTX_ERR; }
 8000db2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000db6:	e04c      	b.n	8000e52 <k_mem_init+0xb6>

	uint32_t curr_size = 32*1024;
 8000db8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000dbc:	60fb      	str	r3, [r7, #12]
	Block_Header* p_header = (Block_Header*)&_img_end;
 8000dbe:	4b2a      	ldr	r3, [pc, #168]	@ (8000e68 <k_mem_init+0xcc>)
 8000dc0:	60bb      	str	r3, [r7, #8]
	heap_end = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dc2:	4a2a      	ldr	r2, [pc, #168]	@ (8000e6c <k_mem_init+0xd0>)
 8000dc4:	4b2a      	ldr	r3, [pc, #168]	@ (8000e70 <k_mem_init+0xd4>)
 8000dc6:	1ad3      	subs	r3, r2, r3
 8000dc8:	4a2a      	ldr	r2, [pc, #168]	@ (8000e74 <k_mem_init+0xd8>)
 8000dca:	6013      	str	r3, [r2, #0]

	for (int i = 0; i < NUM_LAYERS - 1; i++) {
 8000dcc:	2300      	movs	r3, #0
 8000dce:	607b      	str	r3, [r7, #4]
 8000dd0:	e007      	b.n	8000de2 <k_mem_init+0x46>
		free_list[i] = NULL;
 8000dd2:	4a29      	ldr	r2, [pc, #164]	@ (8000e78 <k_mem_init+0xdc>)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NUM_LAYERS - 1; i++) {
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	3301      	adds	r3, #1
 8000de0:	607b      	str	r3, [r7, #4]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2b09      	cmp	r3, #9
 8000de6:	ddf4      	ble.n	8000dd2 <k_mem_init+0x36>
	}

	for (int i = NUM_LAYERS - 1; i >=0; i--) {
 8000de8:	230a      	movs	r3, #10
 8000dea:	603b      	str	r3, [r7, #0]
 8000dec:	e02a      	b.n	8000e44 <k_mem_init+0xa8>
		if ((int)p_header + (int)curr_size <= (int)heap_end) {
 8000dee:	68ba      	ldr	r2, [r7, #8]
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	4413      	add	r3, r2
 8000df4:	4a1f      	ldr	r2, [pc, #124]	@ (8000e74 <k_mem_init+0xd8>)
 8000df6:	6812      	ldr	r2, [r2, #0]
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	dc1d      	bgt.n	8000e38 <k_mem_init+0x9c>
			p_header->free = 1;
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	2201      	movs	r2, #1
 8000e00:	601a      	str	r2, [r3, #0]
			p_header->TID = 0;
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	2200      	movs	r2, #0
 8000e06:	605a      	str	r2, [r3, #4]
			p_header->free_list_index = i;
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	683a      	ldr	r2, [r7, #0]
 8000e0c:	609a      	str	r2, [r3, #8]
			p_header->magic_num = MAGIC_NUM;
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	4a1a      	ldr	r2, [pc, #104]	@ (8000e7c <k_mem_init+0xe0>)
 8000e12:	60da      	str	r2, [r3, #12]
			p_header->full_size = curr_size;
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	68fa      	ldr	r2, [r7, #12]
 8000e18:	611a      	str	r2, [r3, #16]
			p_header->p_prev = NULL;
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	615a      	str	r2, [r3, #20]
			p_header->p_next = NULL;
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	2200      	movs	r2, #0
 8000e24:	619a      	str	r2, [r3, #24]

			free_list[i] = p_header;
 8000e26:	4914      	ldr	r1, [pc, #80]	@ (8000e78 <k_mem_init+0xdc>)
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	68ba      	ldr	r2, [r7, #8]
 8000e2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			p_header = (Block_Header*)((int)p_header + (int)curr_size);
 8000e30:	68ba      	ldr	r2, [r7, #8]
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	4413      	add	r3, r2
 8000e36:	60bb      	str	r3, [r7, #8]
		}
		curr_size >>= 1;
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	085b      	lsrs	r3, r3, #1
 8000e3c:	60fb      	str	r3, [r7, #12]
	for (int i = NUM_LAYERS - 1; i >=0; i--) {
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	3b01      	subs	r3, #1
 8000e42:	603b      	str	r3, [r7, #0]
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	dad1      	bge.n	8000dee <k_mem_init+0x52>
	}

	kernel_mem_init = 1;
 8000e4a:	4b06      	ldr	r3, [pc, #24]	@ (8000e64 <k_mem_init+0xc8>)
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	601a      	str	r2, [r3, #0]
	return RTX_OK;
 8000e50:	2300      	movs	r3, #0
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3714      	adds	r7, #20
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	20000348 	.word	0x20000348
 8000e64:	20000094 	.word	0x20000094
 8000e68:	20008568 	.word	0x20008568
 8000e6c:	20018000 	.word	0x20018000
 8000e70:	00004000 	.word	0x00004000
 8000e74:	20000090 	.word	0x20000090
 8000e78:	2000009c 	.word	0x2000009c
 8000e7c:	02d1775a 	.word	0x02d1775a

08000e80 <k_mem_alloc_SVC>:
	__SVC(SVC_MALLOC);
// overwriting return value
	return p_task->SVC.MALLOC_p_buf;
}

void* k_mem_alloc_SVC(size_t size) {
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b086      	sub	sp, #24
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
	if (
			!kernel_mem_init ||
 8000e88:	4b5d      	ldr	r3, [pc, #372]	@ (8001000 <k_mem_alloc_SVC+0x180>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
	if (
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d008      	beq.n	8000ea2 <k_mem_alloc_SVC+0x22>
			!kernel_mem_init ||
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d005      	beq.n	8000ea2 <k_mem_alloc_SVC+0x22>
			size == 0 ||
			size > max_chunk_size - sizeof(Block_Header)
 8000e96:	4b5b      	ldr	r3, [pc, #364]	@ (8001004 <k_mem_alloc_SVC+0x184>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	3b1c      	subs	r3, #28
			size == 0 ||
 8000e9c:	687a      	ldr	r2, [r7, #4]
 8000e9e:	429a      	cmp	r2, r3
 8000ea0:	d901      	bls.n	8000ea6 <k_mem_alloc_SVC+0x26>
	) { return NULL; }
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	e0a8      	b.n	8000ff8 <k_mem_alloc_SVC+0x178>

	int i = NUM_LAYERS - 1;
 8000ea6:	230a      	movs	r3, #10
 8000ea8:	617b      	str	r3, [r7, #20]
	int chunk_size = 32*1024;
 8000eaa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000eae:	613b      	str	r3, [r7, #16]

	while (
 8000eb0:	e005      	b.n	8000ebe <k_mem_alloc_SVC+0x3e>
			chunk_size >= (((uint32_t)((int)size + (int)sizeof(Block_Header))) << 1) &&
			i > 0
	) {
		--i;
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	3b01      	subs	r3, #1
 8000eb6:	617b      	str	r3, [r7, #20]
		chunk_size >>= 1;
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	105b      	asrs	r3, r3, #1
 8000ebc:	613b      	str	r3, [r7, #16]
			chunk_size >= (((uint32_t)((int)size + (int)sizeof(Block_Header))) << 1) &&
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	331c      	adds	r3, #28
 8000ec2:	005a      	lsls	r2, r3, #1
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	429a      	cmp	r2, r3
 8000ec8:	d802      	bhi.n	8000ed0 <k_mem_alloc_SVC+0x50>
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	dcf0      	bgt.n	8000eb2 <k_mem_alloc_SVC+0x32>
	}

	Block_Header* p_header = NULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	60fb      	str	r3, [r7, #12]
	for (; i < NUM_LAYERS; i++) {
 8000ed4:	e02f      	b.n	8000f36 <k_mem_alloc_SVC+0xb6>
		if (free_list[i] && size <= free_list[i]->full_size - sizeof(Block_Header)) {
 8000ed6:	4a4c      	ldr	r2, [pc, #304]	@ (8001008 <k_mem_alloc_SVC+0x188>)
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d023      	beq.n	8000f2a <k_mem_alloc_SVC+0xaa>
 8000ee2:	4a49      	ldr	r2, [pc, #292]	@ (8001008 <k_mem_alloc_SVC+0x188>)
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eea:	691b      	ldr	r3, [r3, #16]
 8000eec:	3b1c      	subs	r3, #28
 8000eee:	687a      	ldr	r2, [r7, #4]
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	d81a      	bhi.n	8000f2a <k_mem_alloc_SVC+0xaa>
			p_header = free_list[i];
 8000ef4:	4a44      	ldr	r2, [pc, #272]	@ (8001008 <k_mem_alloc_SVC+0x188>)
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000efc:	60fb      	str	r3, [r7, #12]
			free_list[i] = free_list[i]->p_next;
 8000efe:	4a42      	ldr	r2, [pc, #264]	@ (8001008 <k_mem_alloc_SVC+0x188>)
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f06:	699a      	ldr	r2, [r3, #24]
 8000f08:	493f      	ldr	r1, [pc, #252]	@ (8001008 <k_mem_alloc_SVC+0x188>)
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (free_list[i]) {
 8000f10:	4a3d      	ldr	r2, [pc, #244]	@ (8001008 <k_mem_alloc_SVC+0x188>)
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d010      	beq.n	8000f3e <k_mem_alloc_SVC+0xbe>
				free_list[i]->p_prev = NULL;
 8000f1c:	4a3a      	ldr	r2, [pc, #232]	@ (8001008 <k_mem_alloc_SVC+0x188>)
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f24:	2200      	movs	r2, #0
 8000f26:	615a      	str	r2, [r3, #20]
			}
			break;
 8000f28:	e009      	b.n	8000f3e <k_mem_alloc_SVC+0xbe>
		}
		chunk_size <<= 1;
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	613b      	str	r3, [r7, #16]
	for (; i < NUM_LAYERS; i++) {
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	3301      	adds	r3, #1
 8000f34:	617b      	str	r3, [r7, #20]
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	2b0a      	cmp	r3, #10
 8000f3a:	ddcc      	ble.n	8000ed6 <k_mem_alloc_SVC+0x56>
 8000f3c:	e000      	b.n	8000f40 <k_mem_alloc_SVC+0xc0>
			break;
 8000f3e:	bf00      	nop
	}
	if (!p_header) { return NULL; }
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d134      	bne.n	8000fb0 <k_mem_alloc_SVC+0x130>
 8000f46:	2300      	movs	r3, #0
 8000f48:	e056      	b.n	8000ff8 <k_mem_alloc_SVC+0x178>

	while (
			chunk_size >> 1 >= (uint32_t)((int)size + (int)sizeof(Block_Header)) &&
			i > 0
	) {
		--i;
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	3b01      	subs	r3, #1
 8000f4e:	617b      	str	r3, [r7, #20]
		chunk_size >>= 1;
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	105b      	asrs	r3, r3, #1
 8000f54:	613b      	str	r3, [r7, #16]

		Block_Header* p_new_header = (Block_Header*)((int)p_header + (int)chunk_size); // check all cases
 8000f56:	68fa      	ldr	r2, [r7, #12]
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	60bb      	str	r3, [r7, #8]
		p_new_header->free = 1;
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	2201      	movs	r2, #1
 8000f62:	601a      	str	r2, [r3, #0]
		p_new_header->TID = 0;
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	2200      	movs	r2, #0
 8000f68:	605a      	str	r2, [r3, #4]
		p_new_header->free_list_index = i;
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	697a      	ldr	r2, [r7, #20]
 8000f6e:	609a      	str	r2, [r3, #8]
		p_new_header->magic_num = MAGIC_NUM;
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	4a26      	ldr	r2, [pc, #152]	@ (800100c <k_mem_alloc_SVC+0x18c>)
 8000f74:	60da      	str	r2, [r3, #12]
		p_new_header->full_size = chunk_size;
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	611a      	str	r2, [r3, #16]
		p_new_header->p_prev = NULL;
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	615a      	str	r2, [r3, #20]
		p_new_header->p_next = free_list[i];
 8000f82:	4a21      	ldr	r2, [pc, #132]	@ (8001008 <k_mem_alloc_SVC+0x188>)
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	619a      	str	r2, [r3, #24]
		if (free_list[i]) {
 8000f8e:	4a1e      	ldr	r2, [pc, #120]	@ (8001008 <k_mem_alloc_SVC+0x188>)
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d005      	beq.n	8000fa6 <k_mem_alloc_SVC+0x126>
			free_list[i]->p_prev = p_new_header;
 8000f9a:	4a1b      	ldr	r2, [pc, #108]	@ (8001008 <k_mem_alloc_SVC+0x188>)
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fa2:	68ba      	ldr	r2, [r7, #8]
 8000fa4:	615a      	str	r2, [r3, #20]
		}
		free_list[i] = p_new_header;
 8000fa6:	4918      	ldr	r1, [pc, #96]	@ (8001008 <k_mem_alloc_SVC+0x188>)
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	68ba      	ldr	r2, [r7, #8]
 8000fac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			chunk_size >> 1 >= (uint32_t)((int)size + (int)sizeof(Block_Header)) &&
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	105b      	asrs	r3, r3, #1
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	331c      	adds	r3, #28
 8000fba:	429a      	cmp	r2, r3
 8000fbc:	d302      	bcc.n	8000fc4 <k_mem_alloc_SVC+0x144>
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	dcc2      	bgt.n	8000f4a <k_mem_alloc_SVC+0xca>
	}
	p_header->free = 0;
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	601a      	str	r2, [r3, #0]
	p_header->TID = osGetTID();
 8000fca:	f000 fb0d 	bl	80015e8 <osGetTID>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	605a      	str	r2, [r3, #4]
	p_header->free_list_index = i;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	697a      	ldr	r2, [r7, #20]
 8000fda:	609a      	str	r2, [r3, #8]
	p_header->magic_num = MAGIC_NUM;
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	4a0b      	ldr	r2, [pc, #44]	@ (800100c <k_mem_alloc_SVC+0x18c>)
 8000fe0:	60da      	str	r2, [r3, #12]
	p_header->full_size = chunk_size;
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	611a      	str	r2, [r3, #16]
	p_header->p_prev = NULL;
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	2200      	movs	r2, #0
 8000fec:	615a      	str	r2, [r3, #20]
	p_header->p_next = NULL;
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	619a      	str	r2, [r3, #24]

//	total_allocated_memory += p_header->full_size;
	return (void*)((int)p_header + (int)sizeof(Block_Header));
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	331c      	adds	r3, #28
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3718      	adds	r7, #24
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	20000094 	.word	0x20000094
 8001004:	20000000 	.word	0x20000000
 8001008:	2000009c 	.word	0x2000009c
 800100c:	02d1775a 	.word	0x02d1775a

08001010 <k_mem_dealloc>:

int k_mem_dealloc(void* p_mem) {
 8001010:	b590      	push	{r4, r7, lr}
 8001012:	b089      	sub	sp, #36	@ 0x24
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
	if (
			!kernel_mem_init ||
 8001018:	4b6c      	ldr	r3, [pc, #432]	@ (80011cc <k_mem_dealloc+0x1bc>)
 800101a:	681b      	ldr	r3, [r3, #0]
	if (
 800101c:	2b00      	cmp	r3, #0
 800101e:	d01d      	beq.n	800105c <k_mem_dealloc+0x4c>
			!kernel_mem_init ||
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d01a      	beq.n	800105c <k_mem_dealloc+0x4c>
			!p_mem ||
			((Block_Header*)((int)p_mem - (int)sizeof(Block_Header)))->free ||
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	3b1c      	subs	r3, #28
 800102a:	681b      	ldr	r3, [r3, #0]
			!p_mem ||
 800102c:	2b00      	cmp	r3, #0
 800102e:	d115      	bne.n	800105c <k_mem_dealloc+0x4c>
			((Block_Header*)((int)p_mem - (int)sizeof(Block_Header)))->magic_num != MAGIC_NUM ||
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	3b1c      	subs	r3, #28
 8001034:	68db      	ldr	r3, [r3, #12]
			((Block_Header*)((int)p_mem - (int)sizeof(Block_Header)))->free ||
 8001036:	4a66      	ldr	r2, [pc, #408]	@ (80011d0 <k_mem_dealloc+0x1c0>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d10f      	bne.n	800105c <k_mem_dealloc+0x4c>
			((Block_Header*)((int)p_mem - (int)sizeof(Block_Header)))->TID != osGetTID() ||
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	3b1c      	subs	r3, #28
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	461c      	mov	r4, r3
 8001044:	f000 fad0 	bl	80015e8 <osGetTID>
 8001048:	4603      	mov	r3, r0
			((Block_Header*)((int)p_mem - (int)sizeof(Block_Header)))->magic_num != MAGIC_NUM ||
 800104a:	429c      	cmp	r4, r3
 800104c:	d106      	bne.n	800105c <k_mem_dealloc+0x4c>
			((uint32_t)((int)p_mem - (int)sizeof(Block_Header))) >= heap_end
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	3b1c      	subs	r3, #28
 8001052:	461a      	mov	r2, r3
 8001054:	4b5f      	ldr	r3, [pc, #380]	@ (80011d4 <k_mem_dealloc+0x1c4>)
 8001056:	681b      	ldr	r3, [r3, #0]
			((Block_Header*)((int)p_mem - (int)sizeof(Block_Header)))->TID != osGetTID() ||
 8001058:	429a      	cmp	r2, r3
 800105a:	d302      	bcc.n	8001062 <k_mem_dealloc+0x52>
	) { return RTX_ERR; }
 800105c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001060:	e0af      	b.n	80011c2 <k_mem_dealloc+0x1b2>

	Block_Header* p_header = (Block_Header*)((int)p_mem - (int)sizeof(Block_Header));
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	3b1c      	subs	r3, #28
 8001066:	61fb      	str	r3, [r7, #28]
	Block_Header* p_buddy = (Block_Header*)((((uint32_t)p_header - (uint32_t)&_img_end) ^ p_header->full_size) + (uint32_t)&_img_end);
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	4a5b      	ldr	r2, [pc, #364]	@ (80011d8 <k_mem_dealloc+0x1c8>)
 800106c:	1a9a      	subs	r2, r3, r2
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	691b      	ldr	r3, [r3, #16]
 8001072:	4053      	eors	r3, r2
 8001074:	4a58      	ldr	r2, [pc, #352]	@ (80011d8 <k_mem_dealloc+0x1c8>)
 8001076:	4413      	add	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
	Block_Header* p_left = (Block_Header*)((((uint32_t)p_header - (uint32_t)&_img_end) & ~p_header->full_size) + (uint32_t)&_img_end);
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	4a56      	ldr	r2, [pc, #344]	@ (80011d8 <k_mem_dealloc+0x1c8>)
 800107e:	1a9a      	subs	r2, r3, r2
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	691b      	ldr	r3, [r3, #16]
 8001084:	43db      	mvns	r3, r3
 8001086:	4013      	ands	r3, r2
 8001088:	4a53      	ldr	r2, [pc, #332]	@ (80011d8 <k_mem_dealloc+0x1c8>)
 800108a:	4413      	add	r3, r2
 800108c:	617b      	str	r3, [r7, #20]
	Block_Header* p_right = (Block_Header*)((((uint32_t)p_header - (uint32_t)&_img_end) | p_header->full_size) + (uint32_t)&_img_end);
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	4a51      	ldr	r2, [pc, #324]	@ (80011d8 <k_mem_dealloc+0x1c8>)
 8001092:	1a9a      	subs	r2, r3, r2
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	691b      	ldr	r3, [r3, #16]
 8001098:	4313      	orrs	r3, r2
 800109a:	4a4f      	ldr	r2, [pc, #316]	@ (80011d8 <k_mem_dealloc+0x1c8>)
 800109c:	4413      	add	r3, r2
 800109e:	613b      	str	r3, [r7, #16]

	p_header->free = 1;
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	2201      	movs	r2, #1
 80010a4:	601a      	str	r2, [r3, #0]
	p_header->TID = 0;
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	2200      	movs	r2, #0
 80010aa:	605a      	str	r2, [r3, #4]

	total_allocated_memory -= p_header->full_size;
 80010ac:	4b4b      	ldr	r3, [pc, #300]	@ (80011dc <k_mem_dealloc+0x1cc>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	461a      	mov	r2, r3
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	691b      	ldr	r3, [r3, #16]
 80010b6:	1ad3      	subs	r3, r2, r3
 80010b8:	461a      	mov	r2, r3
 80010ba:	4b48      	ldr	r3, [pc, #288]	@ (80011dc <k_mem_dealloc+0x1cc>)
 80010bc:	601a      	str	r2, [r3, #0]

	while (
 80010be:	e04b      	b.n	8001158 <k_mem_dealloc+0x148>
			p_left->free &&
			p_right->free &&
			p_left->full_size == p_right->full_size &&
			(uint32_t)p_header < heap_end
	) {
		if (p_buddy == free_list[p_buddy->free_list_index]) {
 80010c0:	69bb      	ldr	r3, [r7, #24]
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	4a46      	ldr	r2, [pc, #280]	@ (80011e0 <k_mem_dealloc+0x1d0>)
 80010c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d106      	bne.n	80010de <k_mem_dealloc+0xce>
			free_list[p_buddy->free_list_index] = p_buddy->p_next;
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	6992      	ldr	r2, [r2, #24]
 80010d8:	4941      	ldr	r1, [pc, #260]	@ (80011e0 <k_mem_dealloc+0x1d0>)
 80010da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}
		if (p_buddy->p_prev) {
 80010de:	69bb      	ldr	r3, [r7, #24]
 80010e0:	695b      	ldr	r3, [r3, #20]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d004      	beq.n	80010f0 <k_mem_dealloc+0xe0>
			p_buddy->p_prev->p_next = p_buddy->p_next;
 80010e6:	69bb      	ldr	r3, [r7, #24]
 80010e8:	695b      	ldr	r3, [r3, #20]
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	6992      	ldr	r2, [r2, #24]
 80010ee:	619a      	str	r2, [r3, #24]
		}
		if (p_buddy->p_next) {
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	699b      	ldr	r3, [r3, #24]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d004      	beq.n	8001102 <k_mem_dealloc+0xf2>
			p_buddy->p_next->p_prev = p_buddy->p_prev;
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	6952      	ldr	r2, [r2, #20]
 8001100:	615a      	str	r2, [r3, #20]
		}

		p_right->magic_num = 0;
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	2200      	movs	r2, #0
 8001106:	60da      	str	r2, [r3, #12]

		p_header = p_left;
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	61fb      	str	r3, [r7, #28]
		p_header->free_list_index++;
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	1c5a      	adds	r2, r3, #1
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	609a      	str	r2, [r3, #8]
		p_header->full_size <<= 1;
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	691b      	ldr	r3, [r3, #16]
 800111a:	005a      	lsls	r2, r3, #1
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	611a      	str	r2, [r3, #16]

		p_buddy = (Block_Header*)((((uint32_t)p_header - (uint32_t)&_img_end) ^ p_header->full_size) + (uint32_t)&_img_end);
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	4a2d      	ldr	r2, [pc, #180]	@ (80011d8 <k_mem_dealloc+0x1c8>)
 8001124:	1a9a      	subs	r2, r3, r2
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	691b      	ldr	r3, [r3, #16]
 800112a:	4053      	eors	r3, r2
 800112c:	4a2a      	ldr	r2, [pc, #168]	@ (80011d8 <k_mem_dealloc+0x1c8>)
 800112e:	4413      	add	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
		p_left = (Block_Header*)((((uint32_t)p_header - (uint32_t)&_img_end) & ~p_header->full_size) + (uint32_t)&_img_end);
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	4a28      	ldr	r2, [pc, #160]	@ (80011d8 <k_mem_dealloc+0x1c8>)
 8001136:	1a9a      	subs	r2, r3, r2
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	691b      	ldr	r3, [r3, #16]
 800113c:	43db      	mvns	r3, r3
 800113e:	4013      	ands	r3, r2
 8001140:	4a25      	ldr	r2, [pc, #148]	@ (80011d8 <k_mem_dealloc+0x1c8>)
 8001142:	4413      	add	r3, r2
 8001144:	617b      	str	r3, [r7, #20]
		p_right = (Block_Header*)((((uint32_t)p_header - (uint32_t)&_img_end) | p_header->full_size) + (uint32_t)&_img_end);
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	4a23      	ldr	r2, [pc, #140]	@ (80011d8 <k_mem_dealloc+0x1c8>)
 800114a:	1a9a      	subs	r2, r3, r2
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	691b      	ldr	r3, [r3, #16]
 8001150:	4313      	orrs	r3, r2
 8001152:	4a21      	ldr	r2, [pc, #132]	@ (80011d8 <k_mem_dealloc+0x1c8>)
 8001154:	4413      	add	r3, r2
 8001156:	613b      	str	r3, [r7, #16]
			p_header->free_list_index < NUM_LAYERS - 1 &&
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	689b      	ldr	r3, [r3, #8]
			p_left->full_size == p_right->full_size &&
 800115c:	2b09      	cmp	r3, #9
 800115e:	dc12      	bgt.n	8001186 <k_mem_dealloc+0x176>
			p_left->free &&
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	681b      	ldr	r3, [r3, #0]
			p_header->free_list_index < NUM_LAYERS - 1 &&
 8001164:	2b00      	cmp	r3, #0
 8001166:	d00e      	beq.n	8001186 <k_mem_dealloc+0x176>
			p_right->free &&
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	681b      	ldr	r3, [r3, #0]
			p_left->free &&
 800116c:	2b00      	cmp	r3, #0
 800116e:	d00a      	beq.n	8001186 <k_mem_dealloc+0x176>
			p_left->full_size == p_right->full_size &&
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	691a      	ldr	r2, [r3, #16]
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	691b      	ldr	r3, [r3, #16]
			p_right->free &&
 8001178:	429a      	cmp	r2, r3
 800117a:	d104      	bne.n	8001186 <k_mem_dealloc+0x176>
			(uint32_t)p_header < heap_end
 800117c:	69fa      	ldr	r2, [r7, #28]
 800117e:	4b15      	ldr	r3, [pc, #84]	@ (80011d4 <k_mem_dealloc+0x1c4>)
 8001180:	681b      	ldr	r3, [r3, #0]
			p_left->full_size == p_right->full_size &&
 8001182:	429a      	cmp	r2, r3
 8001184:	d39c      	bcc.n	80010c0 <k_mem_dealloc+0xb0>
	}

	int i = p_header->free_list_index;
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	60fb      	str	r3, [r7, #12]
	p_header->p_prev = NULL;
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	2200      	movs	r2, #0
 8001190:	615a      	str	r2, [r3, #20]
	p_header->p_next = free_list[i];
 8001192:	4a13      	ldr	r2, [pc, #76]	@ (80011e0 <k_mem_dealloc+0x1d0>)
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	619a      	str	r2, [r3, #24]
	if (free_list[i]) { free_list[i]->p_prev = p_header; }
 800119e:	4a10      	ldr	r2, [pc, #64]	@ (80011e0 <k_mem_dealloc+0x1d0>)
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d005      	beq.n	80011b6 <k_mem_dealloc+0x1a6>
 80011aa:	4a0d      	ldr	r2, [pc, #52]	@ (80011e0 <k_mem_dealloc+0x1d0>)
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011b2:	69fa      	ldr	r2, [r7, #28]
 80011b4:	615a      	str	r2, [r3, #20]
	free_list[i] = p_header;
 80011b6:	490a      	ldr	r1, [pc, #40]	@ (80011e0 <k_mem_dealloc+0x1d0>)
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	69fa      	ldr	r2, [r7, #28]
 80011bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	return RTX_OK;
 80011c0:	2300      	movs	r3, #0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3724      	adds	r7, #36	@ 0x24
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd90      	pop	{r4, r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000094 	.word	0x20000094
 80011d0:	02d1775a 	.word	0x02d1775a
 80011d4:	20000090 	.word	0x20000090
 80011d8:	20008568 	.word	0x20008568
 80011dc:	20000098 	.word	0x20000098
 80011e0:	2000009c 	.word	0x2000009c

080011e4 <NULL_TASK>:


int running_task_index = -1;
int last_running_task_index = -1;

void NULL_TASK(void* args) {
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
	//printf("0\r\n");
//	SVC_printf(_NEUTRAL_ "NULL_TASK()\r\n");
	while (1) {
 80011ec:	bf00      	nop
 80011ee:	e7fd      	b.n	80011ec <NULL_TASK+0x8>

080011f0 <osKernelInit>:

	p_task->SVC.PRINTF_p_str = p_str;
	__SVC(SVC_PRINTF);
}

void osKernelInit(void) {
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b08c      	sub	sp, #48	@ 0x30
 80011f4:	af00      	add	r7, sp, #0
	if (kernel_init) { return; }
 80011f6:	4b56      	ldr	r3, [pc, #344]	@ (8001350 <osKernelInit+0x160>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	f040 80a4 	bne.w	8001348 <osKernelInit+0x158>

//	SHPR3 |= 0xFFU << 24; //Set the priority of SysTick to be the weakest
//	SHPR3 |= 0xFEU << 16; //shift the constant 0xFE 16 bits to set PendSV priority
//	SHPR2 |= 0xFDU << 24; //set the priority of SVC higher than PendSV
	SHPR3 = (SHPR3 & ~(0xFFU << 24)) | (0xF0U << 24);//SysTick is lowest priority (highest number)
 8001200:	4b54      	ldr	r3, [pc, #336]	@ (8001354 <osKernelInit+0x164>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8001208:	4a52      	ldr	r2, [pc, #328]	@ (8001354 <osKernelInit+0x164>)
 800120a:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800120e:	6013      	str	r3, [r2, #0]
	SHPR3 = (SHPR3 & ~(0xFFU << 16)) | (0xE0U << 16);//PendSV is in the middle
 8001210:	4b50      	ldr	r3, [pc, #320]	@ (8001354 <osKernelInit+0x164>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8001218:	4a4e      	ldr	r2, [pc, #312]	@ (8001354 <osKernelInit+0x164>)
 800121a:	f443 0360 	orr.w	r3, r3, #14680064	@ 0xe00000
 800121e:	6013      	str	r3, [r2, #0]
	SHPR2 = (SHPR2 & ~(0xFFU << 24)) | (0xD0U << 24);//SVC is highest priority (lowest number)
 8001220:	4b4d      	ldr	r3, [pc, #308]	@ (8001358 <osKernelInit+0x168>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8001228:	4a4b      	ldr	r2, [pc, #300]	@ (8001358 <osKernelInit+0x168>)
 800122a:	f043 4350 	orr.w	r3, r3, #3489660928	@ 0xd0000000
 800122e:	6013      	str	r3, [r2, #0]

    task_count = 0;
 8001230:	4b4a      	ldr	r3, [pc, #296]	@ (800135c <osKernelInit+0x16c>)
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
    kernel_running = 0;
 8001236:	4b4a      	ldr	r3, [pc, #296]	@ (8001360 <osKernelInit+0x170>)
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MAX_TASKS; i++) {
 800123c:	2300      	movs	r3, #0
 800123e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001240:	e05d      	b.n	80012fe <osKernelInit+0x10e>
        tcb_array[i].ptask = NULL;
 8001242:	4948      	ldr	r1, [pc, #288]	@ (8001364 <osKernelInit+0x174>)
 8001244:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001246:	4613      	mov	r3, r2
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	4413      	add	r3, r2
 800124c:	00db      	lsls	r3, r3, #3
 800124e:	440b      	add	r3, r1
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
        tcb_array[i].stack_high = -1;
 8001254:	4943      	ldr	r1, [pc, #268]	@ (8001364 <osKernelInit+0x174>)
 8001256:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001258:	4613      	mov	r3, r2
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	4413      	add	r3, r2
 800125e:	00db      	lsls	r3, r3, #3
 8001260:	440b      	add	r3, r1
 8001262:	3304      	adds	r3, #4
 8001264:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001268:	601a      	str	r2, [r3, #0]
        tcb_array[i].p_chunk = NULL;
 800126a:	493e      	ldr	r1, [pc, #248]	@ (8001364 <osKernelInit+0x174>)
 800126c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800126e:	4613      	mov	r3, r2
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	4413      	add	r3, r2
 8001274:	00db      	lsls	r3, r3, #3
 8001276:	440b      	add	r3, r1
 8001278:	3308      	adds	r3, #8
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
        tcb_array[i].tid = -1;
 800127e:	4939      	ldr	r1, [pc, #228]	@ (8001364 <osKernelInit+0x174>)
 8001280:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001282:	4613      	mov	r3, r2
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	4413      	add	r3, r2
 8001288:	00db      	lsls	r3, r3, #3
 800128a:	440b      	add	r3, r1
 800128c:	330c      	adds	r3, #12
 800128e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001292:	601a      	str	r2, [r3, #0]
        tcb_array[i].state = DORMANT;
 8001294:	4933      	ldr	r1, [pc, #204]	@ (8001364 <osKernelInit+0x174>)
 8001296:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001298:	4613      	mov	r3, r2
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	4413      	add	r3, r2
 800129e:	00db      	lsls	r3, r3, #3
 80012a0:	440b      	add	r3, r1
 80012a2:	3310      	adds	r3, #16
 80012a4:	2200      	movs	r2, #0
 80012a6:	701a      	strb	r2, [r3, #0]
        tcb_array[i].stack_size = 0x0;
 80012a8:	492e      	ldr	r1, [pc, #184]	@ (8001364 <osKernelInit+0x174>)
 80012aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80012ac:	4613      	mov	r3, r2
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	4413      	add	r3, r2
 80012b2:	00db      	lsls	r3, r3, #3
 80012b4:	440b      	add	r3, r1
 80012b6:	3312      	adds	r3, #18
 80012b8:	2200      	movs	r2, #0
 80012ba:	801a      	strh	r2, [r3, #0]
        tcb_array[i].initial_deadline = 0;
 80012bc:	4929      	ldr	r1, [pc, #164]	@ (8001364 <osKernelInit+0x174>)
 80012be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80012c0:	4613      	mov	r3, r2
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	4413      	add	r3, r2
 80012c6:	00db      	lsls	r3, r3, #3
 80012c8:	440b      	add	r3, r1
 80012ca:	3314      	adds	r3, #20
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
        tcb_array[i].current_deadline = 0;
 80012d0:	4924      	ldr	r1, [pc, #144]	@ (8001364 <osKernelInit+0x174>)
 80012d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80012d4:	4613      	mov	r3, r2
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	4413      	add	r3, r2
 80012da:	00db      	lsls	r3, r3, #3
 80012dc:	440b      	add	r3, r1
 80012de:	3318      	adds	r3, #24
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
        // Initialize any additional fields here
    	tcb_array[i].p_stack = NULL;
 80012e4:	491f      	ldr	r1, [pc, #124]	@ (8001364 <osKernelInit+0x174>)
 80012e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80012e8:	4613      	mov	r3, r2
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	4413      	add	r3, r2
 80012ee:	00db      	lsls	r3, r3, #3
 80012f0:	440b      	add	r3, r1
 80012f2:	3324      	adds	r3, #36	@ 0x24
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MAX_TASKS; i++) {
 80012f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012fa:	3301      	adds	r3, #1
 80012fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80012fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001300:	2b0f      	cmp	r3, #15
 8001302:	dd9e      	ble.n	8001242 <osKernelInit+0x52>
    }

    kernel_init = 1;
 8001304:	4b12      	ldr	r3, [pc, #72]	@ (8001350 <osKernelInit+0x160>)
 8001306:	2201      	movs	r2, #1
 8001308:	601a      	str	r2, [r3, #0]
    if (k_mem_init() == RTX_ERR) {
 800130a:	f7ff fd47 	bl	8000d9c <k_mem_init>
 800130e:	4603      	mov	r3, r0
 8001310:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001314:	d103      	bne.n	800131e <osKernelInit+0x12e>
    	kernel_init = 0;
 8001316:	4b0e      	ldr	r3, [pc, #56]	@ (8001350 <osKernelInit+0x160>)
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
    	return;
 800131c:	e015      	b.n	800134a <osKernelInit+0x15a>
    }

    TCB null_task = { .ptask = NULL_TASK, .stack_size = 0x200 };
 800131e:	1d3b      	adds	r3, r7, #4
 8001320:	2228      	movs	r2, #40	@ 0x28
 8001322:	2100      	movs	r1, #0
 8001324:	4618      	mov	r0, r3
 8001326:	f002 fd61 	bl	8003dec <memset>
 800132a:	4b0f      	ldr	r3, [pc, #60]	@ (8001368 <osKernelInit+0x178>)
 800132c:	607b      	str	r3, [r7, #4]
 800132e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001332:	82fb      	strh	r3, [r7, #22]
    osCreateDeadlineTask(INT_MAX, &null_task);
 8001334:	1d3b      	adds	r3, r7, #4
 8001336:	4619      	mov	r1, r3
 8001338:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 800133c:	f000 f818 	bl	8001370 <osCreateDeadlineTask>

    printf(_SUCCESS_ "osKernelInit()\r\n");
 8001340:	480a      	ldr	r0, [pc, #40]	@ (800136c <osKernelInit+0x17c>)
 8001342:	f002 fd4b 	bl	8003ddc <puts>
 8001346:	e000      	b.n	800134a <osKernelInit+0x15a>
	if (kernel_init) { return; }
 8001348:	bf00      	nop
}
 800134a:	3730      	adds	r7, #48	@ 0x30
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	20000348 	.word	0x20000348
 8001354:	e000ed20 	.word	0xe000ed20
 8001358:	e000ed1c 	.word	0xe000ed1c
 800135c:	20000350 	.word	0x20000350
 8001360:	2000034c 	.word	0x2000034c
 8001364:	200000c8 	.word	0x200000c8
 8001368:	080011e5 	.word	0x080011e5
 800136c:	08004b44 	.word	0x08004b44

08001370 <osCreateDeadlineTask>:

int osCreateTask(TCB* p_new_task) { return osCreateDeadlineTask(5, p_new_task); }

int osCreateDeadlineTask(int deadline, TCB* p_new_task) {
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
	TCB* p_task = &tcb_array[osGetTID()];
 800137a:	f000 f935 	bl	80015e8 <osGetTID>
 800137e:	4602      	mov	r2, r0
 8001380:	4613      	mov	r3, r2
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	4413      	add	r3, r2
 8001386:	00db      	lsls	r3, r3, #3
 8001388:	4a09      	ldr	r2, [pc, #36]	@ (80013b0 <osCreateDeadlineTask+0x40>)
 800138a:	4413      	add	r3, r2
 800138c:	60fb      	str	r3, [r7, #12]

	p_task->SVC.CREATE_TASK_args.deadline = deadline;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	61da      	str	r2, [r3, #28]
	p_task->SVC.CREATE_TASK_args.p_new_task = p_new_task;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	683a      	ldr	r2, [r7, #0]
 8001398:	621a      	str	r2, [r3, #32]
	__SVC(SVC_CREATE_TASK);
 800139a:	df06      	svc	6

    printf(_SUCCESS_ "osCreateTask()\r\n");
 800139c:	4805      	ldr	r0, [pc, #20]	@ (80013b4 <osCreateDeadlineTask+0x44>)
 800139e:	f002 fd1d 	bl	8003ddc <puts>
	return p_task->SVC.CREATE_TASK_status;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	69db      	ldr	r3, [r3, #28]
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3710      	adds	r7, #16
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	200000c8 	.word	0x200000c8
 80013b4:	08004b64 	.word	0x08004b64

080013b8 <osCreateDeadlineTask_SVC>:

int osCreateDeadlineTask_SVC(int deadline, TCB* p_new_task) {
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b088      	sub	sp, #32
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	6039      	str	r1, [r7, #0]
	if (
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	dd13      	ble.n	80013f0 <osCreateDeadlineTask_SVC+0x38>
			deadline <= 0 ||
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d010      	beq.n	80013f0 <osCreateDeadlineTask_SVC+0x38>
			!p_new_task ||
			p_new_task->stack_size < STACK_SIZE ||
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	8a5b      	ldrh	r3, [r3, #18]
			!p_new_task ||
 80013d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80013d6:	d30b      	bcc.n	80013f0 <osCreateDeadlineTask_SVC+0x38>
			!p_new_task->ptask ||
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	681b      	ldr	r3, [r3, #0]
			p_new_task->stack_size < STACK_SIZE ||
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d007      	beq.n	80013f0 <osCreateDeadlineTask_SVC+0x38>
			task_count >= MAX_TASKS ||
 80013e0:	4b5b      	ldr	r3, [pc, #364]	@ (8001550 <osCreateDeadlineTask_SVC+0x198>)
 80013e2:	681b      	ldr	r3, [r3, #0]
			!p_new_task->ptask ||
 80013e4:	2b0f      	cmp	r3, #15
 80013e6:	dc03      	bgt.n	80013f0 <osCreateDeadlineTask_SVC+0x38>
			!kernel_init
 80013e8:	4b5a      	ldr	r3, [pc, #360]	@ (8001554 <osCreateDeadlineTask_SVC+0x19c>)
 80013ea:	681b      	ldr	r3, [r3, #0]
			task_count >= MAX_TASKS ||
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d102      	bne.n	80013f6 <osCreateDeadlineTask_SVC+0x3e>
	) { return RTX_ERR; }
 80013f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80013f4:	e0a7      	b.n	8001546 <osCreateDeadlineTask_SVC+0x18e>

	int i = 0;
 80013f6:	2300      	movs	r3, #0
 80013f8:	61fb      	str	r3, [r7, #28]
	TCB* p_kernel_task = NULL;
 80013fa:	2300      	movs	r3, #0
 80013fc:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < MAX_TASKS; i++) {
 80013fe:	2300      	movs	r3, #0
 8001400:	61fb      	str	r3, [r7, #28]
 8001402:	e016      	b.n	8001432 <osCreateDeadlineTask_SVC+0x7a>
		if (tcb_array[i].state == DORMANT) {
 8001404:	4954      	ldr	r1, [pc, #336]	@ (8001558 <osCreateDeadlineTask_SVC+0x1a0>)
 8001406:	69fa      	ldr	r2, [r7, #28]
 8001408:	4613      	mov	r3, r2
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	4413      	add	r3, r2
 800140e:	00db      	lsls	r3, r3, #3
 8001410:	440b      	add	r3, r1
 8001412:	3310      	adds	r3, #16
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d108      	bne.n	800142c <osCreateDeadlineTask_SVC+0x74>
			p_kernel_task = &tcb_array[i];
 800141a:	69fa      	ldr	r2, [r7, #28]
 800141c:	4613      	mov	r3, r2
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	4413      	add	r3, r2
 8001422:	00db      	lsls	r3, r3, #3
 8001424:	4a4c      	ldr	r2, [pc, #304]	@ (8001558 <osCreateDeadlineTask_SVC+0x1a0>)
 8001426:	4413      	add	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
			break;
 800142a:	e005      	b.n	8001438 <osCreateDeadlineTask_SVC+0x80>
	for (i = 0; i < MAX_TASKS; i++) {
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	3301      	adds	r3, #1
 8001430:	61fb      	str	r3, [r7, #28]
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	2b0f      	cmp	r3, #15
 8001436:	dde5      	ble.n	8001404 <osCreateDeadlineTask_SVC+0x4c>
		}
	}
	if (!p_kernel_task) { return RTX_ERR; }
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d102      	bne.n	8001444 <osCreateDeadlineTask_SVC+0x8c>
 800143e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001442:	e080      	b.n	8001546 <osCreateDeadlineTask_SVC+0x18e>

	Block_Header* p_chunk = k_mem_alloc_SVC(p_new_task->stack_size);
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	8a5b      	ldrh	r3, [r3, #18]
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff fd19 	bl	8000e80 <k_mem_alloc_SVC>
 800144e:	4603      	mov	r3, r0
 8001450:	617b      	str	r3, [r7, #20]
	if (!p_chunk) { return RTX_ERR; }
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d102      	bne.n	800145e <osCreateDeadlineTask_SVC+0xa6>
 8001458:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800145c:	e073      	b.n	8001546 <osCreateDeadlineTask_SVC+0x18e>

	p_chunk = (Block_Header*)((uint32_t)p_chunk - (uint32_t)(sizeof(Block_Header)));
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	3b1c      	subs	r3, #28
 8001462:	617b      	str	r3, [r7, #20]
	uint32_t* p_stack = (uint32_t*)((uint32_t)p_chunk + (uint32_t)p_chunk->full_size);
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	691a      	ldr	r2, [r3, #16]
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	4413      	add	r3, r2
 800146c:	613b      	str	r3, [r7, #16]

	p_chunk->TID = i; // transfer memory ownership from calling task to created task
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	69fa      	ldr	r2, [r7, #28]
 8001472:	605a      	str	r2, [r3, #4]

	p_new_task->tid = i;
 8001474:	69fa      	ldr	r2, [r7, #28]
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	60da      	str	r2, [r3, #12]
	p_new_task->state = READY;
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	2201      	movs	r2, #1
 800147e:	741a      	strb	r2, [r3, #16]
	p_new_task->initial_deadline = deadline;
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	615a      	str	r2, [r3, #20]
	p_new_task->current_deadline = deadline;
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	619a      	str	r2, [r3, #24]

	p_kernel_task->ptask = p_new_task->ptask;
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	601a      	str	r2, [r3, #0]

	p_kernel_task->stack_high = (int)p_stack;
 8001494:	693a      	ldr	r2, [r7, #16]
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	605a      	str	r2, [r3, #4]
	p_kernel_task->p_chunk = (uint32_t*)p_chunk;
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	697a      	ldr	r2, [r7, #20]
 800149e:	609a      	str	r2, [r3, #8]
	p_kernel_task->tid = i;
 80014a0:	69fa      	ldr	r2, [r7, #28]
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	60da      	str	r2, [r3, #12]
	p_kernel_task->state = READY;
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	2201      	movs	r2, #1
 80014aa:	741a      	strb	r2, [r3, #16]
	p_kernel_task->stack_size = p_new_task->stack_size;
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	8a5a      	ldrh	r2, [r3, #18]
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	825a      	strh	r2, [r3, #18]

	*(--p_stack) = 1<<24;
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	3b04      	subs	r3, #4
 80014b8:	613b      	str	r3, [r7, #16]
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80014c0:	601a      	str	r2, [r3, #0]
	*(--p_stack) = (uint32_t)p_new_task->ptask;
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	3b04      	subs	r3, #4
 80014ca:	613b      	str	r3, [r7, #16]
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	601a      	str	r2, [r3, #0]
	*(--p_stack) = (uint32_t)osTaskExit;
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	3b04      	subs	r3, #4
 80014d4:	613b      	str	r3, [r7, #16]
 80014d6:	4a21      	ldr	r2, [pc, #132]	@ (800155c <osCreateDeadlineTask_SVC+0x1a4>)
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	601a      	str	r2, [r3, #0]
	p_stack -= 13;
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	3b34      	subs	r3, #52	@ 0x34
 80014e0:	613b      	str	r3, [r7, #16]
	p_kernel_task->p_stack = p_stack;
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	693a      	ldr	r2, [r7, #16]
 80014e6:	625a      	str	r2, [r3, #36]	@ 0x24
	p_kernel_task->initial_deadline = deadline;
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	615a      	str	r2, [r3, #20]
	p_kernel_task->current_deadline = deadline;
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	687a      	ldr	r2, [r7, #4]
 80014f2:	619a      	str	r2, [r3, #24]

	++task_count;
 80014f4:	4b16      	ldr	r3, [pc, #88]	@ (8001550 <osCreateDeadlineTask_SVC+0x198>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	3301      	adds	r3, #1
 80014fa:	4a15      	ldr	r2, [pc, #84]	@ (8001550 <osCreateDeadlineTask_SVC+0x198>)
 80014fc:	6013      	str	r3, [r2, #0]

	int current_task = osGetTID();
 80014fe:	f000 f873 	bl	80015e8 <osGetTID>
 8001502:	4603      	mov	r3, r0
 8001504:	60fb      	str	r3, [r7, #12]
	TCB* p_current_task = &tcb_array[current_task];
 8001506:	68fa      	ldr	r2, [r7, #12]
 8001508:	4613      	mov	r3, r2
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	4413      	add	r3, r2
 800150e:	00db      	lsls	r3, r3, #3
 8001510:	4a11      	ldr	r2, [pc, #68]	@ (8001558 <osCreateDeadlineTask_SVC+0x1a0>)
 8001512:	4413      	add	r3, r2
 8001514:	60bb      	str	r3, [r7, #8]

	if (
			kernel_running &&
 8001516:	4b12      	ldr	r3, [pc, #72]	@ (8001560 <osCreateDeadlineTask_SVC+0x1a8>)
 8001518:	681b      	ldr	r3, [r3, #0]
	if (
 800151a:	2b00      	cmp	r3, #0
 800151c:	d012      	beq.n	8001544 <osCreateDeadlineTask_SVC+0x18c>
			kernel_running &&
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	2b00      	cmp	r3, #0
 8001522:	dd0f      	ble.n	8001544 <osCreateDeadlineTask_SVC+0x18c>
			current_task > 0 &&
			deadline < p_current_task->current_deadline // <=
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	699b      	ldr	r3, [r3, #24]
			current_task > 0 &&
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	429a      	cmp	r2, r3
 800152c:	da0a      	bge.n	8001544 <osCreateDeadlineTask_SVC+0x18c>
	) {
		p_current_task->state = READY;
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	2201      	movs	r2, #1
 8001532:	741a      	strb	r2, [r3, #16]
		SCB->ICSR |= 1<<28;
 8001534:	4b0b      	ldr	r3, [pc, #44]	@ (8001564 <osCreateDeadlineTask_SVC+0x1ac>)
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	4a0a      	ldr	r2, [pc, #40]	@ (8001564 <osCreateDeadlineTask_SVC+0x1ac>)
 800153a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800153e:	6053      	str	r3, [r2, #4]
		__asm("ISB");
 8001540:	f3bf 8f6f 	isb	sy
	}

    return RTX_OK;
 8001544:	2300      	movs	r3, #0
}
 8001546:	4618      	mov	r0, r3
 8001548:	3720      	adds	r7, #32
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	20000350 	.word	0x20000350
 8001554:	20000348 	.word	0x20000348
 8001558:	200000c8 	.word	0x200000c8
 800155c:	080016b1 	.word	0x080016b1
 8001560:	2000034c 	.word	0x2000034c
 8001564:	e000ed00 	.word	0xe000ed00

08001568 <osKernelStart>:

int osKernelStart(void) {
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
	if (
			!kernel_init ||
 800156e:	4b18      	ldr	r3, [pc, #96]	@ (80015d0 <osKernelStart+0x68>)
 8001570:	681b      	ldr	r3, [r3, #0]
	if (
 8001572:	2b00      	cmp	r3, #0
 8001574:	d003      	beq.n	800157e <osKernelStart+0x16>
			!kernel_init ||
 8001576:	4b17      	ldr	r3, [pc, #92]	@ (80015d4 <osKernelStart+0x6c>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d002      	beq.n	8001584 <osKernelStart+0x1c>
			kernel_running
	) { return RTX_ERR; }
 800157e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001582:	e01f      	b.n	80015c4 <osKernelStart+0x5c>

	TCB* p_task = &tcb_array[1];
 8001584:	4b14      	ldr	r3, [pc, #80]	@ (80015d8 <osKernelStart+0x70>)
 8001586:	607b      	str	r3, [r7, #4]
	if (p_task->state != READY) {
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	7c1b      	ldrb	r3, [r3, #16]
 800158c:	2b01      	cmp	r3, #1
 800158e:	d004      	beq.n	800159a <osKernelStart+0x32>
		p_task = &tcb_array[0];
 8001590:	4b12      	ldr	r3, [pc, #72]	@ (80015dc <osKernelStart+0x74>)
 8001592:	607b      	str	r3, [r7, #4]
		return RTX_ERR;
 8001594:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001598:	e014      	b.n	80015c4 <osKernelStart+0x5c>
	}

	__set_PSP((int)p_task->p_stack);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800159e:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	f383 8809 	msr	PSP, r3
}
 80015a6:	bf00      	nop
	p_task->state = RUNNING;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2202      	movs	r2, #2
 80015ac:	741a      	strb	r2, [r3, #16]

	last_running_task_index = 1;
 80015ae:	4b0c      	ldr	r3, [pc, #48]	@ (80015e0 <osKernelStart+0x78>)
 80015b0:	2201      	movs	r2, #1
 80015b2:	601a      	str	r2, [r3, #0]
	running_task_index = 1;
 80015b4:	4b0b      	ldr	r3, [pc, #44]	@ (80015e4 <osKernelStart+0x7c>)
 80015b6:	2201      	movs	r2, #1
 80015b8:	601a      	str	r2, [r3, #0]
	kernel_running = 1;
 80015ba:	4b06      	ldr	r3, [pc, #24]	@ (80015d4 <osKernelStart+0x6c>)
 80015bc:	2201      	movs	r2, #1
 80015be:	601a      	str	r2, [r3, #0]

	__SVC(SVC_CONTEXT_INIT);
 80015c0:	df01      	svc	1
	return RTX_OK;
 80015c2:	2300      	movs	r3, #0


	osScheduler();
	kernel_running = 1;
    printf(_SUCCESS_ "osKernelStart()\r\n");
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	20000348 	.word	0x20000348
 80015d4:	2000034c 	.word	0x2000034c
 80015d8:	200000f0 	.word	0x200000f0
 80015dc:	200000c8 	.word	0x200000c8
 80015e0:	20000008 	.word	0x20000008
 80015e4:	20000004 	.word	0x20000004

080015e8 <osGetTID>:
	p_task_copy->current_deadline = tcb_array[TID].current_deadline;

	return RTX_OK;
}

task_t osGetTID(void) {
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
    if (
    		kernel_running &&
 80015ec:	4b12      	ldr	r3, [pc, #72]	@ (8001638 <osGetTID+0x50>)
 80015ee:	681b      	ldr	r3, [r3, #0]
    if (
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d01a      	beq.n	800162a <osGetTID+0x42>
			running_task_index >= 0 &&
 80015f4:	4b11      	ldr	r3, [pc, #68]	@ (800163c <osGetTID+0x54>)
 80015f6:	681b      	ldr	r3, [r3, #0]
    		kernel_running &&
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	db16      	blt.n	800162a <osGetTID+0x42>
			tcb_array[running_task_index].state == RUNNING
 80015fc:	4b0f      	ldr	r3, [pc, #60]	@ (800163c <osGetTID+0x54>)
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	490f      	ldr	r1, [pc, #60]	@ (8001640 <osGetTID+0x58>)
 8001602:	4613      	mov	r3, r2
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	4413      	add	r3, r2
 8001608:	00db      	lsls	r3, r3, #3
 800160a:	440b      	add	r3, r1
 800160c:	3310      	adds	r3, #16
 800160e:	781b      	ldrb	r3, [r3, #0]
			running_task_index >= 0 &&
 8001610:	2b02      	cmp	r3, #2
 8001612:	d10a      	bne.n	800162a <osGetTID+0x42>
	) { return tcb_array[running_task_index].tid; }
 8001614:	4b09      	ldr	r3, [pc, #36]	@ (800163c <osGetTID+0x54>)
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	4909      	ldr	r1, [pc, #36]	@ (8001640 <osGetTID+0x58>)
 800161a:	4613      	mov	r3, r2
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	4413      	add	r3, r2
 8001620:	00db      	lsls	r3, r3, #3
 8001622:	440b      	add	r3, r1
 8001624:	330c      	adds	r3, #12
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	e000      	b.n	800162c <osGetTID+0x44>

    return 0;
 800162a:	2300      	movs	r3, #0
}
 800162c:	4618      	mov	r0, r3
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	2000034c 	.word	0x2000034c
 800163c:	20000004 	.word	0x20000004
 8001640:	200000c8 	.word	0x200000c8

08001644 <osYield_SVC>:

void osYield(void) {
	__SVC(SVC_YIELD);
}

void osYield_SVC(void) {
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
	if (running_task_index < 0) { return; }
 800164a:	4b15      	ldr	r3, [pc, #84]	@ (80016a0 <osYield_SVC+0x5c>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	2b00      	cmp	r3, #0
 8001650:	db21      	blt.n	8001696 <osYield_SVC+0x52>

	TCB* p_task = &tcb_array[osGetTID()];
 8001652:	f7ff ffc9 	bl	80015e8 <osGetTID>
 8001656:	4602      	mov	r2, r0
 8001658:	4613      	mov	r3, r2
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	4413      	add	r3, r2
 800165e:	00db      	lsls	r3, r3, #3
 8001660:	4a10      	ldr	r2, [pc, #64]	@ (80016a4 <osYield_SVC+0x60>)
 8001662:	4413      	add	r3, r2
 8001664:	607b      	str	r3, [r7, #4]
	p_task->state = READY;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2201      	movs	r2, #1
 800166a:	741a      	strb	r2, [r3, #16]
	p_task->current_deadline = p_task->initial_deadline;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	695a      	ldr	r2, [r3, #20]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	619a      	str	r2, [r3, #24]

	last_running_task_index = running_task_index;
 8001674:	4b0a      	ldr	r3, [pc, #40]	@ (80016a0 <osYield_SVC+0x5c>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a0b      	ldr	r2, [pc, #44]	@ (80016a8 <osYield_SVC+0x64>)
 800167a:	6013      	str	r3, [r2, #0]
	running_task_index = -1;
 800167c:	4b08      	ldr	r3, [pc, #32]	@ (80016a0 <osYield_SVC+0x5c>)
 800167e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001682:	601a      	str	r2, [r3, #0]

	SCB->ICSR |= 1<<28;
 8001684:	4b09      	ldr	r3, [pc, #36]	@ (80016ac <osYield_SVC+0x68>)
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	4a08      	ldr	r2, [pc, #32]	@ (80016ac <osYield_SVC+0x68>)
 800168a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800168e:	6053      	str	r3, [r2, #4]
	__asm("ISB");
 8001690:	f3bf 8f6f 	isb	sy
 8001694:	e000      	b.n	8001698 <osYield_SVC+0x54>
	if (running_task_index < 0) { return; }
 8001696:	bf00      	nop
}
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	20000004 	.word	0x20000004
 80016a4:	200000c8 	.word	0x200000c8
 80016a8:	20000008 	.word	0x20000008
 80016ac:	e000ed00 	.word	0xe000ed00

080016b0 <osTaskExit>:

int osTaskExit(void) {
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
	__SVC(SVC_TASK_EXIT);
 80016b4:	df05      	svc	5

	return RTX_ERR; // always errors on return
 80016b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <osSleep_SVC>:

	p_task->SVC.SLEEP_timeInMs = timeInMs;
	__SVC(SVC_SLEEP);
}

void osSleep_SVC(int timeInMs) {
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
	if (running_task_index < 0) { return; }
 80016cc:	4b14      	ldr	r3, [pc, #80]	@ (8001720 <osSleep_SVC+0x5c>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	db20      	blt.n	8001716 <osSleep_SVC+0x52>

	TCB* p_task = &tcb_array[osGetTID()];
 80016d4:	f7ff ff88 	bl	80015e8 <osGetTID>
 80016d8:	4602      	mov	r2, r0
 80016da:	4613      	mov	r3, r2
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	4413      	add	r3, r2
 80016e0:	00db      	lsls	r3, r3, #3
 80016e2:	4a10      	ldr	r2, [pc, #64]	@ (8001724 <osSleep_SVC+0x60>)
 80016e4:	4413      	add	r3, r2
 80016e6:	60fb      	str	r3, [r7, #12]
	p_task->state = SLEEPING;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	2203      	movs	r2, #3
 80016ec:	741a      	strb	r2, [r3, #16]
	p_task->current_deadline = timeInMs;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	619a      	str	r2, [r3, #24]

	last_running_task_index = running_task_index;
 80016f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001720 <osSleep_SVC+0x5c>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a0b      	ldr	r2, [pc, #44]	@ (8001728 <osSleep_SVC+0x64>)
 80016fa:	6013      	str	r3, [r2, #0]
	running_task_index = -1;
 80016fc:	4b08      	ldr	r3, [pc, #32]	@ (8001720 <osSleep_SVC+0x5c>)
 80016fe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001702:	601a      	str	r2, [r3, #0]

	SCB->ICSR |= 1<<28;
 8001704:	4b09      	ldr	r3, [pc, #36]	@ (800172c <osSleep_SVC+0x68>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	4a08      	ldr	r2, [pc, #32]	@ (800172c <osSleep_SVC+0x68>)
 800170a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800170e:	6053      	str	r3, [r2, #4]
	__asm("ISB");
 8001710:	f3bf 8f6f 	isb	sy
 8001714:	e000      	b.n	8001718 <osSleep_SVC+0x54>
	if (running_task_index < 0) { return; }
 8001716:	bf00      	nop
}
 8001718:	3710      	adds	r7, #16
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	20000004 	.word	0x20000004
 8001724:	200000c8 	.word	0x200000c8
 8001728:	20000008 	.word	0x20000008
 800172c:	e000ed00 	.word	0xe000ed00

08001730 <osPeriodYield>:

void osPeriodYield(void) {
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
	__SVC(SVC_PERIOD_YIELD);
 8001734:	df08      	svc	8
}
 8001736:	bf00      	nop
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <osPeriodYield_SVC>:

void osPeriodYield_SVC(void) {
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
	if (running_task_index < 0) { return; }
 8001746:	4b13      	ldr	r3, [pc, #76]	@ (8001794 <osPeriodYield_SVC+0x54>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2b00      	cmp	r3, #0
 800174c:	db1d      	blt.n	800178a <osPeriodYield_SVC+0x4a>

	TCB* p_task = &tcb_array[osGetTID()];
 800174e:	f7ff ff4b 	bl	80015e8 <osGetTID>
 8001752:	4602      	mov	r2, r0
 8001754:	4613      	mov	r3, r2
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	4413      	add	r3, r2
 800175a:	00db      	lsls	r3, r3, #3
 800175c:	4a0e      	ldr	r2, [pc, #56]	@ (8001798 <osPeriodYield_SVC+0x58>)
 800175e:	4413      	add	r3, r2
 8001760:	607b      	str	r3, [r7, #4]
	p_task->state = SLEEPING;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2203      	movs	r2, #3
 8001766:	741a      	strb	r2, [r3, #16]

	last_running_task_index = running_task_index;
 8001768:	4b0a      	ldr	r3, [pc, #40]	@ (8001794 <osPeriodYield_SVC+0x54>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a0b      	ldr	r2, [pc, #44]	@ (800179c <osPeriodYield_SVC+0x5c>)
 800176e:	6013      	str	r3, [r2, #0]
	running_task_index = -1;
 8001770:	4b08      	ldr	r3, [pc, #32]	@ (8001794 <osPeriodYield_SVC+0x54>)
 8001772:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001776:	601a      	str	r2, [r3, #0]

	SCB->ICSR |= 1<<28;
 8001778:	4b09      	ldr	r3, [pc, #36]	@ (80017a0 <osPeriodYield_SVC+0x60>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	4a08      	ldr	r2, [pc, #32]	@ (80017a0 <osPeriodYield_SVC+0x60>)
 800177e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001782:	6053      	str	r3, [r2, #4]
	__asm("ISB");
 8001784:	f3bf 8f6f 	isb	sy
 8001788:	e000      	b.n	800178c <osPeriodYield_SVC+0x4c>
	if (running_task_index < 0) { return; }
 800178a:	bf00      	nop
}
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	20000004 	.word	0x20000004
 8001798:	200000c8 	.word	0x200000c8
 800179c:	20000008 	.word	0x20000008
 80017a0:	e000ed00 	.word	0xe000ed00

080017a4 <osSetDeadline_SVC>:
	__SVC(SVC_SET_DEADLINE);

	return p_task->SVC.SET_DEADLINE_status;
}

int osSetDeadline_SVC(int deadline, task_t TID) {
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b086      	sub	sp, #24
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
	task_t curr_TID = osGetTID();
 80017ae:	f7ff ff1b 	bl	80015e8 <osGetTID>
 80017b2:	6178      	str	r0, [r7, #20]
	TCB* p_curr_task = &tcb_array[curr_TID];
 80017b4:	697a      	ldr	r2, [r7, #20]
 80017b6:	4613      	mov	r3, r2
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	4413      	add	r3, r2
 80017bc:	00db      	lsls	r3, r3, #3
 80017be:	4a22      	ldr	r2, [pc, #136]	@ (8001848 <osSetDeadline_SVC+0xa4>)
 80017c0:	4413      	add	r3, r2
 80017c2:	613b      	str	r3, [r7, #16]
	if (
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	dd14      	ble.n	80017f4 <osSetDeadline_SVC+0x50>
			deadline <= 0 ||
 80017ca:	683a      	ldr	r2, [r7, #0]
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d010      	beq.n	80017f4 <osSetDeadline_SVC+0x50>
			TID == curr_TID ||
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d00d      	beq.n	80017f4 <osSetDeadline_SVC+0x50>
			TID <= 0 ||
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	2b0f      	cmp	r3, #15
 80017dc:	d80a      	bhi.n	80017f4 <osSetDeadline_SVC+0x50>
			TID >= MAX_TASKS ||
			tcb_array[TID].state == DORMANT
 80017de:	491a      	ldr	r1, [pc, #104]	@ (8001848 <osSetDeadline_SVC+0xa4>)
 80017e0:	683a      	ldr	r2, [r7, #0]
 80017e2:	4613      	mov	r3, r2
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	4413      	add	r3, r2
 80017e8:	00db      	lsls	r3, r3, #3
 80017ea:	440b      	add	r3, r1
 80017ec:	3310      	adds	r3, #16
 80017ee:	781b      	ldrb	r3, [r3, #0]
			TID >= MAX_TASKS ||
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d103      	bne.n	80017fc <osSetDeadline_SVC+0x58>
	) { p_curr_task->SVC.SET_DEADLINE_status = RTX_ERR; }
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80017fa:	61da      	str	r2, [r3, #28]

	TCB* p_target_task = &tcb_array[TID];
 80017fc:	683a      	ldr	r2, [r7, #0]
 80017fe:	4613      	mov	r3, r2
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	4413      	add	r3, r2
 8001804:	00db      	lsls	r3, r3, #3
 8001806:	4a10      	ldr	r2, [pc, #64]	@ (8001848 <osSetDeadline_SVC+0xa4>)
 8001808:	4413      	add	r3, r2
 800180a:	60fb      	str	r3, [r7, #12]
	p_target_task->initial_deadline = deadline;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	615a      	str	r2, [r3, #20]
	p_target_task->current_deadline = deadline;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	619a      	str	r2, [r3, #24]


	p_curr_task->SVC.SET_DEADLINE_status = RTX_OK;
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	2200      	movs	r2, #0
 800181c:	61da      	str	r2, [r3, #28]
	if (deadline <= p_curr_task->current_deadline) {
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	699b      	ldr	r3, [r3, #24]
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	429a      	cmp	r2, r3
 8001826:	dc0a      	bgt.n	800183e <osSetDeadline_SVC+0x9a>
		p_curr_task->state = READY;
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	2201      	movs	r2, #1
 800182c:	741a      	strb	r2, [r3, #16]
		SCB->ICSR |= 1<<28;
 800182e:	4b07      	ldr	r3, [pc, #28]	@ (800184c <osSetDeadline_SVC+0xa8>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	4a06      	ldr	r2, [pc, #24]	@ (800184c <osSetDeadline_SVC+0xa8>)
 8001834:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001838:	6053      	str	r3, [r2, #4]
		__asm("ISB");
 800183a:	f3bf 8f6f 	isb	sy
	}
}
 800183e:	bf00      	nop
 8001840:	4618      	mov	r0, r3
 8001842:	3718      	adds	r7, #24
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	200000c8 	.word	0x200000c8
 800184c:	e000ed00 	.word	0xe000ed00

08001850 <osScheduler>:
//	__asm("SVC #2");
//
//	return RTX_OK; // never reached
//}

void osScheduler(void) {
 8001850:	b480      	push	{r7}
 8001852:	b087      	sub	sp, #28
 8001854:	af00      	add	r7, sp, #0
	if (last_running_task_index >= 0) {
 8001856:	4b2c      	ldr	r3, [pc, #176]	@ (8001908 <osScheduler+0xb8>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2b00      	cmp	r3, #0
 800185c:	db0f      	blt.n	800187e <osScheduler+0x2e>
		TCB* p_last_task = &tcb_array[last_running_task_index];
 800185e:	4b2a      	ldr	r3, [pc, #168]	@ (8001908 <osScheduler+0xb8>)
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	4613      	mov	r3, r2
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	4413      	add	r3, r2
 8001868:	00db      	lsls	r3, r3, #3
 800186a:	4a28      	ldr	r2, [pc, #160]	@ (800190c <osScheduler+0xbc>)
 800186c:	4413      	add	r3, r2
 800186e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8001870:	f3ef 8309 	mrs	r3, PSP
 8001874:	607b      	str	r3, [r7, #4]
  return(result);
 8001876:	687b      	ldr	r3, [r7, #4]
		p_last_task->p_stack = (uint32_t*)__get_PSP();
 8001878:	461a      	mov	r2, r3
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	625a      	str	r2, [r3, #36]	@ 0x24
	}

	TCB* p_task = &tcb_array[0];
 800187e:	4b23      	ldr	r3, [pc, #140]	@ (800190c <osScheduler+0xbc>)
 8001880:	617b      	str	r3, [r7, #20]
	int min_deadline = INT_MAX;
 8001882:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8001886:	613b      	str	r3, [r7, #16]

	for (int i = 1; i < MAX_TASKS; i++) {
 8001888:	2301      	movs	r3, #1
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	e024      	b.n	80018d8 <osScheduler+0x88>
		if (
				tcb_array[i].state == READY &&
 800188e:	491f      	ldr	r1, [pc, #124]	@ (800190c <osScheduler+0xbc>)
 8001890:	68fa      	ldr	r2, [r7, #12]
 8001892:	4613      	mov	r3, r2
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	4413      	add	r3, r2
 8001898:	00db      	lsls	r3, r3, #3
 800189a:	440b      	add	r3, r1
 800189c:	3310      	adds	r3, #16
 800189e:	781b      	ldrb	r3, [r3, #0]
		if (
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d116      	bne.n	80018d2 <osScheduler+0x82>
				tcb_array[i].current_deadline < min_deadline
 80018a4:	4919      	ldr	r1, [pc, #100]	@ (800190c <osScheduler+0xbc>)
 80018a6:	68fa      	ldr	r2, [r7, #12]
 80018a8:	4613      	mov	r3, r2
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	4413      	add	r3, r2
 80018ae:	00db      	lsls	r3, r3, #3
 80018b0:	440b      	add	r3, r1
 80018b2:	3318      	adds	r3, #24
 80018b4:	681b      	ldr	r3, [r3, #0]
				tcb_array[i].state == READY &&
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	dd0a      	ble.n	80018d2 <osScheduler+0x82>
		) {
			p_task = &tcb_array[i];
 80018bc:	68fa      	ldr	r2, [r7, #12]
 80018be:	4613      	mov	r3, r2
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	4413      	add	r3, r2
 80018c4:	00db      	lsls	r3, r3, #3
 80018c6:	4a11      	ldr	r2, [pc, #68]	@ (800190c <osScheduler+0xbc>)
 80018c8:	4413      	add	r3, r2
 80018ca:	617b      	str	r3, [r7, #20]
			min_deadline = p_task->current_deadline;
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	699b      	ldr	r3, [r3, #24]
 80018d0:	613b      	str	r3, [r7, #16]
	for (int i = 1; i < MAX_TASKS; i++) {
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	3301      	adds	r3, #1
 80018d6:	60fb      	str	r3, [r7, #12]
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2b0f      	cmp	r3, #15
 80018dc:	ddd7      	ble.n	800188e <osScheduler+0x3e>
		}
	}

	p_task->state = RUNNING;
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	2202      	movs	r2, #2
 80018e2:	741a      	strb	r2, [r3, #16]
	running_task_index = p_task->tid;
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	461a      	mov	r2, r3
 80018ea:	4b09      	ldr	r3, [pc, #36]	@ (8001910 <osScheduler+0xc0>)
 80018ec:	601a      	str	r2, [r3, #0]
	__set_PSP((int)p_task->p_stack);
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018f2:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	f383 8809 	msr	PSP, r3
}
 80018fa:	bf00      	nop
}
 80018fc:	bf00      	nop
 80018fe:	371c      	adds	r7, #28
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr
 8001908:	20000008 	.word	0x20000008
 800190c:	200000c8 	.word	0x200000c8
 8001910:	20000004 	.word	0x20000004

08001914 <EDF_TaskA>:
int A_arr[10];
int B_arr[10];
int B_arr_before[10];

void EDF_TaskC(void*);
void EDF_TaskA(void*) {
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 10; i++) {
 800191c:	2300      	movs	r3, #0
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	e00b      	b.n	800193a <EDF_TaskA+0x26>
		A_arr[i] = ARM_CM_DWT_CYCCNT;
 8001922:	4b0a      	ldr	r3, [pc, #40]	@ (800194c <EDF_TaskA+0x38>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4619      	mov	r1, r3
 8001928:	4a09      	ldr	r2, [pc, #36]	@ (8001950 <EDF_TaskA+0x3c>)
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		osPeriodYield();
 8001930:	f7ff fefe 	bl	8001730 <osPeriodYield>
	for (int i = 0; i < 10; i++) {
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	3301      	adds	r3, #1
 8001938:	60fb      	str	r3, [r7, #12]
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	2b09      	cmp	r3, #9
 800193e:	ddf0      	ble.n	8001922 <EDF_TaskA+0xe>
//	TCB st_mytask;
//	st_mytask.stack_size = STACK_SIZE;
//
//	st_mytask.ptask = &EDF_TaskC;
//	osCreateDeadlineTask(1000, &st_mytask);
}
 8001940:	bf00      	nop
 8001942:	bf00      	nop
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	e0001004 	.word	0xe0001004
 8001950:	20000358 	.word	0x20000358

08001954 <EDF_TaskB>:
void EDF_TaskB(void*) {
 8001954:	b580      	push	{r7, lr}
 8001956:	b08e      	sub	sp, #56	@ 0x38
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 10; i++) {
 800195c:	2300      	movs	r3, #0
 800195e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001960:	e01d      	b.n	800199e <EDF_TaskB+0x4a>
		B_arr_before[i] = ARM_CM_DWT_CYCCNT;
 8001962:	4b18      	ldr	r3, [pc, #96]	@ (80019c4 <EDF_TaskB+0x70>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4619      	mov	r1, r3
 8001968:	4a17      	ldr	r2, [pc, #92]	@ (80019c8 <EDF_TaskB+0x74>)
 800196a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800196c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (int j = 0; j < 55000; j++) {}
 8001970:	2300      	movs	r3, #0
 8001972:	633b      	str	r3, [r7, #48]	@ 0x30
 8001974:	e002      	b.n	800197c <EDF_TaskB+0x28>
 8001976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001978:	3301      	adds	r3, #1
 800197a:	633b      	str	r3, [r7, #48]	@ 0x30
 800197c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800197e:	f24d 62d7 	movw	r2, #54999	@ 0xd6d7
 8001982:	4293      	cmp	r3, r2
 8001984:	ddf7      	ble.n	8001976 <EDF_TaskB+0x22>
		B_arr[i] = ARM_CM_DWT_CYCCNT;
 8001986:	4b0f      	ldr	r3, [pc, #60]	@ (80019c4 <EDF_TaskB+0x70>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4619      	mov	r1, r3
 800198c:	4a0f      	ldr	r2, [pc, #60]	@ (80019cc <EDF_TaskB+0x78>)
 800198e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001990:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		osPeriodYield();
 8001994:	f7ff fecc 	bl	8001730 <osPeriodYield>
	for (int i = 0; i < 10; i++) {
 8001998:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800199a:	3301      	adds	r3, #1
 800199c:	637b      	str	r3, [r7, #52]	@ 0x34
 800199e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019a0:	2b09      	cmp	r3, #9
 80019a2:	ddde      	ble.n	8001962 <EDF_TaskB+0xe>
	}
	TCB st_mytask;
	st_mytask.stack_size = STACK_SIZE;
 80019a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80019a8:	837b      	strh	r3, [r7, #26]

	st_mytask.ptask = &EDF_TaskC;
 80019aa:	4b09      	ldr	r3, [pc, #36]	@ (80019d0 <EDF_TaskB+0x7c>)
 80019ac:	60bb      	str	r3, [r7, #8]
	osCreateDeadlineTask(1000, &st_mytask);
 80019ae:	f107 0308 	add.w	r3, r7, #8
 80019b2:	4619      	mov	r1, r3
 80019b4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019b8:	f7ff fcda 	bl	8001370 <osCreateDeadlineTask>
}
 80019bc:	bf00      	nop
 80019be:	3738      	adds	r7, #56	@ 0x38
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	e0001004 	.word	0xe0001004
 80019c8:	200003a8 	.word	0x200003a8
 80019cc:	20000380 	.word	0x20000380
 80019d0:	080019d9 	.word	0x080019d9
 80019d4:	00000000 	.word	0x00000000

080019d8 <EDF_TaskC>:
void EDF_TaskC(void*) {
 80019d8:	b5b0      	push	{r4, r5, r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
	printf("A_arr\r\n");
 80019e0:	486d      	ldr	r0, [pc, #436]	@ (8001b98 <EDF_TaskC+0x1c0>)
 80019e2:	f002 f9fb 	bl	8003ddc <puts>
	for (int i = 0; i < 10; i++) {
 80019e6:	2300      	movs	r3, #0
 80019e8:	617b      	str	r3, [r7, #20]
 80019ea:	e03c      	b.n	8001a66 <EDF_TaskC+0x8e>
		A_arr[i] = (int)round((double)(A_arr[i] - initial) / (HAL_RCC_GetSysClockFreq() / 1000000.0));
 80019ec:	4a6b      	ldr	r2, [pc, #428]	@ (8001b9c <EDF_TaskC+0x1c4>)
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80019f4:	4b6a      	ldr	r3, [pc, #424]	@ (8001ba0 <EDF_TaskC+0x1c8>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7fe fdb2 	bl	8000564 <__aeabi_i2d>
 8001a00:	4604      	mov	r4, r0
 8001a02:	460d      	mov	r5, r1
 8001a04:	f001 fbc4 	bl	8003190 <HAL_RCC_GetSysClockFreq>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7fe fd9a 	bl	8000544 <__aeabi_ui2d>
 8001a10:	a35f      	add	r3, pc, #380	@ (adr r3, 8001b90 <EDF_TaskC+0x1b8>)
 8001a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a16:	f7fe ff39 	bl	800088c <__aeabi_ddiv>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	4620      	mov	r0, r4
 8001a20:	4629      	mov	r1, r5
 8001a22:	f7fe ff33 	bl	800088c <__aeabi_ddiv>
 8001a26:	4602      	mov	r2, r0
 8001a28:	460b      	mov	r3, r1
 8001a2a:	ec43 2b17 	vmov	d7, r2, r3
 8001a2e:	eeb0 0a47 	vmov.f32	s0, s14
 8001a32:	eef0 0a67 	vmov.f32	s1, s15
 8001a36:	f003 f833 	bl	8004aa0 <round>
 8001a3a:	ec53 2b10 	vmov	r2, r3, d0
 8001a3e:	4610      	mov	r0, r2
 8001a40:	4619      	mov	r1, r3
 8001a42:	f7ff f80b 	bl	8000a5c <__aeabi_d2iz>
 8001a46:	4602      	mov	r2, r0
 8001a48:	4954      	ldr	r1, [pc, #336]	@ (8001b9c <EDF_TaskC+0x1c4>)
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		printf("    %d\r\n", A_arr[i]);
 8001a50:	4a52      	ldr	r2, [pc, #328]	@ (8001b9c <EDF_TaskC+0x1c4>)
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4852      	ldr	r0, [pc, #328]	@ (8001ba4 <EDF_TaskC+0x1cc>)
 8001a5c:	f002 f956 	bl	8003d0c <iprintf>
	for (int i = 0; i < 10; i++) {
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	3301      	adds	r3, #1
 8001a64:	617b      	str	r3, [r7, #20]
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	2b09      	cmp	r3, #9
 8001a6a:	ddbf      	ble.n	80019ec <EDF_TaskC+0x14>
	}
	printf("B_arr_before\r\n");
 8001a6c:	484e      	ldr	r0, [pc, #312]	@ (8001ba8 <EDF_TaskC+0x1d0>)
 8001a6e:	f002 f9b5 	bl	8003ddc <puts>
	for (int i = 0; i < 10; i++) {
 8001a72:	2300      	movs	r3, #0
 8001a74:	613b      	str	r3, [r7, #16]
 8001a76:	e03c      	b.n	8001af2 <EDF_TaskC+0x11a>
		B_arr_before[i] = (int)round((double)(B_arr_before[i] - initial) / (HAL_RCC_GetSysClockFreq() / 1000000.0));
 8001a78:	4a4c      	ldr	r2, [pc, #304]	@ (8001bac <EDF_TaskC+0x1d4>)
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001a80:	4b47      	ldr	r3, [pc, #284]	@ (8001ba0 <EDF_TaskC+0x1c8>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7fe fd6c 	bl	8000564 <__aeabi_i2d>
 8001a8c:	4604      	mov	r4, r0
 8001a8e:	460d      	mov	r5, r1
 8001a90:	f001 fb7e 	bl	8003190 <HAL_RCC_GetSysClockFreq>
 8001a94:	4603      	mov	r3, r0
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7fe fd54 	bl	8000544 <__aeabi_ui2d>
 8001a9c:	a33c      	add	r3, pc, #240	@ (adr r3, 8001b90 <EDF_TaskC+0x1b8>)
 8001a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa2:	f7fe fef3 	bl	800088c <__aeabi_ddiv>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	4620      	mov	r0, r4
 8001aac:	4629      	mov	r1, r5
 8001aae:	f7fe feed 	bl	800088c <__aeabi_ddiv>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	ec43 2b17 	vmov	d7, r2, r3
 8001aba:	eeb0 0a47 	vmov.f32	s0, s14
 8001abe:	eef0 0a67 	vmov.f32	s1, s15
 8001ac2:	f002 ffed 	bl	8004aa0 <round>
 8001ac6:	ec53 2b10 	vmov	r2, r3, d0
 8001aca:	4610      	mov	r0, r2
 8001acc:	4619      	mov	r1, r3
 8001ace:	f7fe ffc5 	bl	8000a5c <__aeabi_d2iz>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	4935      	ldr	r1, [pc, #212]	@ (8001bac <EDF_TaskC+0x1d4>)
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		printf("    %d\r\n", B_arr_before[i]);
 8001adc:	4a33      	ldr	r2, [pc, #204]	@ (8001bac <EDF_TaskC+0x1d4>)
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	482f      	ldr	r0, [pc, #188]	@ (8001ba4 <EDF_TaskC+0x1cc>)
 8001ae8:	f002 f910 	bl	8003d0c <iprintf>
	for (int i = 0; i < 10; i++) {
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	3301      	adds	r3, #1
 8001af0:	613b      	str	r3, [r7, #16]
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	2b09      	cmp	r3, #9
 8001af6:	ddbf      	ble.n	8001a78 <EDF_TaskC+0xa0>
	}
	printf("B_arr\r\n");
 8001af8:	482d      	ldr	r0, [pc, #180]	@ (8001bb0 <EDF_TaskC+0x1d8>)
 8001afa:	f002 f96f 	bl	8003ddc <puts>
	for (int i = 0; i < 10; i++) {
 8001afe:	2300      	movs	r3, #0
 8001b00:	60fb      	str	r3, [r7, #12]
 8001b02:	e03c      	b.n	8001b7e <EDF_TaskC+0x1a6>
		B_arr[i] = (int)round((double)(B_arr[i] - initial) / (HAL_RCC_GetSysClockFreq() / 1000000.0));
 8001b04:	4a2b      	ldr	r2, [pc, #172]	@ (8001bb4 <EDF_TaskC+0x1dc>)
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001b0c:	4b24      	ldr	r3, [pc, #144]	@ (8001ba0 <EDF_TaskC+0x1c8>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7fe fd26 	bl	8000564 <__aeabi_i2d>
 8001b18:	4604      	mov	r4, r0
 8001b1a:	460d      	mov	r5, r1
 8001b1c:	f001 fb38 	bl	8003190 <HAL_RCC_GetSysClockFreq>
 8001b20:	4603      	mov	r3, r0
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7fe fd0e 	bl	8000544 <__aeabi_ui2d>
 8001b28:	a319      	add	r3, pc, #100	@ (adr r3, 8001b90 <EDF_TaskC+0x1b8>)
 8001b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b2e:	f7fe fead 	bl	800088c <__aeabi_ddiv>
 8001b32:	4602      	mov	r2, r0
 8001b34:	460b      	mov	r3, r1
 8001b36:	4620      	mov	r0, r4
 8001b38:	4629      	mov	r1, r5
 8001b3a:	f7fe fea7 	bl	800088c <__aeabi_ddiv>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	460b      	mov	r3, r1
 8001b42:	ec43 2b17 	vmov	d7, r2, r3
 8001b46:	eeb0 0a47 	vmov.f32	s0, s14
 8001b4a:	eef0 0a67 	vmov.f32	s1, s15
 8001b4e:	f002 ffa7 	bl	8004aa0 <round>
 8001b52:	ec53 2b10 	vmov	r2, r3, d0
 8001b56:	4610      	mov	r0, r2
 8001b58:	4619      	mov	r1, r3
 8001b5a:	f7fe ff7f 	bl	8000a5c <__aeabi_d2iz>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	4914      	ldr	r1, [pc, #80]	@ (8001bb4 <EDF_TaskC+0x1dc>)
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		printf("    %d\r\n", B_arr[i]);
 8001b68:	4a12      	ldr	r2, [pc, #72]	@ (8001bb4 <EDF_TaskC+0x1dc>)
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b70:	4619      	mov	r1, r3
 8001b72:	480c      	ldr	r0, [pc, #48]	@ (8001ba4 <EDF_TaskC+0x1cc>)
 8001b74:	f002 f8ca 	bl	8003d0c <iprintf>
	for (int i = 0; i < 10; i++) {
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	60fb      	str	r3, [r7, #12]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	2b09      	cmp	r3, #9
 8001b82:	ddbf      	ble.n	8001b04 <EDF_TaskC+0x12c>
	}
}
 8001b84:	bf00      	nop
 8001b86:	bf00      	nop
 8001b88:	3718      	adds	r7, #24
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bdb0      	pop	{r4, r5, r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	00000000 	.word	0x00000000
 8001b94:	412e8480 	.word	0x412e8480
 8001b98:	08004b90 	.word	0x08004b90
 8001b9c:	20000358 	.word	0x20000358
 8001ba0:	20000354 	.word	0x20000354
 8001ba4:	08004b98 	.word	0x08004b98
 8001ba8:	08004ba4 	.word	0x08004ba4
 8001bac:	200003a8 	.word	0x200003a8
 8001bb0:	08004bb4 	.word	0x08004bb4
 8001bb4:	20000380 	.word	0x20000380

08001bb8 <main>:


int main(void) {
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b08a      	sub	sp, #40	@ 0x28
 8001bbc:	af00      	add	r7, sp, #0
	HAL_Init();
 8001bbe:	f000 fc93 	bl	80024e8 <HAL_Init>
	SystemClock_Config();
 8001bc2:	f000 fb5d 	bl	8002280 <SystemClock_Config>
	MX_GPIO_Init();
 8001bc6:	f000 fbf1 	bl	80023ac <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8001bca:	f000 fbc5 	bl	8002358 <MX_USART2_UART_Init>
	/* MCU Configuration is now complete. Start writing your code below this line */
	printf("\e[1;1H\e[2J\r\n\r\n\r\n");
 8001bce:	481f      	ldr	r0, [pc, #124]	@ (8001c4c <main+0x94>)
 8001bd0:	f002 f904 	bl	8003ddc <puts>
	printf("-------New----------\r\n");
 8001bd4:	481e      	ldr	r0, [pc, #120]	@ (8001c50 <main+0x98>)
 8001bd6:	f002 f901 	bl	8003ddc <puts>

	osKernelInit();
 8001bda:	f7ff fb09 	bl	80011f0 <osKernelInit>

	if (ARM_CM_DWT_CTRL != 0) {        // See if DWT is available
 8001bde:	4b1d      	ldr	r3, [pc, #116]	@ (8001c54 <main+0x9c>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d012      	beq.n	8001c0c <main+0x54>
		printf("Using DWT\r\n\r\n");
 8001be6:	481c      	ldr	r0, [pc, #112]	@ (8001c58 <main+0xa0>)
 8001be8:	f002 f8f8 	bl	8003ddc <puts>
		ARM_CM_DEMCR      |= 1 << 24;  // Set bit 24
 8001bec:	4b1b      	ldr	r3, [pc, #108]	@ (8001c5c <main+0xa4>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a1a      	ldr	r2, [pc, #104]	@ (8001c5c <main+0xa4>)
 8001bf2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001bf6:	6013      	str	r3, [r2, #0]
		ARM_CM_DWT_CYCCNT  = 0;
 8001bf8:	4b19      	ldr	r3, [pc, #100]	@ (8001c60 <main+0xa8>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	601a      	str	r2, [r3, #0]
		ARM_CM_DWT_CTRL   |= 1 << 0;   // Set bit 0
 8001bfe:	4b15      	ldr	r3, [pc, #84]	@ (8001c54 <main+0x9c>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a14      	ldr	r2, [pc, #80]	@ (8001c54 <main+0x9c>)
 8001c04:	f043 0301 	orr.w	r3, r3, #1
 8001c08:	6013      	str	r3, [r2, #0]
 8001c0a:	e002      	b.n	8001c12 <main+0x5a>
	}else{
		printf("DWT not available \r\n\r\n");
 8001c0c:	4815      	ldr	r0, [pc, #84]	@ (8001c64 <main+0xac>)
 8001c0e:	f002 f8e5 	bl	8003ddc <puts>
	}

	TCB st_mytask;
	st_mytask.stack_size = STACK_SIZE;
 8001c12:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c16:	827b      	strh	r3, [r7, #18]
//	st_mytask.ptask = &TaskB;
//	osCreateDeadlineTask(4, &st_mytask);
//	st_mytask.ptask = &TaskC;
//	osCreateDeadlineTask(12, &st_mytask);

	st_mytask.ptask = &EDF_TaskA;
 8001c18:	4b13      	ldr	r3, [pc, #76]	@ (8001c68 <main+0xb0>)
 8001c1a:	603b      	str	r3, [r7, #0]
	osCreateDeadlineTask(4, &st_mytask);
 8001c1c:	463b      	mov	r3, r7
 8001c1e:	4619      	mov	r1, r3
 8001c20:	2004      	movs	r0, #4
 8001c22:	f7ff fba5 	bl	8001370 <osCreateDeadlineTask>
	st_mytask.ptask = &EDF_TaskB;
 8001c26:	4b11      	ldr	r3, [pc, #68]	@ (8001c6c <main+0xb4>)
 8001c28:	603b      	str	r3, [r7, #0]
	osCreateDeadlineTask(11, &st_mytask);
 8001c2a:	463b      	mov	r3, r7
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	200b      	movs	r0, #11
 8001c30:	f7ff fb9e 	bl	8001370 <osCreateDeadlineTask>

	initial = ARM_CM_DWT_CYCCNT;
 8001c34:	4b0a      	ldr	r3, [pc, #40]	@ (8001c60 <main+0xa8>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	461a      	mov	r2, r3
 8001c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8001c70 <main+0xb8>)
 8001c3c:	601a      	str	r2, [r3, #0]
	osKernelStart();
 8001c3e:	f7ff fc93 	bl	8001568 <osKernelStart>
 8001c42:	2300      	movs	r3, #0
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3728      	adds	r7, #40	@ 0x28
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	08004bbc 	.word	0x08004bbc
 8001c50:	08004bcc 	.word	0x08004bcc
 8001c54:	e0001000 	.word	0xe0001000
 8001c58:	08004be4 	.word	0x08004be4
 8001c5c:	e000edfc 	.word	0xe000edfc
 8001c60:	e0001004 	.word	0xe0001004
 8001c64:	08004bf4 	.word	0x08004bf4
 8001c68:	08001915 	.word	0x08001915
 8001c6c:	08001955 	.word	0x08001955
 8001c70:	20000354 	.word	0x20000354

08001c74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	607b      	str	r3, [r7, #4]
 8001c7e:	4b10      	ldr	r3, [pc, #64]	@ (8001cc0 <HAL_MspInit+0x4c>)
 8001c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c82:	4a0f      	ldr	r2, [pc, #60]	@ (8001cc0 <HAL_MspInit+0x4c>)
 8001c84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c88:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8001cc0 <HAL_MspInit+0x4c>)
 8001c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c92:	607b      	str	r3, [r7, #4]
 8001c94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c96:	2300      	movs	r3, #0
 8001c98:	603b      	str	r3, [r7, #0]
 8001c9a:	4b09      	ldr	r3, [pc, #36]	@ (8001cc0 <HAL_MspInit+0x4c>)
 8001c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c9e:	4a08      	ldr	r2, [pc, #32]	@ (8001cc0 <HAL_MspInit+0x4c>)
 8001ca0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ca4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ca6:	4b06      	ldr	r3, [pc, #24]	@ (8001cc0 <HAL_MspInit+0x4c>)
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001caa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cae:	603b      	str	r3, [r7, #0]
 8001cb0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001cb2:	2007      	movs	r0, #7
 8001cb4:	f000 fd3c 	bl	8002730 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cb8:	bf00      	nop
 8001cba:	3708      	adds	r7, #8
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	40023800 	.word	0x40023800

08001cc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b08a      	sub	sp, #40	@ 0x28
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ccc:	f107 0314 	add.w	r3, r7, #20
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	605a      	str	r2, [r3, #4]
 8001cd6:	609a      	str	r2, [r3, #8]
 8001cd8:	60da      	str	r2, [r3, #12]
 8001cda:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a19      	ldr	r2, [pc, #100]	@ (8001d48 <HAL_UART_MspInit+0x84>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d12b      	bne.n	8001d3e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	613b      	str	r3, [r7, #16]
 8001cea:	4b18      	ldr	r3, [pc, #96]	@ (8001d4c <HAL_UART_MspInit+0x88>)
 8001cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cee:	4a17      	ldr	r2, [pc, #92]	@ (8001d4c <HAL_UART_MspInit+0x88>)
 8001cf0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cf4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cf6:	4b15      	ldr	r3, [pc, #84]	@ (8001d4c <HAL_UART_MspInit+0x88>)
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cfe:	613b      	str	r3, [r7, #16]
 8001d00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d02:	2300      	movs	r3, #0
 8001d04:	60fb      	str	r3, [r7, #12]
 8001d06:	4b11      	ldr	r3, [pc, #68]	@ (8001d4c <HAL_UART_MspInit+0x88>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0a:	4a10      	ldr	r2, [pc, #64]	@ (8001d4c <HAL_UART_MspInit+0x88>)
 8001d0c:	f043 0301 	orr.w	r3, r3, #1
 8001d10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d12:	4b0e      	ldr	r3, [pc, #56]	@ (8001d4c <HAL_UART_MspInit+0x88>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	60fb      	str	r3, [r7, #12]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001d1e:	230c      	movs	r3, #12
 8001d20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d22:	2302      	movs	r3, #2
 8001d24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d26:	2300      	movs	r3, #0
 8001d28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d2e:	2307      	movs	r3, #7
 8001d30:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d32:	f107 0314 	add.w	r3, r7, #20
 8001d36:	4619      	mov	r1, r3
 8001d38:	4805      	ldr	r0, [pc, #20]	@ (8001d50 <HAL_UART_MspInit+0x8c>)
 8001d3a:	f000 fd2d 	bl	8002798 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d3e:	bf00      	nop
 8001d40:	3728      	adds	r7, #40	@ 0x28
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	40004400 	.word	0x40004400
 8001d4c:	40023800 	.word	0x40023800
 8001d50:	40020000 	.word	0x40020000

08001d54 <NMI_Handler>:
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void) {
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */
	printf("NMI_Handler\r\n");
 8001d58:	4802      	ldr	r0, [pc, #8]	@ (8001d64 <NMI_Handler+0x10>)
 8001d5a:	f002 f83f 	bl	8003ddc <puts>
	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001d5e:	bf00      	nop
 8001d60:	e7fd      	b.n	8001d5e <NMI_Handler+0xa>
 8001d62:	bf00      	nop
 8001d64:	08004c0c 	.word	0x08004c0c

08001d68 <HardFault_Handler>:
}

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void) {
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */
	printf("HardFault_Handler\r\n");
 8001d6c:	4802      	ldr	r0, [pc, #8]	@ (8001d78 <HardFault_Handler+0x10>)
 8001d6e:	f002 f835 	bl	8003ddc <puts>
	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 8001d72:	bf00      	nop
 8001d74:	e7fd      	b.n	8001d72 <HardFault_Handler+0xa>
 8001d76:	bf00      	nop
 8001d78:	08004c1c 	.word	0x08004c1c

08001d7c <MemManage_Handler>:
}

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void) {
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */
	printf("MemManage_Handler\r\n");
 8001d80:	4802      	ldr	r0, [pc, #8]	@ (8001d8c <MemManage_Handler+0x10>)
 8001d82:	f002 f82b 	bl	8003ddc <puts>
	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 8001d86:	bf00      	nop
 8001d88:	e7fd      	b.n	8001d86 <MemManage_Handler+0xa>
 8001d8a:	bf00      	nop
 8001d8c:	08004c30 	.word	0x08004c30

08001d90 <BusFault_Handler>:
}

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void) {
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */
	printf("BusFault_Handler\r\n");
 8001d94:	4802      	ldr	r0, [pc, #8]	@ (8001da0 <BusFault_Handler+0x10>)
 8001d96:	f002 f821 	bl	8003ddc <puts>
	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 8001d9a:	bf00      	nop
 8001d9c:	e7fd      	b.n	8001d9a <BusFault_Handler+0xa>
 8001d9e:	bf00      	nop
 8001da0:	08004c44 	.word	0x08004c44

08001da4 <UsageFault_Handler>:
}

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void) {
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */
	printf("UsageFault_Handler\r\n");
 8001da8:	4802      	ldr	r0, [pc, #8]	@ (8001db4 <UsageFault_Handler+0x10>)
 8001daa:	f002 f817 	bl	8003ddc <puts>
	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 8001dae:	bf00      	nop
 8001db0:	e7fd      	b.n	8001dae <UsageFault_Handler+0xa>
 8001db2:	bf00      	nop
 8001db4:	08004c58 	.word	0x08004c58

08001db8 <SVC_Handler_Main>:
  */




extern void SVC_Handler_Main(unsigned int* svc_args) {
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b08c      	sub	sp, #48	@ 0x30
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
	/* Stack contains:
	* r0, r1, r2, r3, r12, r14, the return address and xPSR
	* First argument (r0) is svc_args[0]*/
	unsigned int svc_number = ((char*)svc_args[6])[-2];
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	3318      	adds	r3, #24
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	3b02      	subs	r3, #2
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	62fb      	str	r3, [r7, #44]	@ 0x2c

	TCB* p_task = NULL;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	62bb      	str	r3, [r7, #40]	@ 0x28
	int deadline = 0;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	627b      	str	r3, [r7, #36]	@ 0x24

	switch (svc_number) {
 8001dd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dd6:	2b11      	cmp	r3, #17
 8001dd8:	d82a      	bhi.n	8001e30 <SVC_Handler_Main+0x78>
 8001dda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ddc:	2b11      	cmp	r3, #17
 8001dde:	f200 80f0 	bhi.w	8001fc2 <SVC_Handler_Main+0x20a>
 8001de2:	a201      	add	r2, pc, #4	@ (adr r2, 8001de8 <SVC_Handler_Main+0x30>)
 8001de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001de8:	08001e3b 	.word	0x08001e3b
 8001dec:	08001e53 	.word	0x08001e53
 8001df0:	08001e6d 	.word	0x08001e6d
 8001df4:	08001e7f 	.word	0x08001e7f
 8001df8:	08001ea9 	.word	0x08001ea9
 8001dfc:	08001eaf 	.word	0x08001eaf
 8001e00:	08001f1b 	.word	0x08001f1b
 8001e04:	08001f4b 	.word	0x08001f4b
 8001e08:	08001f6b 	.word	0x08001f6b
 8001e0c:	08001f71 	.word	0x08001f71
 8001e10:	08001fc3 	.word	0x08001fc3
 8001e14:	08001fc3 	.word	0x08001fc3
 8001e18:	08001fc3 	.word	0x08001fc3
 8001e1c:	08001fc3 	.word	0x08001fc3
 8001e20:	08001fc3 	.word	0x08001fc3
 8001e24:	08001fc3 	.word	0x08001fc3
 8001e28:	08001fc3 	.word	0x08001fc3
 8001e2c:	08001fc3 	.word	0x08001fc3
 8001e30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e32:	2b64      	cmp	r3, #100	@ 0x64
 8001e34:	f000 80b4 	beq.w	8001fa0 <SVC_Handler_Main+0x1e8>
			break;

		case SVC_TEST:
			break;

		default: break;    /* unknown SVC */
 8001e38:	e0c3      	b.n	8001fc2 <SVC_Handler_Main+0x20a>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8001e3a:	f3ef 8314 	mrs	r3, CONTROL
 8001e3e:	60fb      	str	r3, [r7, #12]
  return(result);
 8001e40:	68fb      	ldr	r3, [r7, #12]
			__set_CONTROL(__get_CONTROL() & ~CONTROL_nPRIV_Msk);
 8001e42:	f023 0301 	bic.w	r3, r3, #1
 8001e46:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	f383 8814 	msr	CONTROL, r3
}
 8001e4e:	bf00      	nop
			break;
 8001e50:	e0ba      	b.n	8001fc8 <SVC_Handler_Main+0x210>
			SysTick->VAL = 0;
 8001e52:	4b60      	ldr	r3, [pc, #384]	@ (8001fd4 <SVC_Handler_Main+0x21c>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	609a      	str	r2, [r3, #8]
			__asm__ volatile(
 8001e58:	f3ef 8009 	mrs	r0, PSP
 8001e5c:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001e60:	f380 8809 	msr	PSP, r0
 8001e64:	f06f 0e02 	mvn.w	lr, #2
 8001e68:	4770      	bx	lr
			break;
 8001e6a:	e0ad      	b.n	8001fc8 <SVC_Handler_Main+0x210>
			SCB->ICSR |= 1<<28;
 8001e6c:	4b5a      	ldr	r3, [pc, #360]	@ (8001fd8 <SVC_Handler_Main+0x220>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	4a59      	ldr	r2, [pc, #356]	@ (8001fd8 <SVC_Handler_Main+0x220>)
 8001e72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e76:	6053      	str	r3, [r2, #4]
			__asm("ISB");
 8001e78:	f3bf 8f6f 	isb	sy
			break;
 8001e7c:	e0a4      	b.n	8001fc8 <SVC_Handler_Main+0x210>
			p_task = &tcb_array[osGetTID()];
 8001e7e:	f7ff fbb3 	bl	80015e8 <osGetTID>
 8001e82:	4602      	mov	r2, r0
 8001e84:	4613      	mov	r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	4413      	add	r3, r2
 8001e8a:	00db      	lsls	r3, r3, #3
 8001e8c:	4a53      	ldr	r2, [pc, #332]	@ (8001fdc <SVC_Handler_Main+0x224>)
 8001e8e:	4413      	add	r3, r2
 8001e90:	62bb      	str	r3, [r7, #40]	@ 0x28
			size_t size = p_task->SVC.MALLOC_size;
 8001e92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e94:	69db      	ldr	r3, [r3, #28]
 8001e96:	617b      	str	r3, [r7, #20]
			p_task->SVC.MALLOC_p_buf = (void*)k_mem_alloc_SVC(size);
 8001e98:	6978      	ldr	r0, [r7, #20]
 8001e9a:	f7fe fff1 	bl	8000e80 <k_mem_alloc_SVC>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ea4:	61da      	str	r2, [r3, #28]
			break;
 8001ea6:	e08f      	b.n	8001fc8 <SVC_Handler_Main+0x210>
			osYield_SVC();
 8001ea8:	f7ff fbcc 	bl	8001644 <osYield_SVC>
			break;
 8001eac:	e08c      	b.n	8001fc8 <SVC_Handler_Main+0x210>
			p_task = &tcb_array[osGetTID()];
 8001eae:	f7ff fb9b 	bl	80015e8 <osGetTID>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	4413      	add	r3, r2
 8001eba:	00db      	lsls	r3, r3, #3
 8001ebc:	4a47      	ldr	r2, [pc, #284]	@ (8001fdc <SVC_Handler_Main+0x224>)
 8001ebe:	4413      	add	r3, r2
 8001ec0:	62bb      	str	r3, [r7, #40]	@ 0x28
					running_task_index < 0 ||
 8001ec2:	4b47      	ldr	r3, [pc, #284]	@ (8001fe0 <SVC_Handler_Main+0x228>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
			if (
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	db7f      	blt.n	8001fca <SVC_Handler_Main+0x212>
					p_task->state == DORMANT
 8001eca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ecc:	7c1b      	ldrb	r3, [r3, #16]
					running_task_index < 0 ||
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d07b      	beq.n	8001fca <SVC_Handler_Main+0x212>
			void* p_mem_block = (void*)((uint32_t)p_task->p_chunk + (uint32_t)sizeof(Block_Header));
 8001ed2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	331c      	adds	r3, #28
 8001ed8:	61bb      	str	r3, [r7, #24]
			if (k_mem_dealloc(p_mem_block) == RTX_ERR) { break; }
 8001eda:	69b8      	ldr	r0, [r7, #24]
 8001edc:	f7ff f898 	bl	8001010 <k_mem_dealloc>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001ee6:	d06e      	beq.n	8001fc6 <SVC_Handler_Main+0x20e>
			p_task->state = DORMANT;
 8001ee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001eea:	2200      	movs	r2, #0
 8001eec:	741a      	strb	r2, [r3, #16]
			last_running_task_index = running_task_index;
 8001eee:	4b3c      	ldr	r3, [pc, #240]	@ (8001fe0 <SVC_Handler_Main+0x228>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a3c      	ldr	r2, [pc, #240]	@ (8001fe4 <SVC_Handler_Main+0x22c>)
 8001ef4:	6013      	str	r3, [r2, #0]
			running_task_index = -1;
 8001ef6:	4b3a      	ldr	r3, [pc, #232]	@ (8001fe0 <SVC_Handler_Main+0x228>)
 8001ef8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001efc:	601a      	str	r2, [r3, #0]
			--task_count;
 8001efe:	4b3a      	ldr	r3, [pc, #232]	@ (8001fe8 <SVC_Handler_Main+0x230>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	3b01      	subs	r3, #1
 8001f04:	4a38      	ldr	r2, [pc, #224]	@ (8001fe8 <SVC_Handler_Main+0x230>)
 8001f06:	6013      	str	r3, [r2, #0]
			SCB->ICSR |= 1<<28;
 8001f08:	4b33      	ldr	r3, [pc, #204]	@ (8001fd8 <SVC_Handler_Main+0x220>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	4a32      	ldr	r2, [pc, #200]	@ (8001fd8 <SVC_Handler_Main+0x220>)
 8001f0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f12:	6053      	str	r3, [r2, #4]
			__asm("ISB");
 8001f14:	f3bf 8f6f 	isb	sy
			break;
 8001f18:	e056      	b.n	8001fc8 <SVC_Handler_Main+0x210>
			p_task = &tcb_array[osGetTID()];
 8001f1a:	f7ff fb65 	bl	80015e8 <osGetTID>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	4613      	mov	r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	4413      	add	r3, r2
 8001f26:	00db      	lsls	r3, r3, #3
 8001f28:	4a2c      	ldr	r2, [pc, #176]	@ (8001fdc <SVC_Handler_Main+0x224>)
 8001f2a:	4413      	add	r3, r2
 8001f2c:	62bb      	str	r3, [r7, #40]	@ 0x28
			deadline = p_task->SVC.CREATE_TASK_args.deadline;
 8001f2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f30:	69db      	ldr	r3, [r3, #28]
 8001f32:	627b      	str	r3, [r7, #36]	@ 0x24
			TCB* p_new_task = (TCB*)p_task->SVC.CREATE_TASK_args.p_new_task;
 8001f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f36:	6a1b      	ldr	r3, [r3, #32]
 8001f38:	61fb      	str	r3, [r7, #28]
			p_task->SVC.CREATE_TASK_status = osCreateDeadlineTask_SVC(deadline, p_new_task);
 8001f3a:	69f9      	ldr	r1, [r7, #28]
 8001f3c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001f3e:	f7ff fa3b 	bl	80013b8 <osCreateDeadlineTask_SVC>
 8001f42:	4602      	mov	r2, r0
 8001f44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f46:	61da      	str	r2, [r3, #28]
			break;
 8001f48:	e03e      	b.n	8001fc8 <SVC_Handler_Main+0x210>
			p_task = &tcb_array[osGetTID()];
 8001f4a:	f7ff fb4d 	bl	80015e8 <osGetTID>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	4613      	mov	r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	4413      	add	r3, r2
 8001f56:	00db      	lsls	r3, r3, #3
 8001f58:	4a20      	ldr	r2, [pc, #128]	@ (8001fdc <SVC_Handler_Main+0x224>)
 8001f5a:	4413      	add	r3, r2
 8001f5c:	62bb      	str	r3, [r7, #40]	@ 0x28
			osSleep_SVC(p_task->SVC.SLEEP_timeInMs);
 8001f5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f60:	69db      	ldr	r3, [r3, #28]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7ff fbae 	bl	80016c4 <osSleep_SVC>
			break;
 8001f68:	e02e      	b.n	8001fc8 <SVC_Handler_Main+0x210>
			osPeriodYield_SVC();
 8001f6a:	f7ff fbe9 	bl	8001740 <osPeriodYield_SVC>
			break;
 8001f6e:	e02b      	b.n	8001fc8 <SVC_Handler_Main+0x210>
			p_task = &tcb_array[osGetTID()];
 8001f70:	f7ff fb3a 	bl	80015e8 <osGetTID>
 8001f74:	4602      	mov	r2, r0
 8001f76:	4613      	mov	r3, r2
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	4413      	add	r3, r2
 8001f7c:	00db      	lsls	r3, r3, #3
 8001f7e:	4a17      	ldr	r2, [pc, #92]	@ (8001fdc <SVC_Handler_Main+0x224>)
 8001f80:	4413      	add	r3, r2
 8001f82:	62bb      	str	r3, [r7, #40]	@ 0x28
			deadline = p_task->SVC.SET_DEADLINE_args.deadline;
 8001f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f86:	69db      	ldr	r3, [r3, #28]
 8001f88:	627b      	str	r3, [r7, #36]	@ 0x24
			task_t TID = p_task->SVC.SET_DEADLINE_args.TID;
 8001f8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f8c:	6a1b      	ldr	r3, [r3, #32]
 8001f8e:	623b      	str	r3, [r7, #32]
			p_task->SVC.SET_DEADLINE_status = osSetDeadline_SVC(deadline, TID);
 8001f90:	6a39      	ldr	r1, [r7, #32]
 8001f92:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001f94:	f7ff fc06 	bl	80017a4 <osSetDeadline_SVC>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f9c:	61da      	str	r2, [r3, #28]
			break;
 8001f9e:	e013      	b.n	8001fc8 <SVC_Handler_Main+0x210>
			p_task = &tcb_array[osGetTID()];
 8001fa0:	f7ff fb22 	bl	80015e8 <osGetTID>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	4413      	add	r3, r2
 8001fac:	00db      	lsls	r3, r3, #3
 8001fae:	4a0b      	ldr	r2, [pc, #44]	@ (8001fdc <SVC_Handler_Main+0x224>)
 8001fb0:	4413      	add	r3, r2
 8001fb2:	62bb      	str	r3, [r7, #40]	@ 0x28
			printf("%s", p_task->SVC.PRINTF_p_str);
 8001fb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fb6:	69db      	ldr	r3, [r3, #28]
 8001fb8:	4619      	mov	r1, r3
 8001fba:	480c      	ldr	r0, [pc, #48]	@ (8001fec <SVC_Handler_Main+0x234>)
 8001fbc:	f001 fea6 	bl	8003d0c <iprintf>
			break;
 8001fc0:	e002      	b.n	8001fc8 <SVC_Handler_Main+0x210>
		default: break;    /* unknown SVC */
 8001fc2:	bf00      	nop
 8001fc4:	e000      	b.n	8001fc8 <SVC_Handler_Main+0x210>
			if (k_mem_dealloc(p_mem_block) == RTX_ERR) { break; }
 8001fc6:	bf00      	nop
	}

	return;
 8001fc8:	bf00      	nop
 8001fca:	bf00      	nop
}
 8001fcc:	3730      	adds	r7, #48	@ 0x30
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	e000e010 	.word	0xe000e010
 8001fd8:	e000ed00 	.word	0xe000ed00
 8001fdc:	200000c8 	.word	0x200000c8
 8001fe0:	20000004 	.word	0x20000004
 8001fe4:	20000008 	.word	0x20000008
 8001fe8:	20000350 	.word	0x20000350
 8001fec:	08004c6c 	.word	0x08004c6c

08001ff0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void) {
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DebugMonitor_IRQn 0 */
	printf("DebugMon_Handler\r\n");
 8001ff4:	4802      	ldr	r0, [pc, #8]	@ (8002000 <DebugMon_Handler+0x10>)
 8001ff6:	f001 fef1 	bl	8003ddc <puts>
//	__asm__ volatile(
//
//	);
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */
	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ffa:	bf00      	nop
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	08004c70 	.word	0x08004c70

08002004 <SysTick_Handler>:
//}

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void) {
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */
	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 800200a:	f000 fabf 	bl	800258c <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */
	if (!kernel_running) { return; }
 800200e:	4b33      	ldr	r3, [pc, #204]	@ (80020dc <SysTick_Handler+0xd8>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d05c      	beq.n	80020d0 <SysTick_Handler+0xcc>

	TCB* p_task = NULL;
 8002016:	2300      	movs	r3, #0
 8002018:	607b      	str	r3, [r7, #4]
	TCB* p_current_task = &tcb_array[osGetTID()];
 800201a:	f7ff fae5 	bl	80015e8 <osGetTID>
 800201e:	4602      	mov	r2, r0
 8002020:	4613      	mov	r3, r2
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	4413      	add	r3, r2
 8002026:	00db      	lsls	r3, r3, #3
 8002028:	4a2d      	ldr	r2, [pc, #180]	@ (80020e0 <SysTick_Handler+0xdc>)
 800202a:	4413      	add	r3, r2
 800202c:	603b      	str	r3, [r7, #0]
	int trigger = 0;
 800202e:	2300      	movs	r3, #0
 8002030:	60fb      	str	r3, [r7, #12]
//	if (count % 1000 == 0 || 1) {
		for (int i = 1; i < MAX_TASKS; i++) {
 8002032:	2301      	movs	r3, #1
 8002034:	60bb      	str	r3, [r7, #8]
 8002036:	e031      	b.n	800209c <SysTick_Handler+0x98>
			p_task = &tcb_array[i];
 8002038:	68ba      	ldr	r2, [r7, #8]
 800203a:	4613      	mov	r3, r2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	4413      	add	r3, r2
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	4a27      	ldr	r2, [pc, #156]	@ (80020e0 <SysTick_Handler+0xdc>)
 8002044:	4413      	add	r3, r2
 8002046:	607b      	str	r3, [r7, #4]
//			if (i == 2 && p_task->state != DORMANT) {
//				printf("%d\r\n", p_task->current_deadline);
//			}
			if (--p_task->current_deadline == 0) {
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	1e5a      	subs	r2, r3, #1
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	619a      	str	r2, [r3, #24]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	699b      	ldr	r3, [r3, #24]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d11d      	bne.n	8002096 <SysTick_Handler+0x92>
				p_task->current_deadline = p_task->initial_deadline;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	695a      	ldr	r2, [r3, #20]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	619a      	str	r2, [r3, #24]

				if (p_task->state == RUNNING) {
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	7c1b      	ldrb	r3, [r3, #16]
 8002066:	2b02      	cmp	r3, #2
 8002068:	d102      	bne.n	8002070 <SysTick_Handler+0x6c>
					trigger = 1;
 800206a:	2301      	movs	r3, #1
 800206c:	60fb      	str	r3, [r7, #12]
 800206e:	e012      	b.n	8002096 <SysTick_Handler+0x92>
				} else if (p_task->state == READY) {
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	7c1b      	ldrb	r3, [r3, #16]
 8002074:	2b01      	cmp	r3, #1
 8002076:	d00e      	beq.n	8002096 <SysTick_Handler+0x92>
					// Ask Maran, should we trigger
				} else if (p_task->state == SLEEPING) {
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	7c1b      	ldrb	r3, [r3, #16]
 800207c:	2b03      	cmp	r3, #3
 800207e:	d10a      	bne.n	8002096 <SysTick_Handler+0x92>
					p_task->state = READY; // Ask Maran, should it be in the scheduler
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2201      	movs	r2, #1
 8002084:	741a      	strb	r2, [r3, #16]
					if (p_task->current_deadline <= p_current_task->current_deadline) {
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	699a      	ldr	r2, [r3, #24]
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	699b      	ldr	r3, [r3, #24]
 800208e:	429a      	cmp	r2, r3
 8002090:	dc01      	bgt.n	8002096 <SysTick_Handler+0x92>
						trigger = 1; // Ask Maran, what happens if deadline was 0 and got reset?
 8002092:	2301      	movs	r3, #1
 8002094:	60fb      	str	r3, [r7, #12]
		for (int i = 1; i < MAX_TASKS; i++) {
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	3301      	adds	r3, #1
 800209a:	60bb      	str	r3, [r7, #8]
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	2b0f      	cmp	r3, #15
 80020a0:	ddca      	ble.n	8002038 <SysTick_Handler+0x34>
//	if (--count == 0) {
//		printf("Second Elapsed\r\n");
//		count = 1000;
//	}

	if (trigger) {
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d015      	beq.n	80020d4 <SysTick_Handler+0xd0>
		p_current_task->state = READY;
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	2201      	movs	r2, #1
 80020ac:	741a      	strb	r2, [r3, #16]

		last_running_task_index = running_task_index;
 80020ae:	4b0d      	ldr	r3, [pc, #52]	@ (80020e4 <SysTick_Handler+0xe0>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a0d      	ldr	r2, [pc, #52]	@ (80020e8 <SysTick_Handler+0xe4>)
 80020b4:	6013      	str	r3, [r2, #0]
		running_task_index = -1;
 80020b6:	4b0b      	ldr	r3, [pc, #44]	@ (80020e4 <SysTick_Handler+0xe0>)
 80020b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80020bc:	601a      	str	r2, [r3, #0]

		SCB->ICSR |= 1<<28;
 80020be:	4b0b      	ldr	r3, [pc, #44]	@ (80020ec <SysTick_Handler+0xe8>)
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	4a0a      	ldr	r2, [pc, #40]	@ (80020ec <SysTick_Handler+0xe8>)
 80020c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020c8:	6053      	str	r3, [r2, #4]
		__asm("ISB");
 80020ca:	f3bf 8f6f 	isb	sy
	}

	return;
 80020ce:	e001      	b.n	80020d4 <SysTick_Handler+0xd0>
	if (!kernel_running) { return; }
 80020d0:	bf00      	nop
 80020d2:	e000      	b.n	80020d6 <SysTick_Handler+0xd2>
	return;
 80020d4:	bf00      	nop
	/* USER CODE END SysTick_IRQn 1 */
}
 80020d6:	3710      	adds	r7, #16
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	2000034c 	.word	0x2000034c
 80020e0:	200000c8 	.word	0x200000c8
 80020e4:	20000004 	.word	0x20000004
 80020e8:	20000008 	.word	0x20000008
 80020ec:	e000ed00 	.word	0xe000ed00

080020f0 <_read>:
void _exit (int status) {
	_kill(status, -1);
	while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char* ptr, int len) {
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b086      	sub	sp, #24
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	60b9      	str	r1, [r7, #8]
 80020fa:	607a      	str	r2, [r7, #4]
	(void)file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80020fc:	2300      	movs	r3, #0
 80020fe:	617b      	str	r3, [r7, #20]
 8002100:	e00a      	b.n	8002118 <_read+0x28>
		*ptr++ = __io_getchar();
 8002102:	f3af 8000 	nop.w
 8002106:	4601      	mov	r1, r0
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	1c5a      	adds	r2, r3, #1
 800210c:	60ba      	str	r2, [r7, #8]
 800210e:	b2ca      	uxtb	r2, r1
 8002110:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	3301      	adds	r3, #1
 8002116:	617b      	str	r3, [r7, #20]
 8002118:	697a      	ldr	r2, [r7, #20]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	429a      	cmp	r2, r3
 800211e:	dbf0      	blt.n	8002102 <_read+0x12>
	}

	return len;
 8002120:	687b      	ldr	r3, [r7, #4]
}
 8002122:	4618      	mov	r0, r3
 8002124:	3718      	adds	r7, #24
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <_write>:

__attribute__((weak)) int _write(int file, char* ptr, int len) {
 800212a:	b580      	push	{r7, lr}
 800212c:	b086      	sub	sp, #24
 800212e:	af00      	add	r7, sp, #0
 8002130:	60f8      	str	r0, [r7, #12]
 8002132:	60b9      	str	r1, [r7, #8]
 8002134:	607a      	str	r2, [r7, #4]
	(void)file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002136:	2300      	movs	r3, #0
 8002138:	617b      	str	r3, [r7, #20]
 800213a:	e009      	b.n	8002150 <_write+0x26>
		__io_putchar(*ptr++);
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	1c5a      	adds	r2, r3, #1
 8002140:	60ba      	str	r2, [r7, #8]
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	4618      	mov	r0, r3
 8002146:	f000 f889 	bl	800225c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	3301      	adds	r3, #1
 800214e:	617b      	str	r3, [r7, #20]
 8002150:	697a      	ldr	r2, [r7, #20]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	429a      	cmp	r2, r3
 8002156:	dbf1      	blt.n	800213c <_write+0x12>
	}
	return len;
 8002158:	687b      	ldr	r3, [r7, #4]
}
 800215a:	4618      	mov	r0, r3
 800215c:	3718      	adds	r7, #24
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <_close>:

int _close(int file) {
 8002162:	b480      	push	{r7}
 8002164:	b083      	sub	sp, #12
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
	(void)file;
	return -1;
 800216a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800216e:	4618      	mov	r0, r3
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr

0800217a <_fstat>:


int _fstat(int file, struct stat* st) {
 800217a:	b480      	push	{r7}
 800217c:	b083      	sub	sp, #12
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
 8002182:	6039      	str	r1, [r7, #0]
	(void)file;
	st->st_mode = S_IFCHR;
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800218a:	605a      	str	r2, [r3, #4]
	return 0;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr

0800219a <_isatty>:

int _isatty(int file) {
 800219a:	b480      	push	{r7}
 800219c:	b083      	sub	sp, #12
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
	(void)file;
	return 1;
 80021a2:	2301      	movs	r3, #1
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 80021b0:	b480      	push	{r7}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	607a      	str	r2, [r7, #4]
	(void)file;
	(void)ptr;
	(void)dir;
	return 0;
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3714      	adds	r7, #20
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
	...

080021cc <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021d4:	4a14      	ldr	r2, [pc, #80]	@ (8002228 <_sbrk+0x5c>)
 80021d6:	4b15      	ldr	r3, [pc, #84]	@ (800222c <_sbrk+0x60>)
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	617b      	str	r3, [r7, #20]
	const uint8_t* max_heap = (uint8_t*)stack_limit;
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	613b      	str	r3, [r7, #16]
	uint8_t* prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 80021e0:	4b13      	ldr	r3, [pc, #76]	@ (8002230 <_sbrk+0x64>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d102      	bne.n	80021ee <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 80021e8:	4b11      	ldr	r3, [pc, #68]	@ (8002230 <_sbrk+0x64>)
 80021ea:	4a12      	ldr	r2, [pc, #72]	@ (8002234 <_sbrk+0x68>)
 80021ec:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 80021ee:	4b10      	ldr	r3, [pc, #64]	@ (8002230 <_sbrk+0x64>)
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4413      	add	r3, r2
 80021f6:	693a      	ldr	r2, [r7, #16]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d207      	bcs.n	800220c <_sbrk+0x40>
		errno = ENOMEM;
 80021fc:	f001 fdfe 	bl	8003dfc <__errno>
 8002200:	4603      	mov	r3, r0
 8002202:	220c      	movs	r2, #12
 8002204:	601a      	str	r2, [r3, #0]
		return (void*)-1;
 8002206:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800220a:	e009      	b.n	8002220 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 800220c:	4b08      	ldr	r3, [pc, #32]	@ (8002230 <_sbrk+0x64>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8002212:	4b07      	ldr	r3, [pc, #28]	@ (8002230 <_sbrk+0x64>)
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4413      	add	r3, r2
 800221a:	4a05      	ldr	r2, [pc, #20]	@ (8002230 <_sbrk+0x64>)
 800221c:	6013      	str	r3, [r2, #0]

	return (void*)prev_heap_end;
 800221e:	68fb      	ldr	r3, [r7, #12]
}
 8002220:	4618      	mov	r0, r3
 8002222:	3718      	adds	r7, #24
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	20018000 	.word	0x20018000
 800222c:	00004000 	.word	0x00004000
 8002230:	200003d0 	.word	0x200003d0
 8002234:	20000568 	.word	0x20000568

08002238 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800223c:	4b06      	ldr	r3, [pc, #24]	@ (8002258 <SystemInit+0x20>)
 800223e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002242:	4a05      	ldr	r2, [pc, #20]	@ (8002258 <SystemInit+0x20>)
 8002244:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002248:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800224c:	bf00      	nop
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	e000ed00 	.word	0xe000ed00

0800225c <__io_putchar>:
//Needed for printf
UART_HandleTypeDef huart2;


int __io_putchar(int ch)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2,&ch,1,HAL_MAX_DELAY);
 8002264:	1d39      	adds	r1, r7, #4
 8002266:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800226a:	2201      	movs	r2, #1
 800226c:	4803      	ldr	r0, [pc, #12]	@ (800227c <__io_putchar+0x20>)
 800226e:	f001 f916 	bl	800349e <HAL_UART_Transmit>
	return ch;
 8002272:	687b      	ldr	r3, [r7, #4]
}
 8002274:	4618      	mov	r0, r3
 8002276:	3708      	adds	r7, #8
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	200003d4 	.word	0x200003d4

08002280 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b094      	sub	sp, #80	@ 0x50
 8002284:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002286:	f107 0320 	add.w	r3, r7, #32
 800228a:	2230      	movs	r2, #48	@ 0x30
 800228c:	2100      	movs	r1, #0
 800228e:	4618      	mov	r0, r3
 8002290:	f001 fdac 	bl	8003dec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002294:	f107 030c 	add.w	r3, r7, #12
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]
 800229c:	605a      	str	r2, [r3, #4]
 800229e:	609a      	str	r2, [r3, #8]
 80022a0:	60da      	str	r2, [r3, #12]
 80022a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80022a4:	2300      	movs	r3, #0
 80022a6:	60bb      	str	r3, [r7, #8]
 80022a8:	4b29      	ldr	r3, [pc, #164]	@ (8002350 <SystemClock_Config+0xd0>)
 80022aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ac:	4a28      	ldr	r2, [pc, #160]	@ (8002350 <SystemClock_Config+0xd0>)
 80022ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80022b4:	4b26      	ldr	r3, [pc, #152]	@ (8002350 <SystemClock_Config+0xd0>)
 80022b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022bc:	60bb      	str	r3, [r7, #8]
 80022be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80022c0:	2300      	movs	r3, #0
 80022c2:	607b      	str	r3, [r7, #4]
 80022c4:	4b23      	ldr	r3, [pc, #140]	@ (8002354 <SystemClock_Config+0xd4>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80022cc:	4a21      	ldr	r2, [pc, #132]	@ (8002354 <SystemClock_Config+0xd4>)
 80022ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80022d2:	6013      	str	r3, [r2, #0]
 80022d4:	4b1f      	ldr	r3, [pc, #124]	@ (8002354 <SystemClock_Config+0xd4>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80022dc:	607b      	str	r3, [r7, #4]
 80022de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80022e0:	2302      	movs	r3, #2
 80022e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022e4:	2301      	movs	r3, #1
 80022e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022e8:	2310      	movs	r3, #16
 80022ea:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022ec:	2302      	movs	r3, #2
 80022ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80022f0:	2300      	movs	r3, #0
 80022f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80022f4:	2310      	movs	r3, #16
 80022f6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80022f8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80022fc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80022fe:	2304      	movs	r3, #4
 8002300:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002302:	2307      	movs	r3, #7
 8002304:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002306:	f107 0320 	add.w	r3, r7, #32
 800230a:	4618      	mov	r0, r3
 800230c:	f000 fbe2 	bl	8002ad4 <HAL_RCC_OscConfig>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002316:	f000 f8b7 	bl	8002488 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800231a:	230f      	movs	r3, #15
 800231c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800231e:	2302      	movs	r3, #2
 8002320:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002322:	2300      	movs	r3, #0
 8002324:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002326:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800232a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800232c:	2300      	movs	r3, #0
 800232e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002330:	f107 030c 	add.w	r3, r7, #12
 8002334:	2102      	movs	r1, #2
 8002336:	4618      	mov	r0, r3
 8002338:	f000 fe44 	bl	8002fc4 <HAL_RCC_ClockConfig>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002342:	f000 f8a1 	bl	8002488 <Error_Handler>
  }
}
 8002346:	bf00      	nop
 8002348:	3750      	adds	r7, #80	@ 0x50
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	40023800 	.word	0x40023800
 8002354:	40007000 	.word	0x40007000

08002358 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800235c:	4b11      	ldr	r3, [pc, #68]	@ (80023a4 <MX_USART2_UART_Init+0x4c>)
 800235e:	4a12      	ldr	r2, [pc, #72]	@ (80023a8 <MX_USART2_UART_Init+0x50>)
 8002360:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002362:	4b10      	ldr	r3, [pc, #64]	@ (80023a4 <MX_USART2_UART_Init+0x4c>)
 8002364:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002368:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800236a:	4b0e      	ldr	r3, [pc, #56]	@ (80023a4 <MX_USART2_UART_Init+0x4c>)
 800236c:	2200      	movs	r2, #0
 800236e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002370:	4b0c      	ldr	r3, [pc, #48]	@ (80023a4 <MX_USART2_UART_Init+0x4c>)
 8002372:	2200      	movs	r2, #0
 8002374:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002376:	4b0b      	ldr	r3, [pc, #44]	@ (80023a4 <MX_USART2_UART_Init+0x4c>)
 8002378:	2200      	movs	r2, #0
 800237a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800237c:	4b09      	ldr	r3, [pc, #36]	@ (80023a4 <MX_USART2_UART_Init+0x4c>)
 800237e:	220c      	movs	r2, #12
 8002380:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002382:	4b08      	ldr	r3, [pc, #32]	@ (80023a4 <MX_USART2_UART_Init+0x4c>)
 8002384:	2200      	movs	r2, #0
 8002386:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002388:	4b06      	ldr	r3, [pc, #24]	@ (80023a4 <MX_USART2_UART_Init+0x4c>)
 800238a:	2200      	movs	r2, #0
 800238c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800238e:	4805      	ldr	r0, [pc, #20]	@ (80023a4 <MX_USART2_UART_Init+0x4c>)
 8002390:	f001 f838 	bl	8003404 <HAL_UART_Init>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800239a:	f000 f875 	bl	8002488 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800239e:	bf00      	nop
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	200003d4 	.word	0x200003d4
 80023a8:	40004400 	.word	0x40004400

080023ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b08a      	sub	sp, #40	@ 0x28
 80023b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b2:	f107 0314 	add.w	r3, r7, #20
 80023b6:	2200      	movs	r2, #0
 80023b8:	601a      	str	r2, [r3, #0]
 80023ba:	605a      	str	r2, [r3, #4]
 80023bc:	609a      	str	r2, [r3, #8]
 80023be:	60da      	str	r2, [r3, #12]
 80023c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023c2:	2300      	movs	r3, #0
 80023c4:	613b      	str	r3, [r7, #16]
 80023c6:	4b2d      	ldr	r3, [pc, #180]	@ (800247c <MX_GPIO_Init+0xd0>)
 80023c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ca:	4a2c      	ldr	r2, [pc, #176]	@ (800247c <MX_GPIO_Init+0xd0>)
 80023cc:	f043 0304 	orr.w	r3, r3, #4
 80023d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80023d2:	4b2a      	ldr	r3, [pc, #168]	@ (800247c <MX_GPIO_Init+0xd0>)
 80023d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d6:	f003 0304 	and.w	r3, r3, #4
 80023da:	613b      	str	r3, [r7, #16]
 80023dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023de:	2300      	movs	r3, #0
 80023e0:	60fb      	str	r3, [r7, #12]
 80023e2:	4b26      	ldr	r3, [pc, #152]	@ (800247c <MX_GPIO_Init+0xd0>)
 80023e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e6:	4a25      	ldr	r2, [pc, #148]	@ (800247c <MX_GPIO_Init+0xd0>)
 80023e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80023ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80023ee:	4b23      	ldr	r3, [pc, #140]	@ (800247c <MX_GPIO_Init+0xd0>)
 80023f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023f6:	60fb      	str	r3, [r7, #12]
 80023f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023fa:	2300      	movs	r3, #0
 80023fc:	60bb      	str	r3, [r7, #8]
 80023fe:	4b1f      	ldr	r3, [pc, #124]	@ (800247c <MX_GPIO_Init+0xd0>)
 8002400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002402:	4a1e      	ldr	r2, [pc, #120]	@ (800247c <MX_GPIO_Init+0xd0>)
 8002404:	f043 0301 	orr.w	r3, r3, #1
 8002408:	6313      	str	r3, [r2, #48]	@ 0x30
 800240a:	4b1c      	ldr	r3, [pc, #112]	@ (800247c <MX_GPIO_Init+0xd0>)
 800240c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	60bb      	str	r3, [r7, #8]
 8002414:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002416:	2300      	movs	r3, #0
 8002418:	607b      	str	r3, [r7, #4]
 800241a:	4b18      	ldr	r3, [pc, #96]	@ (800247c <MX_GPIO_Init+0xd0>)
 800241c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800241e:	4a17      	ldr	r2, [pc, #92]	@ (800247c <MX_GPIO_Init+0xd0>)
 8002420:	f043 0302 	orr.w	r3, r3, #2
 8002424:	6313      	str	r3, [r2, #48]	@ 0x30
 8002426:	4b15      	ldr	r3, [pc, #84]	@ (800247c <MX_GPIO_Init+0xd0>)
 8002428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	607b      	str	r3, [r7, #4]
 8002430:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002432:	2200      	movs	r2, #0
 8002434:	2120      	movs	r1, #32
 8002436:	4812      	ldr	r0, [pc, #72]	@ (8002480 <MX_GPIO_Init+0xd4>)
 8002438:	f000 fb32 	bl	8002aa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800243c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002440:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002442:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002446:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002448:	2300      	movs	r3, #0
 800244a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800244c:	f107 0314 	add.w	r3, r7, #20
 8002450:	4619      	mov	r1, r3
 8002452:	480c      	ldr	r0, [pc, #48]	@ (8002484 <MX_GPIO_Init+0xd8>)
 8002454:	f000 f9a0 	bl	8002798 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002458:	2320      	movs	r3, #32
 800245a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800245c:	2301      	movs	r3, #1
 800245e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002460:	2300      	movs	r3, #0
 8002462:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002464:	2300      	movs	r3, #0
 8002466:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002468:	f107 0314 	add.w	r3, r7, #20
 800246c:	4619      	mov	r1, r3
 800246e:	4804      	ldr	r0, [pc, #16]	@ (8002480 <MX_GPIO_Init+0xd4>)
 8002470:	f000 f992 	bl	8002798 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002474:	bf00      	nop
 8002476:	3728      	adds	r7, #40	@ 0x28
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	40023800 	.word	0x40023800
 8002480:	40020000 	.word	0x40020000
 8002484:	40020800 	.word	0x40020800

08002488 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800248c:	b672      	cpsid	i
}
 800248e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002490:	bf00      	nop
 8002492:	e7fd      	b.n	8002490 <Error_Handler+0x8>

08002494 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002494:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80024cc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002498:	480d      	ldr	r0, [pc, #52]	@ (80024d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800249a:	490e      	ldr	r1, [pc, #56]	@ (80024d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800249c:	4a0e      	ldr	r2, [pc, #56]	@ (80024d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800249e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024a0:	e002      	b.n	80024a8 <LoopCopyDataInit>

080024a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024a6:	3304      	adds	r3, #4

080024a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024ac:	d3f9      	bcc.n	80024a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024ae:	4a0b      	ldr	r2, [pc, #44]	@ (80024dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80024b0:	4c0b      	ldr	r4, [pc, #44]	@ (80024e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80024b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024b4:	e001      	b.n	80024ba <LoopFillZerobss>

080024b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024b8:	3204      	adds	r2, #4

080024ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024bc:	d3fb      	bcc.n	80024b6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80024be:	f7ff febb 	bl	8002238 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024c2:	f001 fca1 	bl	8003e08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024c6:	f7ff fb77 	bl	8001bb8 <main>
  bx  lr    
 80024ca:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80024cc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80024d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024d4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80024d8:	08004ce0 	.word	0x08004ce0
  ldr r2, =_sbss
 80024dc:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80024e0:	20000568 	.word	0x20000568

080024e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024e4:	e7fe      	b.n	80024e4 <ADC_IRQHandler>
	...

080024e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80024ec:	4b0e      	ldr	r3, [pc, #56]	@ (8002528 <HAL_Init+0x40>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a0d      	ldr	r2, [pc, #52]	@ (8002528 <HAL_Init+0x40>)
 80024f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80024f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80024f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002528 <HAL_Init+0x40>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a0a      	ldr	r2, [pc, #40]	@ (8002528 <HAL_Init+0x40>)
 80024fe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002502:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002504:	4b08      	ldr	r3, [pc, #32]	@ (8002528 <HAL_Init+0x40>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a07      	ldr	r2, [pc, #28]	@ (8002528 <HAL_Init+0x40>)
 800250a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800250e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002510:	2003      	movs	r0, #3
 8002512:	f000 f90d 	bl	8002730 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002516:	2000      	movs	r0, #0
 8002518:	f000 f808 	bl	800252c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800251c:	f7ff fbaa 	bl	8001c74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	40023c00 	.word	0x40023c00

0800252c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002534:	4b12      	ldr	r3, [pc, #72]	@ (8002580 <HAL_InitTick+0x54>)
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	4b12      	ldr	r3, [pc, #72]	@ (8002584 <HAL_InitTick+0x58>)
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	4619      	mov	r1, r3
 800253e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002542:	fbb3 f3f1 	udiv	r3, r3, r1
 8002546:	fbb2 f3f3 	udiv	r3, r2, r3
 800254a:	4618      	mov	r0, r3
 800254c:	f000 f917 	bl	800277e <HAL_SYSTICK_Config>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e00e      	b.n	8002578 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2b0f      	cmp	r3, #15
 800255e:	d80a      	bhi.n	8002576 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002560:	2200      	movs	r2, #0
 8002562:	6879      	ldr	r1, [r7, #4]
 8002564:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002568:	f000 f8ed 	bl	8002746 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800256c:	4a06      	ldr	r2, [pc, #24]	@ (8002588 <HAL_InitTick+0x5c>)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002572:	2300      	movs	r3, #0
 8002574:	e000      	b.n	8002578 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
}
 8002578:	4618      	mov	r0, r3
 800257a:	3708      	adds	r7, #8
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	2000000c 	.word	0x2000000c
 8002584:	20000014 	.word	0x20000014
 8002588:	20000010 	.word	0x20000010

0800258c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002590:	4b06      	ldr	r3, [pc, #24]	@ (80025ac <HAL_IncTick+0x20>)
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	461a      	mov	r2, r3
 8002596:	4b06      	ldr	r3, [pc, #24]	@ (80025b0 <HAL_IncTick+0x24>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4413      	add	r3, r2
 800259c:	4a04      	ldr	r2, [pc, #16]	@ (80025b0 <HAL_IncTick+0x24>)
 800259e:	6013      	str	r3, [r2, #0]
}
 80025a0:	bf00      	nop
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	20000014 	.word	0x20000014
 80025b0:	20000418 	.word	0x20000418

080025b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  return uwTick;
 80025b8:	4b03      	ldr	r3, [pc, #12]	@ (80025c8 <HAL_GetTick+0x14>)
 80025ba:	681b      	ldr	r3, [r3, #0]
}
 80025bc:	4618      	mov	r0, r3
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	20000418 	.word	0x20000418

080025cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b085      	sub	sp, #20
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f003 0307 	and.w	r3, r3, #7
 80025da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002610 <__NVIC_SetPriorityGrouping+0x44>)
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025e2:	68ba      	ldr	r2, [r7, #8]
 80025e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80025e8:	4013      	ands	r3, r2
 80025ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80025f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025fe:	4a04      	ldr	r2, [pc, #16]	@ (8002610 <__NVIC_SetPriorityGrouping+0x44>)
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	60d3      	str	r3, [r2, #12]
}
 8002604:	bf00      	nop
 8002606:	3714      	adds	r7, #20
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr
 8002610:	e000ed00 	.word	0xe000ed00

08002614 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002618:	4b04      	ldr	r3, [pc, #16]	@ (800262c <__NVIC_GetPriorityGrouping+0x18>)
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	0a1b      	lsrs	r3, r3, #8
 800261e:	f003 0307 	and.w	r3, r3, #7
}
 8002622:	4618      	mov	r0, r3
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr
 800262c:	e000ed00 	.word	0xe000ed00

08002630 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	4603      	mov	r3, r0
 8002638:	6039      	str	r1, [r7, #0]
 800263a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800263c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002640:	2b00      	cmp	r3, #0
 8002642:	db0a      	blt.n	800265a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	b2da      	uxtb	r2, r3
 8002648:	490c      	ldr	r1, [pc, #48]	@ (800267c <__NVIC_SetPriority+0x4c>)
 800264a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264e:	0112      	lsls	r2, r2, #4
 8002650:	b2d2      	uxtb	r2, r2
 8002652:	440b      	add	r3, r1
 8002654:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002658:	e00a      	b.n	8002670 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	b2da      	uxtb	r2, r3
 800265e:	4908      	ldr	r1, [pc, #32]	@ (8002680 <__NVIC_SetPriority+0x50>)
 8002660:	79fb      	ldrb	r3, [r7, #7]
 8002662:	f003 030f 	and.w	r3, r3, #15
 8002666:	3b04      	subs	r3, #4
 8002668:	0112      	lsls	r2, r2, #4
 800266a:	b2d2      	uxtb	r2, r2
 800266c:	440b      	add	r3, r1
 800266e:	761a      	strb	r2, [r3, #24]
}
 8002670:	bf00      	nop
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr
 800267c:	e000e100 	.word	0xe000e100
 8002680:	e000ed00 	.word	0xe000ed00

08002684 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002684:	b480      	push	{r7}
 8002686:	b089      	sub	sp, #36	@ 0x24
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f003 0307 	and.w	r3, r3, #7
 8002696:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	f1c3 0307 	rsb	r3, r3, #7
 800269e:	2b04      	cmp	r3, #4
 80026a0:	bf28      	it	cs
 80026a2:	2304      	movcs	r3, #4
 80026a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	3304      	adds	r3, #4
 80026aa:	2b06      	cmp	r3, #6
 80026ac:	d902      	bls.n	80026b4 <NVIC_EncodePriority+0x30>
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	3b03      	subs	r3, #3
 80026b2:	e000      	b.n	80026b6 <NVIC_EncodePriority+0x32>
 80026b4:	2300      	movs	r3, #0
 80026b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	fa02 f303 	lsl.w	r3, r2, r3
 80026c2:	43da      	mvns	r2, r3
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	401a      	ands	r2, r3
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026cc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	fa01 f303 	lsl.w	r3, r1, r3
 80026d6:	43d9      	mvns	r1, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026dc:	4313      	orrs	r3, r2
         );
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3724      	adds	r7, #36	@ 0x24
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
	...

080026ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	3b01      	subs	r3, #1
 80026f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026fc:	d301      	bcc.n	8002702 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026fe:	2301      	movs	r3, #1
 8002700:	e00f      	b.n	8002722 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002702:	4a0a      	ldr	r2, [pc, #40]	@ (800272c <SysTick_Config+0x40>)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	3b01      	subs	r3, #1
 8002708:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800270a:	210f      	movs	r1, #15
 800270c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002710:	f7ff ff8e 	bl	8002630 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002714:	4b05      	ldr	r3, [pc, #20]	@ (800272c <SysTick_Config+0x40>)
 8002716:	2200      	movs	r2, #0
 8002718:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800271a:	4b04      	ldr	r3, [pc, #16]	@ (800272c <SysTick_Config+0x40>)
 800271c:	2207      	movs	r2, #7
 800271e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3708      	adds	r7, #8
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	e000e010 	.word	0xe000e010

08002730 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f7ff ff47 	bl	80025cc <__NVIC_SetPriorityGrouping>
}
 800273e:	bf00      	nop
 8002740:	3708      	adds	r7, #8
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}

08002746 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002746:	b580      	push	{r7, lr}
 8002748:	b086      	sub	sp, #24
 800274a:	af00      	add	r7, sp, #0
 800274c:	4603      	mov	r3, r0
 800274e:	60b9      	str	r1, [r7, #8]
 8002750:	607a      	str	r2, [r7, #4]
 8002752:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002754:	2300      	movs	r3, #0
 8002756:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002758:	f7ff ff5c 	bl	8002614 <__NVIC_GetPriorityGrouping>
 800275c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	68b9      	ldr	r1, [r7, #8]
 8002762:	6978      	ldr	r0, [r7, #20]
 8002764:	f7ff ff8e 	bl	8002684 <NVIC_EncodePriority>
 8002768:	4602      	mov	r2, r0
 800276a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800276e:	4611      	mov	r1, r2
 8002770:	4618      	mov	r0, r3
 8002772:	f7ff ff5d 	bl	8002630 <__NVIC_SetPriority>
}
 8002776:	bf00      	nop
 8002778:	3718      	adds	r7, #24
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800277e:	b580      	push	{r7, lr}
 8002780:	b082      	sub	sp, #8
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f7ff ffb0 	bl	80026ec <SysTick_Config>
 800278c:	4603      	mov	r3, r0
}
 800278e:	4618      	mov	r0, r3
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
	...

08002798 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002798:	b480      	push	{r7}
 800279a:	b089      	sub	sp, #36	@ 0x24
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027a2:	2300      	movs	r3, #0
 80027a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027a6:	2300      	movs	r3, #0
 80027a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027aa:	2300      	movs	r3, #0
 80027ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027ae:	2300      	movs	r3, #0
 80027b0:	61fb      	str	r3, [r7, #28]
 80027b2:	e159      	b.n	8002a68 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027b4:	2201      	movs	r2, #1
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	fa02 f303 	lsl.w	r3, r2, r3
 80027bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	697a      	ldr	r2, [r7, #20]
 80027c4:	4013      	ands	r3, r2
 80027c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027c8:	693a      	ldr	r2, [r7, #16]
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	f040 8148 	bne.w	8002a62 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f003 0303 	and.w	r3, r3, #3
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d005      	beq.n	80027ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d130      	bne.n	800284c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	2203      	movs	r2, #3
 80027f6:	fa02 f303 	lsl.w	r3, r2, r3
 80027fa:	43db      	mvns	r3, r3
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	4013      	ands	r3, r2
 8002800:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	68da      	ldr	r2, [r3, #12]
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	fa02 f303 	lsl.w	r3, r2, r3
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	4313      	orrs	r3, r2
 8002812:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	69ba      	ldr	r2, [r7, #24]
 8002818:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002820:	2201      	movs	r2, #1
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	fa02 f303 	lsl.w	r3, r2, r3
 8002828:	43db      	mvns	r3, r3
 800282a:	69ba      	ldr	r2, [r7, #24]
 800282c:	4013      	ands	r3, r2
 800282e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	091b      	lsrs	r3, r3, #4
 8002836:	f003 0201 	and.w	r2, r3, #1
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	fa02 f303 	lsl.w	r3, r2, r3
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	4313      	orrs	r3, r2
 8002844:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f003 0303 	and.w	r3, r3, #3
 8002854:	2b03      	cmp	r3, #3
 8002856:	d017      	beq.n	8002888 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	2203      	movs	r2, #3
 8002864:	fa02 f303 	lsl.w	r3, r2, r3
 8002868:	43db      	mvns	r3, r3
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	4013      	ands	r3, r2
 800286e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	689a      	ldr	r2, [r3, #8]
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	fa02 f303 	lsl.w	r3, r2, r3
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	4313      	orrs	r3, r2
 8002880:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f003 0303 	and.w	r3, r3, #3
 8002890:	2b02      	cmp	r3, #2
 8002892:	d123      	bne.n	80028dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	08da      	lsrs	r2, r3, #3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	3208      	adds	r2, #8
 800289c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	f003 0307 	and.w	r3, r3, #7
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	220f      	movs	r2, #15
 80028ac:	fa02 f303 	lsl.w	r3, r2, r3
 80028b0:	43db      	mvns	r3, r3
 80028b2:	69ba      	ldr	r2, [r7, #24]
 80028b4:	4013      	ands	r3, r2
 80028b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	691a      	ldr	r2, [r3, #16]
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	f003 0307 	and.w	r3, r3, #7
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	fa02 f303 	lsl.w	r3, r2, r3
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	08da      	lsrs	r2, r3, #3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	3208      	adds	r2, #8
 80028d6:	69b9      	ldr	r1, [r7, #24]
 80028d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	2203      	movs	r2, #3
 80028e8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ec:	43db      	mvns	r3, r3
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	4013      	ands	r3, r2
 80028f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f003 0203 	and.w	r2, r3, #3
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	005b      	lsls	r3, r3, #1
 8002900:	fa02 f303 	lsl.w	r3, r2, r3
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	4313      	orrs	r3, r2
 8002908:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002918:	2b00      	cmp	r3, #0
 800291a:	f000 80a2 	beq.w	8002a62 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800291e:	2300      	movs	r3, #0
 8002920:	60fb      	str	r3, [r7, #12]
 8002922:	4b57      	ldr	r3, [pc, #348]	@ (8002a80 <HAL_GPIO_Init+0x2e8>)
 8002924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002926:	4a56      	ldr	r2, [pc, #344]	@ (8002a80 <HAL_GPIO_Init+0x2e8>)
 8002928:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800292c:	6453      	str	r3, [r2, #68]	@ 0x44
 800292e:	4b54      	ldr	r3, [pc, #336]	@ (8002a80 <HAL_GPIO_Init+0x2e8>)
 8002930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002932:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002936:	60fb      	str	r3, [r7, #12]
 8002938:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800293a:	4a52      	ldr	r2, [pc, #328]	@ (8002a84 <HAL_GPIO_Init+0x2ec>)
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	089b      	lsrs	r3, r3, #2
 8002940:	3302      	adds	r3, #2
 8002942:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002946:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	f003 0303 	and.w	r3, r3, #3
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	220f      	movs	r2, #15
 8002952:	fa02 f303 	lsl.w	r3, r2, r3
 8002956:	43db      	mvns	r3, r3
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	4013      	ands	r3, r2
 800295c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a49      	ldr	r2, [pc, #292]	@ (8002a88 <HAL_GPIO_Init+0x2f0>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d019      	beq.n	800299a <HAL_GPIO_Init+0x202>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a48      	ldr	r2, [pc, #288]	@ (8002a8c <HAL_GPIO_Init+0x2f4>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d013      	beq.n	8002996 <HAL_GPIO_Init+0x1fe>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a47      	ldr	r2, [pc, #284]	@ (8002a90 <HAL_GPIO_Init+0x2f8>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d00d      	beq.n	8002992 <HAL_GPIO_Init+0x1fa>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a46      	ldr	r2, [pc, #280]	@ (8002a94 <HAL_GPIO_Init+0x2fc>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d007      	beq.n	800298e <HAL_GPIO_Init+0x1f6>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a45      	ldr	r2, [pc, #276]	@ (8002a98 <HAL_GPIO_Init+0x300>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d101      	bne.n	800298a <HAL_GPIO_Init+0x1f2>
 8002986:	2304      	movs	r3, #4
 8002988:	e008      	b.n	800299c <HAL_GPIO_Init+0x204>
 800298a:	2307      	movs	r3, #7
 800298c:	e006      	b.n	800299c <HAL_GPIO_Init+0x204>
 800298e:	2303      	movs	r3, #3
 8002990:	e004      	b.n	800299c <HAL_GPIO_Init+0x204>
 8002992:	2302      	movs	r3, #2
 8002994:	e002      	b.n	800299c <HAL_GPIO_Init+0x204>
 8002996:	2301      	movs	r3, #1
 8002998:	e000      	b.n	800299c <HAL_GPIO_Init+0x204>
 800299a:	2300      	movs	r3, #0
 800299c:	69fa      	ldr	r2, [r7, #28]
 800299e:	f002 0203 	and.w	r2, r2, #3
 80029a2:	0092      	lsls	r2, r2, #2
 80029a4:	4093      	lsls	r3, r2
 80029a6:	69ba      	ldr	r2, [r7, #24]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029ac:	4935      	ldr	r1, [pc, #212]	@ (8002a84 <HAL_GPIO_Init+0x2ec>)
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	089b      	lsrs	r3, r3, #2
 80029b2:	3302      	adds	r3, #2
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029ba:	4b38      	ldr	r3, [pc, #224]	@ (8002a9c <HAL_GPIO_Init+0x304>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	43db      	mvns	r3, r3
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	4013      	ands	r3, r2
 80029c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d003      	beq.n	80029de <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80029d6:	69ba      	ldr	r2, [r7, #24]
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	4313      	orrs	r3, r2
 80029dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029de:	4a2f      	ldr	r2, [pc, #188]	@ (8002a9c <HAL_GPIO_Init+0x304>)
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029e4:	4b2d      	ldr	r3, [pc, #180]	@ (8002a9c <HAL_GPIO_Init+0x304>)
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	43db      	mvns	r3, r3
 80029ee:	69ba      	ldr	r2, [r7, #24]
 80029f0:	4013      	ands	r3, r2
 80029f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d003      	beq.n	8002a08 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002a00:	69ba      	ldr	r2, [r7, #24]
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a08:	4a24      	ldr	r2, [pc, #144]	@ (8002a9c <HAL_GPIO_Init+0x304>)
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a0e:	4b23      	ldr	r3, [pc, #140]	@ (8002a9c <HAL_GPIO_Init+0x304>)
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	43db      	mvns	r3, r3
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d003      	beq.n	8002a32 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002a2a:	69ba      	ldr	r2, [r7, #24]
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a32:	4a1a      	ldr	r2, [pc, #104]	@ (8002a9c <HAL_GPIO_Init+0x304>)
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a38:	4b18      	ldr	r3, [pc, #96]	@ (8002a9c <HAL_GPIO_Init+0x304>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	43db      	mvns	r3, r3
 8002a42:	69ba      	ldr	r2, [r7, #24]
 8002a44:	4013      	ands	r3, r2
 8002a46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d003      	beq.n	8002a5c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a5c:	4a0f      	ldr	r2, [pc, #60]	@ (8002a9c <HAL_GPIO_Init+0x304>)
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	3301      	adds	r3, #1
 8002a66:	61fb      	str	r3, [r7, #28]
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	2b0f      	cmp	r3, #15
 8002a6c:	f67f aea2 	bls.w	80027b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a70:	bf00      	nop
 8002a72:	bf00      	nop
 8002a74:	3724      	adds	r7, #36	@ 0x24
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	40023800 	.word	0x40023800
 8002a84:	40013800 	.word	0x40013800
 8002a88:	40020000 	.word	0x40020000
 8002a8c:	40020400 	.word	0x40020400
 8002a90:	40020800 	.word	0x40020800
 8002a94:	40020c00 	.word	0x40020c00
 8002a98:	40021000 	.word	0x40021000
 8002a9c:	40013c00 	.word	0x40013c00

08002aa0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	807b      	strh	r3, [r7, #2]
 8002aac:	4613      	mov	r3, r2
 8002aae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ab0:	787b      	ldrb	r3, [r7, #1]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d003      	beq.n	8002abe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ab6:	887a      	ldrh	r2, [r7, #2]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002abc:	e003      	b.n	8002ac6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002abe:	887b      	ldrh	r3, [r7, #2]
 8002ac0:	041a      	lsls	r2, r3, #16
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	619a      	str	r2, [r3, #24]
}
 8002ac6:	bf00      	nop
 8002ac8:	370c      	adds	r7, #12
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
	...

08002ad4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b086      	sub	sp, #24
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d101      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e267      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d075      	beq.n	8002bde <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002af2:	4b88      	ldr	r3, [pc, #544]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f003 030c 	and.w	r3, r3, #12
 8002afa:	2b04      	cmp	r3, #4
 8002afc:	d00c      	beq.n	8002b18 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002afe:	4b85      	ldr	r3, [pc, #532]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b06:	2b08      	cmp	r3, #8
 8002b08:	d112      	bne.n	8002b30 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b0a:	4b82      	ldr	r3, [pc, #520]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b12:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b16:	d10b      	bne.n	8002b30 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b18:	4b7e      	ldr	r3, [pc, #504]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d05b      	beq.n	8002bdc <HAL_RCC_OscConfig+0x108>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d157      	bne.n	8002bdc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e242      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b38:	d106      	bne.n	8002b48 <HAL_RCC_OscConfig+0x74>
 8002b3a:	4b76      	ldr	r3, [pc, #472]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a75      	ldr	r2, [pc, #468]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002b40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b44:	6013      	str	r3, [r2, #0]
 8002b46:	e01d      	b.n	8002b84 <HAL_RCC_OscConfig+0xb0>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b50:	d10c      	bne.n	8002b6c <HAL_RCC_OscConfig+0x98>
 8002b52:	4b70      	ldr	r3, [pc, #448]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a6f      	ldr	r2, [pc, #444]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002b58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b5c:	6013      	str	r3, [r2, #0]
 8002b5e:	4b6d      	ldr	r3, [pc, #436]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a6c      	ldr	r2, [pc, #432]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002b64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b68:	6013      	str	r3, [r2, #0]
 8002b6a:	e00b      	b.n	8002b84 <HAL_RCC_OscConfig+0xb0>
 8002b6c:	4b69      	ldr	r3, [pc, #420]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a68      	ldr	r2, [pc, #416]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002b72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b76:	6013      	str	r3, [r2, #0]
 8002b78:	4b66      	ldr	r3, [pc, #408]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a65      	ldr	r2, [pc, #404]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002b7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d013      	beq.n	8002bb4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b8c:	f7ff fd12 	bl	80025b4 <HAL_GetTick>
 8002b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b92:	e008      	b.n	8002ba6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b94:	f7ff fd0e 	bl	80025b4 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b64      	cmp	r3, #100	@ 0x64
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e207      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ba6:	4b5b      	ldr	r3, [pc, #364]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d0f0      	beq.n	8002b94 <HAL_RCC_OscConfig+0xc0>
 8002bb2:	e014      	b.n	8002bde <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb4:	f7ff fcfe 	bl	80025b4 <HAL_GetTick>
 8002bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bba:	e008      	b.n	8002bce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bbc:	f7ff fcfa 	bl	80025b4 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b64      	cmp	r3, #100	@ 0x64
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e1f3      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bce:	4b51      	ldr	r3, [pc, #324]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d1f0      	bne.n	8002bbc <HAL_RCC_OscConfig+0xe8>
 8002bda:	e000      	b.n	8002bde <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d063      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bea:	4b4a      	ldr	r3, [pc, #296]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f003 030c 	and.w	r3, r3, #12
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d00b      	beq.n	8002c0e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bf6:	4b47      	ldr	r3, [pc, #284]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bfe:	2b08      	cmp	r3, #8
 8002c00:	d11c      	bne.n	8002c3c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c02:	4b44      	ldr	r3, [pc, #272]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d116      	bne.n	8002c3c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c0e:	4b41      	ldr	r3, [pc, #260]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d005      	beq.n	8002c26 <HAL_RCC_OscConfig+0x152>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d001      	beq.n	8002c26 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e1c7      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c26:	4b3b      	ldr	r3, [pc, #236]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	00db      	lsls	r3, r3, #3
 8002c34:	4937      	ldr	r1, [pc, #220]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c3a:	e03a      	b.n	8002cb2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d020      	beq.n	8002c86 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c44:	4b34      	ldr	r3, [pc, #208]	@ (8002d18 <HAL_RCC_OscConfig+0x244>)
 8002c46:	2201      	movs	r2, #1
 8002c48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c4a:	f7ff fcb3 	bl	80025b4 <HAL_GetTick>
 8002c4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c50:	e008      	b.n	8002c64 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c52:	f7ff fcaf 	bl	80025b4 <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d901      	bls.n	8002c64 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e1a8      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c64:	4b2b      	ldr	r3, [pc, #172]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0302 	and.w	r3, r3, #2
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d0f0      	beq.n	8002c52 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c70:	4b28      	ldr	r3, [pc, #160]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	691b      	ldr	r3, [r3, #16]
 8002c7c:	00db      	lsls	r3, r3, #3
 8002c7e:	4925      	ldr	r1, [pc, #148]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	600b      	str	r3, [r1, #0]
 8002c84:	e015      	b.n	8002cb2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c86:	4b24      	ldr	r3, [pc, #144]	@ (8002d18 <HAL_RCC_OscConfig+0x244>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c8c:	f7ff fc92 	bl	80025b4 <HAL_GetTick>
 8002c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c92:	e008      	b.n	8002ca6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c94:	f7ff fc8e 	bl	80025b4 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e187      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ca6:	4b1b      	ldr	r3, [pc, #108]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1f0      	bne.n	8002c94 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0308 	and.w	r3, r3, #8
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d036      	beq.n	8002d2c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	695b      	ldr	r3, [r3, #20]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d016      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cc6:	4b15      	ldr	r3, [pc, #84]	@ (8002d1c <HAL_RCC_OscConfig+0x248>)
 8002cc8:	2201      	movs	r2, #1
 8002cca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ccc:	f7ff fc72 	bl	80025b4 <HAL_GetTick>
 8002cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cd2:	e008      	b.n	8002ce6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cd4:	f7ff fc6e 	bl	80025b4 <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d901      	bls.n	8002ce6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e167      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ce6:	4b0b      	ldr	r3, [pc, #44]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002ce8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d0f0      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x200>
 8002cf2:	e01b      	b.n	8002d2c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cf4:	4b09      	ldr	r3, [pc, #36]	@ (8002d1c <HAL_RCC_OscConfig+0x248>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cfa:	f7ff fc5b 	bl	80025b4 <HAL_GetTick>
 8002cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d00:	e00e      	b.n	8002d20 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d02:	f7ff fc57 	bl	80025b4 <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d907      	bls.n	8002d20 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e150      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4e2>
 8002d14:	40023800 	.word	0x40023800
 8002d18:	42470000 	.word	0x42470000
 8002d1c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d20:	4b88      	ldr	r3, [pc, #544]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002d22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d24:	f003 0302 	and.w	r3, r3, #2
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d1ea      	bne.n	8002d02 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0304 	and.w	r3, r3, #4
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	f000 8097 	beq.w	8002e68 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d3e:	4b81      	ldr	r3, [pc, #516]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d10f      	bne.n	8002d6a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	60bb      	str	r3, [r7, #8]
 8002d4e:	4b7d      	ldr	r3, [pc, #500]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d52:	4a7c      	ldr	r2, [pc, #496]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002d54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d58:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d5a:	4b7a      	ldr	r3, [pc, #488]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d62:	60bb      	str	r3, [r7, #8]
 8002d64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d66:	2301      	movs	r3, #1
 8002d68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d6a:	4b77      	ldr	r3, [pc, #476]	@ (8002f48 <HAL_RCC_OscConfig+0x474>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d118      	bne.n	8002da8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d76:	4b74      	ldr	r3, [pc, #464]	@ (8002f48 <HAL_RCC_OscConfig+0x474>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a73      	ldr	r2, [pc, #460]	@ (8002f48 <HAL_RCC_OscConfig+0x474>)
 8002d7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d82:	f7ff fc17 	bl	80025b4 <HAL_GetTick>
 8002d86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d88:	e008      	b.n	8002d9c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d8a:	f7ff fc13 	bl	80025b4 <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d901      	bls.n	8002d9c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e10c      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d9c:	4b6a      	ldr	r3, [pc, #424]	@ (8002f48 <HAL_RCC_OscConfig+0x474>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d0f0      	beq.n	8002d8a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d106      	bne.n	8002dbe <HAL_RCC_OscConfig+0x2ea>
 8002db0:	4b64      	ldr	r3, [pc, #400]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002db2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002db4:	4a63      	ldr	r2, [pc, #396]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002db6:	f043 0301 	orr.w	r3, r3, #1
 8002dba:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dbc:	e01c      	b.n	8002df8 <HAL_RCC_OscConfig+0x324>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	2b05      	cmp	r3, #5
 8002dc4:	d10c      	bne.n	8002de0 <HAL_RCC_OscConfig+0x30c>
 8002dc6:	4b5f      	ldr	r3, [pc, #380]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002dc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dca:	4a5e      	ldr	r2, [pc, #376]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002dcc:	f043 0304 	orr.w	r3, r3, #4
 8002dd0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dd2:	4b5c      	ldr	r3, [pc, #368]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002dd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dd6:	4a5b      	ldr	r2, [pc, #364]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002dd8:	f043 0301 	orr.w	r3, r3, #1
 8002ddc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dde:	e00b      	b.n	8002df8 <HAL_RCC_OscConfig+0x324>
 8002de0:	4b58      	ldr	r3, [pc, #352]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002de2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002de4:	4a57      	ldr	r2, [pc, #348]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002de6:	f023 0301 	bic.w	r3, r3, #1
 8002dea:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dec:	4b55      	ldr	r3, [pc, #340]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002dee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002df0:	4a54      	ldr	r2, [pc, #336]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002df2:	f023 0304 	bic.w	r3, r3, #4
 8002df6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d015      	beq.n	8002e2c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e00:	f7ff fbd8 	bl	80025b4 <HAL_GetTick>
 8002e04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e06:	e00a      	b.n	8002e1e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e08:	f7ff fbd4 	bl	80025b4 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e0cb      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e1e:	4b49      	ldr	r3, [pc, #292]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002e20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e22:	f003 0302 	and.w	r3, r3, #2
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d0ee      	beq.n	8002e08 <HAL_RCC_OscConfig+0x334>
 8002e2a:	e014      	b.n	8002e56 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e2c:	f7ff fbc2 	bl	80025b4 <HAL_GetTick>
 8002e30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e32:	e00a      	b.n	8002e4a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e34:	f7ff fbbe 	bl	80025b4 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e0b5      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e4a:	4b3e      	ldr	r3, [pc, #248]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002e4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1ee      	bne.n	8002e34 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e56:	7dfb      	ldrb	r3, [r7, #23]
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d105      	bne.n	8002e68 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e5c:	4b39      	ldr	r3, [pc, #228]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e60:	4a38      	ldr	r2, [pc, #224]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002e62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e66:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	699b      	ldr	r3, [r3, #24]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	f000 80a1 	beq.w	8002fb4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e72:	4b34      	ldr	r3, [pc, #208]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f003 030c 	and.w	r3, r3, #12
 8002e7a:	2b08      	cmp	r3, #8
 8002e7c:	d05c      	beq.n	8002f38 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d141      	bne.n	8002f0a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e86:	4b31      	ldr	r3, [pc, #196]	@ (8002f4c <HAL_RCC_OscConfig+0x478>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e8c:	f7ff fb92 	bl	80025b4 <HAL_GetTick>
 8002e90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e92:	e008      	b.n	8002ea6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e94:	f7ff fb8e 	bl	80025b4 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e087      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ea6:	4b27      	ldr	r3, [pc, #156]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d1f0      	bne.n	8002e94 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	69da      	ldr	r2, [r3, #28]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a1b      	ldr	r3, [r3, #32]
 8002eba:	431a      	orrs	r2, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec0:	019b      	lsls	r3, r3, #6
 8002ec2:	431a      	orrs	r2, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ec8:	085b      	lsrs	r3, r3, #1
 8002eca:	3b01      	subs	r3, #1
 8002ecc:	041b      	lsls	r3, r3, #16
 8002ece:	431a      	orrs	r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ed4:	061b      	lsls	r3, r3, #24
 8002ed6:	491b      	ldr	r1, [pc, #108]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002edc:	4b1b      	ldr	r3, [pc, #108]	@ (8002f4c <HAL_RCC_OscConfig+0x478>)
 8002ede:	2201      	movs	r2, #1
 8002ee0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee2:	f7ff fb67 	bl	80025b4 <HAL_GetTick>
 8002ee6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ee8:	e008      	b.n	8002efc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eea:	f7ff fb63 	bl	80025b4 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d901      	bls.n	8002efc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e05c      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002efc:	4b11      	ldr	r3, [pc, #68]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d0f0      	beq.n	8002eea <HAL_RCC_OscConfig+0x416>
 8002f08:	e054      	b.n	8002fb4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f0a:	4b10      	ldr	r3, [pc, #64]	@ (8002f4c <HAL_RCC_OscConfig+0x478>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f10:	f7ff fb50 	bl	80025b4 <HAL_GetTick>
 8002f14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f16:	e008      	b.n	8002f2a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f18:	f7ff fb4c 	bl	80025b4 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d901      	bls.n	8002f2a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e045      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f2a:	4b06      	ldr	r3, [pc, #24]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d1f0      	bne.n	8002f18 <HAL_RCC_OscConfig+0x444>
 8002f36:	e03d      	b.n	8002fb4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	699b      	ldr	r3, [r3, #24]
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d107      	bne.n	8002f50 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e038      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4e2>
 8002f44:	40023800 	.word	0x40023800
 8002f48:	40007000 	.word	0x40007000
 8002f4c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f50:	4b1b      	ldr	r3, [pc, #108]	@ (8002fc0 <HAL_RCC_OscConfig+0x4ec>)
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	699b      	ldr	r3, [r3, #24]
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d028      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d121      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d11a      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f7a:	68fa      	ldr	r2, [r7, #12]
 8002f7c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002f80:	4013      	ands	r3, r2
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002f86:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d111      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f96:	085b      	lsrs	r3, r3, #1
 8002f98:	3b01      	subs	r3, #1
 8002f9a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d107      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002faa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d001      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e000      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3718      	adds	r7, #24
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	40023800 	.word	0x40023800

08002fc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d101      	bne.n	8002fd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e0cc      	b.n	8003172 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fd8:	4b68      	ldr	r3, [pc, #416]	@ (800317c <HAL_RCC_ClockConfig+0x1b8>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0307 	and.w	r3, r3, #7
 8002fe0:	683a      	ldr	r2, [r7, #0]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d90c      	bls.n	8003000 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fe6:	4b65      	ldr	r3, [pc, #404]	@ (800317c <HAL_RCC_ClockConfig+0x1b8>)
 8002fe8:	683a      	ldr	r2, [r7, #0]
 8002fea:	b2d2      	uxtb	r2, r2
 8002fec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fee:	4b63      	ldr	r3, [pc, #396]	@ (800317c <HAL_RCC_ClockConfig+0x1b8>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0307 	and.w	r3, r3, #7
 8002ff6:	683a      	ldr	r2, [r7, #0]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d001      	beq.n	8003000 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e0b8      	b.n	8003172 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0302 	and.w	r3, r3, #2
 8003008:	2b00      	cmp	r3, #0
 800300a:	d020      	beq.n	800304e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0304 	and.w	r3, r3, #4
 8003014:	2b00      	cmp	r3, #0
 8003016:	d005      	beq.n	8003024 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003018:	4b59      	ldr	r3, [pc, #356]	@ (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	4a58      	ldr	r2, [pc, #352]	@ (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 800301e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003022:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0308 	and.w	r3, r3, #8
 800302c:	2b00      	cmp	r3, #0
 800302e:	d005      	beq.n	800303c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003030:	4b53      	ldr	r3, [pc, #332]	@ (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	4a52      	ldr	r2, [pc, #328]	@ (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 8003036:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800303a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800303c:	4b50      	ldr	r3, [pc, #320]	@ (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	494d      	ldr	r1, [pc, #308]	@ (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 800304a:	4313      	orrs	r3, r2
 800304c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	2b00      	cmp	r3, #0
 8003058:	d044      	beq.n	80030e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d107      	bne.n	8003072 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003062:	4b47      	ldr	r3, [pc, #284]	@ (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d119      	bne.n	80030a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e07f      	b.n	8003172 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	2b02      	cmp	r3, #2
 8003078:	d003      	beq.n	8003082 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800307e:	2b03      	cmp	r3, #3
 8003080:	d107      	bne.n	8003092 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003082:	4b3f      	ldr	r3, [pc, #252]	@ (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d109      	bne.n	80030a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e06f      	b.n	8003172 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003092:	4b3b      	ldr	r3, [pc, #236]	@ (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	2b00      	cmp	r3, #0
 800309c:	d101      	bne.n	80030a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e067      	b.n	8003172 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030a2:	4b37      	ldr	r3, [pc, #220]	@ (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f023 0203 	bic.w	r2, r3, #3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	4934      	ldr	r1, [pc, #208]	@ (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030b4:	f7ff fa7e 	bl	80025b4 <HAL_GetTick>
 80030b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ba:	e00a      	b.n	80030d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030bc:	f7ff fa7a 	bl	80025b4 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e04f      	b.n	8003172 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030d2:	4b2b      	ldr	r3, [pc, #172]	@ (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f003 020c 	and.w	r2, r3, #12
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d1eb      	bne.n	80030bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030e4:	4b25      	ldr	r3, [pc, #148]	@ (800317c <HAL_RCC_ClockConfig+0x1b8>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0307 	and.w	r3, r3, #7
 80030ec:	683a      	ldr	r2, [r7, #0]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d20c      	bcs.n	800310c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030f2:	4b22      	ldr	r3, [pc, #136]	@ (800317c <HAL_RCC_ClockConfig+0x1b8>)
 80030f4:	683a      	ldr	r2, [r7, #0]
 80030f6:	b2d2      	uxtb	r2, r2
 80030f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030fa:	4b20      	ldr	r3, [pc, #128]	@ (800317c <HAL_RCC_ClockConfig+0x1b8>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0307 	and.w	r3, r3, #7
 8003102:	683a      	ldr	r2, [r7, #0]
 8003104:	429a      	cmp	r2, r3
 8003106:	d001      	beq.n	800310c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e032      	b.n	8003172 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0304 	and.w	r3, r3, #4
 8003114:	2b00      	cmp	r3, #0
 8003116:	d008      	beq.n	800312a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003118:	4b19      	ldr	r3, [pc, #100]	@ (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	4916      	ldr	r1, [pc, #88]	@ (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 8003126:	4313      	orrs	r3, r2
 8003128:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0308 	and.w	r3, r3, #8
 8003132:	2b00      	cmp	r3, #0
 8003134:	d009      	beq.n	800314a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003136:	4b12      	ldr	r3, [pc, #72]	@ (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	00db      	lsls	r3, r3, #3
 8003144:	490e      	ldr	r1, [pc, #56]	@ (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 8003146:	4313      	orrs	r3, r2
 8003148:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800314a:	f000 f821 	bl	8003190 <HAL_RCC_GetSysClockFreq>
 800314e:	4602      	mov	r2, r0
 8003150:	4b0b      	ldr	r3, [pc, #44]	@ (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	091b      	lsrs	r3, r3, #4
 8003156:	f003 030f 	and.w	r3, r3, #15
 800315a:	490a      	ldr	r1, [pc, #40]	@ (8003184 <HAL_RCC_ClockConfig+0x1c0>)
 800315c:	5ccb      	ldrb	r3, [r1, r3]
 800315e:	fa22 f303 	lsr.w	r3, r2, r3
 8003162:	4a09      	ldr	r2, [pc, #36]	@ (8003188 <HAL_RCC_ClockConfig+0x1c4>)
 8003164:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003166:	4b09      	ldr	r3, [pc, #36]	@ (800318c <HAL_RCC_ClockConfig+0x1c8>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4618      	mov	r0, r3
 800316c:	f7ff f9de 	bl	800252c <HAL_InitTick>

  return HAL_OK;
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3710      	adds	r7, #16
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	40023c00 	.word	0x40023c00
 8003180:	40023800 	.word	0x40023800
 8003184:	08004c84 	.word	0x08004c84
 8003188:	2000000c 	.word	0x2000000c
 800318c:	20000010 	.word	0x20000010

08003190 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003190:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003194:	b094      	sub	sp, #80	@ 0x50
 8003196:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003198:	2300      	movs	r3, #0
 800319a:	647b      	str	r3, [r7, #68]	@ 0x44
 800319c:	2300      	movs	r3, #0
 800319e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80031a0:	2300      	movs	r3, #0
 80031a2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80031a4:	2300      	movs	r3, #0
 80031a6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031a8:	4b79      	ldr	r3, [pc, #484]	@ (8003390 <HAL_RCC_GetSysClockFreq+0x200>)
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	f003 030c 	and.w	r3, r3, #12
 80031b0:	2b08      	cmp	r3, #8
 80031b2:	d00d      	beq.n	80031d0 <HAL_RCC_GetSysClockFreq+0x40>
 80031b4:	2b08      	cmp	r3, #8
 80031b6:	f200 80e1 	bhi.w	800337c <HAL_RCC_GetSysClockFreq+0x1ec>
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d002      	beq.n	80031c4 <HAL_RCC_GetSysClockFreq+0x34>
 80031be:	2b04      	cmp	r3, #4
 80031c0:	d003      	beq.n	80031ca <HAL_RCC_GetSysClockFreq+0x3a>
 80031c2:	e0db      	b.n	800337c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031c4:	4b73      	ldr	r3, [pc, #460]	@ (8003394 <HAL_RCC_GetSysClockFreq+0x204>)
 80031c6:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80031c8:	e0db      	b.n	8003382 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031ca:	4b73      	ldr	r3, [pc, #460]	@ (8003398 <HAL_RCC_GetSysClockFreq+0x208>)
 80031cc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80031ce:	e0d8      	b.n	8003382 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031d0:	4b6f      	ldr	r3, [pc, #444]	@ (8003390 <HAL_RCC_GetSysClockFreq+0x200>)
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80031d8:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031da:	4b6d      	ldr	r3, [pc, #436]	@ (8003390 <HAL_RCC_GetSysClockFreq+0x200>)
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d063      	beq.n	80032ae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031e6:	4b6a      	ldr	r3, [pc, #424]	@ (8003390 <HAL_RCC_GetSysClockFreq+0x200>)
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	099b      	lsrs	r3, r3, #6
 80031ec:	2200      	movs	r2, #0
 80031ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 80031f0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80031f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80031fa:	2300      	movs	r3, #0
 80031fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80031fe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003202:	4622      	mov	r2, r4
 8003204:	462b      	mov	r3, r5
 8003206:	f04f 0000 	mov.w	r0, #0
 800320a:	f04f 0100 	mov.w	r1, #0
 800320e:	0159      	lsls	r1, r3, #5
 8003210:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003214:	0150      	lsls	r0, r2, #5
 8003216:	4602      	mov	r2, r0
 8003218:	460b      	mov	r3, r1
 800321a:	4621      	mov	r1, r4
 800321c:	1a51      	subs	r1, r2, r1
 800321e:	6139      	str	r1, [r7, #16]
 8003220:	4629      	mov	r1, r5
 8003222:	eb63 0301 	sbc.w	r3, r3, r1
 8003226:	617b      	str	r3, [r7, #20]
 8003228:	f04f 0200 	mov.w	r2, #0
 800322c:	f04f 0300 	mov.w	r3, #0
 8003230:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003234:	4659      	mov	r1, fp
 8003236:	018b      	lsls	r3, r1, #6
 8003238:	4651      	mov	r1, sl
 800323a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800323e:	4651      	mov	r1, sl
 8003240:	018a      	lsls	r2, r1, #6
 8003242:	4651      	mov	r1, sl
 8003244:	ebb2 0801 	subs.w	r8, r2, r1
 8003248:	4659      	mov	r1, fp
 800324a:	eb63 0901 	sbc.w	r9, r3, r1
 800324e:	f04f 0200 	mov.w	r2, #0
 8003252:	f04f 0300 	mov.w	r3, #0
 8003256:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800325a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800325e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003262:	4690      	mov	r8, r2
 8003264:	4699      	mov	r9, r3
 8003266:	4623      	mov	r3, r4
 8003268:	eb18 0303 	adds.w	r3, r8, r3
 800326c:	60bb      	str	r3, [r7, #8]
 800326e:	462b      	mov	r3, r5
 8003270:	eb49 0303 	adc.w	r3, r9, r3
 8003274:	60fb      	str	r3, [r7, #12]
 8003276:	f04f 0200 	mov.w	r2, #0
 800327a:	f04f 0300 	mov.w	r3, #0
 800327e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003282:	4629      	mov	r1, r5
 8003284:	024b      	lsls	r3, r1, #9
 8003286:	4621      	mov	r1, r4
 8003288:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800328c:	4621      	mov	r1, r4
 800328e:	024a      	lsls	r2, r1, #9
 8003290:	4610      	mov	r0, r2
 8003292:	4619      	mov	r1, r3
 8003294:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003296:	2200      	movs	r2, #0
 8003298:	62bb      	str	r3, [r7, #40]	@ 0x28
 800329a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800329c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80032a0:	f7fd fc04 	bl	8000aac <__aeabi_uldivmod>
 80032a4:	4602      	mov	r2, r0
 80032a6:	460b      	mov	r3, r1
 80032a8:	4613      	mov	r3, r2
 80032aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80032ac:	e058      	b.n	8003360 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032ae:	4b38      	ldr	r3, [pc, #224]	@ (8003390 <HAL_RCC_GetSysClockFreq+0x200>)
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	099b      	lsrs	r3, r3, #6
 80032b4:	2200      	movs	r2, #0
 80032b6:	4618      	mov	r0, r3
 80032b8:	4611      	mov	r1, r2
 80032ba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80032be:	623b      	str	r3, [r7, #32]
 80032c0:	2300      	movs	r3, #0
 80032c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80032c4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80032c8:	4642      	mov	r2, r8
 80032ca:	464b      	mov	r3, r9
 80032cc:	f04f 0000 	mov.w	r0, #0
 80032d0:	f04f 0100 	mov.w	r1, #0
 80032d4:	0159      	lsls	r1, r3, #5
 80032d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032da:	0150      	lsls	r0, r2, #5
 80032dc:	4602      	mov	r2, r0
 80032de:	460b      	mov	r3, r1
 80032e0:	4641      	mov	r1, r8
 80032e2:	ebb2 0a01 	subs.w	sl, r2, r1
 80032e6:	4649      	mov	r1, r9
 80032e8:	eb63 0b01 	sbc.w	fp, r3, r1
 80032ec:	f04f 0200 	mov.w	r2, #0
 80032f0:	f04f 0300 	mov.w	r3, #0
 80032f4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80032f8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80032fc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003300:	ebb2 040a 	subs.w	r4, r2, sl
 8003304:	eb63 050b 	sbc.w	r5, r3, fp
 8003308:	f04f 0200 	mov.w	r2, #0
 800330c:	f04f 0300 	mov.w	r3, #0
 8003310:	00eb      	lsls	r3, r5, #3
 8003312:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003316:	00e2      	lsls	r2, r4, #3
 8003318:	4614      	mov	r4, r2
 800331a:	461d      	mov	r5, r3
 800331c:	4643      	mov	r3, r8
 800331e:	18e3      	adds	r3, r4, r3
 8003320:	603b      	str	r3, [r7, #0]
 8003322:	464b      	mov	r3, r9
 8003324:	eb45 0303 	adc.w	r3, r5, r3
 8003328:	607b      	str	r3, [r7, #4]
 800332a:	f04f 0200 	mov.w	r2, #0
 800332e:	f04f 0300 	mov.w	r3, #0
 8003332:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003336:	4629      	mov	r1, r5
 8003338:	028b      	lsls	r3, r1, #10
 800333a:	4621      	mov	r1, r4
 800333c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003340:	4621      	mov	r1, r4
 8003342:	028a      	lsls	r2, r1, #10
 8003344:	4610      	mov	r0, r2
 8003346:	4619      	mov	r1, r3
 8003348:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800334a:	2200      	movs	r2, #0
 800334c:	61bb      	str	r3, [r7, #24]
 800334e:	61fa      	str	r2, [r7, #28]
 8003350:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003354:	f7fd fbaa 	bl	8000aac <__aeabi_uldivmod>
 8003358:	4602      	mov	r2, r0
 800335a:	460b      	mov	r3, r1
 800335c:	4613      	mov	r3, r2
 800335e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003360:	4b0b      	ldr	r3, [pc, #44]	@ (8003390 <HAL_RCC_GetSysClockFreq+0x200>)
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	0c1b      	lsrs	r3, r3, #16
 8003366:	f003 0303 	and.w	r3, r3, #3
 800336a:	3301      	adds	r3, #1
 800336c:	005b      	lsls	r3, r3, #1
 800336e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003370:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003372:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003374:	fbb2 f3f3 	udiv	r3, r2, r3
 8003378:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800337a:	e002      	b.n	8003382 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800337c:	4b05      	ldr	r3, [pc, #20]	@ (8003394 <HAL_RCC_GetSysClockFreq+0x204>)
 800337e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003380:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003382:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003384:	4618      	mov	r0, r3
 8003386:	3750      	adds	r7, #80	@ 0x50
 8003388:	46bd      	mov	sp, r7
 800338a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800338e:	bf00      	nop
 8003390:	40023800 	.word	0x40023800
 8003394:	00f42400 	.word	0x00f42400
 8003398:	007a1200 	.word	0x007a1200

0800339c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800339c:	b480      	push	{r7}
 800339e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033a0:	4b03      	ldr	r3, [pc, #12]	@ (80033b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80033a2:	681b      	ldr	r3, [r3, #0]
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	2000000c 	.word	0x2000000c

080033b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80033b8:	f7ff fff0 	bl	800339c <HAL_RCC_GetHCLKFreq>
 80033bc:	4602      	mov	r2, r0
 80033be:	4b05      	ldr	r3, [pc, #20]	@ (80033d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	0a9b      	lsrs	r3, r3, #10
 80033c4:	f003 0307 	and.w	r3, r3, #7
 80033c8:	4903      	ldr	r1, [pc, #12]	@ (80033d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033ca:	5ccb      	ldrb	r3, [r1, r3]
 80033cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	40023800 	.word	0x40023800
 80033d8:	08004c94 	.word	0x08004c94

080033dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80033e0:	f7ff ffdc 	bl	800339c <HAL_RCC_GetHCLKFreq>
 80033e4:	4602      	mov	r2, r0
 80033e6:	4b05      	ldr	r3, [pc, #20]	@ (80033fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	0b5b      	lsrs	r3, r3, #13
 80033ec:	f003 0307 	and.w	r3, r3, #7
 80033f0:	4903      	ldr	r1, [pc, #12]	@ (8003400 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033f2:	5ccb      	ldrb	r3, [r1, r3]
 80033f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	40023800 	.word	0x40023800
 8003400:	08004c94 	.word	0x08004c94

08003404 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d101      	bne.n	8003416 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e03f      	b.n	8003496 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800341c:	b2db      	uxtb	r3, r3
 800341e:	2b00      	cmp	r3, #0
 8003420:	d106      	bne.n	8003430 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f7fe fc4a 	bl	8001cc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2224      	movs	r2, #36	@ 0x24
 8003434:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	68da      	ldr	r2, [r3, #12]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003446:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f000 f929 	bl	80036a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	691a      	ldr	r2, [r3, #16]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800345c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	695a      	ldr	r2, [r3, #20]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800346c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68da      	ldr	r2, [r3, #12]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800347c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2220      	movs	r2, #32
 8003488:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2220      	movs	r2, #32
 8003490:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003494:	2300      	movs	r3, #0
}
 8003496:	4618      	mov	r0, r3
 8003498:	3708      	adds	r7, #8
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}

0800349e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800349e:	b580      	push	{r7, lr}
 80034a0:	b08a      	sub	sp, #40	@ 0x28
 80034a2:	af02      	add	r7, sp, #8
 80034a4:	60f8      	str	r0, [r7, #12]
 80034a6:	60b9      	str	r1, [r7, #8]
 80034a8:	603b      	str	r3, [r7, #0]
 80034aa:	4613      	mov	r3, r2
 80034ac:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80034ae:	2300      	movs	r3, #0
 80034b0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	2b20      	cmp	r3, #32
 80034bc:	d17c      	bne.n	80035b8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d002      	beq.n	80034ca <HAL_UART_Transmit+0x2c>
 80034c4:	88fb      	ldrh	r3, [r7, #6]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d101      	bne.n	80034ce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e075      	b.n	80035ba <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d101      	bne.n	80034dc <HAL_UART_Transmit+0x3e>
 80034d8:	2302      	movs	r3, #2
 80034da:	e06e      	b.n	80035ba <HAL_UART_Transmit+0x11c>
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2200      	movs	r2, #0
 80034e8:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2221      	movs	r2, #33	@ 0x21
 80034ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034f2:	f7ff f85f 	bl	80025b4 <HAL_GetTick>
 80034f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	88fa      	ldrh	r2, [r7, #6]
 80034fc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	88fa      	ldrh	r2, [r7, #6]
 8003502:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800350c:	d108      	bne.n	8003520 <HAL_UART_Transmit+0x82>
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d104      	bne.n	8003520 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003516:	2300      	movs	r3, #0
 8003518:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	61bb      	str	r3, [r7, #24]
 800351e:	e003      	b.n	8003528 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003524:	2300      	movs	r3, #0
 8003526:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8003530:	e02a      	b.n	8003588 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	9300      	str	r3, [sp, #0]
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	2200      	movs	r2, #0
 800353a:	2180      	movs	r1, #128	@ 0x80
 800353c:	68f8      	ldr	r0, [r7, #12]
 800353e:	f000 f840 	bl	80035c2 <UART_WaitOnFlagUntilTimeout>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d001      	beq.n	800354c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e036      	b.n	80035ba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d10b      	bne.n	800356a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	881b      	ldrh	r3, [r3, #0]
 8003556:	461a      	mov	r2, r3
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003560:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	3302      	adds	r3, #2
 8003566:	61bb      	str	r3, [r7, #24]
 8003568:	e007      	b.n	800357a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	781a      	ldrb	r2, [r3, #0]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	3301      	adds	r3, #1
 8003578:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800357e:	b29b      	uxth	r3, r3
 8003580:	3b01      	subs	r3, #1
 8003582:	b29a      	uxth	r2, r3
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800358c:	b29b      	uxth	r3, r3
 800358e:	2b00      	cmp	r3, #0
 8003590:	d1cf      	bne.n	8003532 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	9300      	str	r3, [sp, #0]
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	2200      	movs	r2, #0
 800359a:	2140      	movs	r1, #64	@ 0x40
 800359c:	68f8      	ldr	r0, [r7, #12]
 800359e:	f000 f810 	bl	80035c2 <UART_WaitOnFlagUntilTimeout>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d001      	beq.n	80035ac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e006      	b.n	80035ba <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2220      	movs	r2, #32
 80035b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80035b4:	2300      	movs	r3, #0
 80035b6:	e000      	b.n	80035ba <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80035b8:	2302      	movs	r3, #2
  }
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3720      	adds	r7, #32
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}

080035c2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80035c2:	b580      	push	{r7, lr}
 80035c4:	b090      	sub	sp, #64	@ 0x40
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	60f8      	str	r0, [r7, #12]
 80035ca:	60b9      	str	r1, [r7, #8]
 80035cc:	603b      	str	r3, [r7, #0]
 80035ce:	4613      	mov	r3, r2
 80035d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035d2:	e050      	b.n	8003676 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80035d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80035da:	d04c      	beq.n	8003676 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80035dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d007      	beq.n	80035f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80035e2:	f7fe ffe7 	bl	80025b4 <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d241      	bcs.n	8003676 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	330c      	adds	r3, #12
 80035f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035fc:	e853 3f00 	ldrex	r3, [r3]
 8003600:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003604:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8003608:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	330c      	adds	r3, #12
 8003610:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003612:	637a      	str	r2, [r7, #52]	@ 0x34
 8003614:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003616:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003618:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800361a:	e841 2300 	strex	r3, r2, [r1]
 800361e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003622:	2b00      	cmp	r3, #0
 8003624:	d1e5      	bne.n	80035f2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	3314      	adds	r3, #20
 800362c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	e853 3f00 	ldrex	r3, [r3]
 8003634:	613b      	str	r3, [r7, #16]
   return(result);
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	f023 0301 	bic.w	r3, r3, #1
 800363c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	3314      	adds	r3, #20
 8003644:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003646:	623a      	str	r2, [r7, #32]
 8003648:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800364a:	69f9      	ldr	r1, [r7, #28]
 800364c:	6a3a      	ldr	r2, [r7, #32]
 800364e:	e841 2300 	strex	r3, r2, [r1]
 8003652:	61bb      	str	r3, [r7, #24]
   return(result);
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d1e5      	bne.n	8003626 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2220      	movs	r2, #32
 800365e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2220      	movs	r2, #32
 8003666:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e00f      	b.n	8003696 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	4013      	ands	r3, r2
 8003680:	68ba      	ldr	r2, [r7, #8]
 8003682:	429a      	cmp	r2, r3
 8003684:	bf0c      	ite	eq
 8003686:	2301      	moveq	r3, #1
 8003688:	2300      	movne	r3, #0
 800368a:	b2db      	uxtb	r3, r3
 800368c:	461a      	mov	r2, r3
 800368e:	79fb      	ldrb	r3, [r7, #7]
 8003690:	429a      	cmp	r2, r3
 8003692:	d09f      	beq.n	80035d4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3740      	adds	r7, #64	@ 0x40
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
	...

080036a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036a4:	b0c0      	sub	sp, #256	@ 0x100
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	691b      	ldr	r3, [r3, #16]
 80036b4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80036b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036bc:	68d9      	ldr	r1, [r3, #12]
 80036be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	ea40 0301 	orr.w	r3, r0, r1
 80036c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80036ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036ce:	689a      	ldr	r2, [r3, #8]
 80036d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	431a      	orrs	r2, r3
 80036d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036dc:	695b      	ldr	r3, [r3, #20]
 80036de:	431a      	orrs	r2, r3
 80036e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036e4:	69db      	ldr	r3, [r3, #28]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80036ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80036f8:	f021 010c 	bic.w	r1, r1, #12
 80036fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003706:	430b      	orrs	r3, r1
 8003708:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800370a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	695b      	ldr	r3, [r3, #20]
 8003712:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003716:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800371a:	6999      	ldr	r1, [r3, #24]
 800371c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	ea40 0301 	orr.w	r3, r0, r1
 8003726:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	4b8f      	ldr	r3, [pc, #572]	@ (800396c <UART_SetConfig+0x2cc>)
 8003730:	429a      	cmp	r2, r3
 8003732:	d005      	beq.n	8003740 <UART_SetConfig+0xa0>
 8003734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	4b8d      	ldr	r3, [pc, #564]	@ (8003970 <UART_SetConfig+0x2d0>)
 800373c:	429a      	cmp	r2, r3
 800373e:	d104      	bne.n	800374a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003740:	f7ff fe4c 	bl	80033dc <HAL_RCC_GetPCLK2Freq>
 8003744:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003748:	e003      	b.n	8003752 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800374a:	f7ff fe33 	bl	80033b4 <HAL_RCC_GetPCLK1Freq>
 800374e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003756:	69db      	ldr	r3, [r3, #28]
 8003758:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800375c:	f040 810c 	bne.w	8003978 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003760:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003764:	2200      	movs	r2, #0
 8003766:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800376a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800376e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003772:	4622      	mov	r2, r4
 8003774:	462b      	mov	r3, r5
 8003776:	1891      	adds	r1, r2, r2
 8003778:	65b9      	str	r1, [r7, #88]	@ 0x58
 800377a:	415b      	adcs	r3, r3
 800377c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800377e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003782:	4621      	mov	r1, r4
 8003784:	eb12 0801 	adds.w	r8, r2, r1
 8003788:	4629      	mov	r1, r5
 800378a:	eb43 0901 	adc.w	r9, r3, r1
 800378e:	f04f 0200 	mov.w	r2, #0
 8003792:	f04f 0300 	mov.w	r3, #0
 8003796:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800379a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800379e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037a2:	4690      	mov	r8, r2
 80037a4:	4699      	mov	r9, r3
 80037a6:	4623      	mov	r3, r4
 80037a8:	eb18 0303 	adds.w	r3, r8, r3
 80037ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80037b0:	462b      	mov	r3, r5
 80037b2:	eb49 0303 	adc.w	r3, r9, r3
 80037b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80037ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80037c6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80037ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80037ce:	460b      	mov	r3, r1
 80037d0:	18db      	adds	r3, r3, r3
 80037d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80037d4:	4613      	mov	r3, r2
 80037d6:	eb42 0303 	adc.w	r3, r2, r3
 80037da:	657b      	str	r3, [r7, #84]	@ 0x54
 80037dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80037e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80037e4:	f7fd f962 	bl	8000aac <__aeabi_uldivmod>
 80037e8:	4602      	mov	r2, r0
 80037ea:	460b      	mov	r3, r1
 80037ec:	4b61      	ldr	r3, [pc, #388]	@ (8003974 <UART_SetConfig+0x2d4>)
 80037ee:	fba3 2302 	umull	r2, r3, r3, r2
 80037f2:	095b      	lsrs	r3, r3, #5
 80037f4:	011c      	lsls	r4, r3, #4
 80037f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80037fa:	2200      	movs	r2, #0
 80037fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003800:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003804:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003808:	4642      	mov	r2, r8
 800380a:	464b      	mov	r3, r9
 800380c:	1891      	adds	r1, r2, r2
 800380e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003810:	415b      	adcs	r3, r3
 8003812:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003814:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003818:	4641      	mov	r1, r8
 800381a:	eb12 0a01 	adds.w	sl, r2, r1
 800381e:	4649      	mov	r1, r9
 8003820:	eb43 0b01 	adc.w	fp, r3, r1
 8003824:	f04f 0200 	mov.w	r2, #0
 8003828:	f04f 0300 	mov.w	r3, #0
 800382c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003830:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003834:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003838:	4692      	mov	sl, r2
 800383a:	469b      	mov	fp, r3
 800383c:	4643      	mov	r3, r8
 800383e:	eb1a 0303 	adds.w	r3, sl, r3
 8003842:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003846:	464b      	mov	r3, r9
 8003848:	eb4b 0303 	adc.w	r3, fp, r3
 800384c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800385c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003860:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003864:	460b      	mov	r3, r1
 8003866:	18db      	adds	r3, r3, r3
 8003868:	643b      	str	r3, [r7, #64]	@ 0x40
 800386a:	4613      	mov	r3, r2
 800386c:	eb42 0303 	adc.w	r3, r2, r3
 8003870:	647b      	str	r3, [r7, #68]	@ 0x44
 8003872:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003876:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800387a:	f7fd f917 	bl	8000aac <__aeabi_uldivmod>
 800387e:	4602      	mov	r2, r0
 8003880:	460b      	mov	r3, r1
 8003882:	4611      	mov	r1, r2
 8003884:	4b3b      	ldr	r3, [pc, #236]	@ (8003974 <UART_SetConfig+0x2d4>)
 8003886:	fba3 2301 	umull	r2, r3, r3, r1
 800388a:	095b      	lsrs	r3, r3, #5
 800388c:	2264      	movs	r2, #100	@ 0x64
 800388e:	fb02 f303 	mul.w	r3, r2, r3
 8003892:	1acb      	subs	r3, r1, r3
 8003894:	00db      	lsls	r3, r3, #3
 8003896:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800389a:	4b36      	ldr	r3, [pc, #216]	@ (8003974 <UART_SetConfig+0x2d4>)
 800389c:	fba3 2302 	umull	r2, r3, r3, r2
 80038a0:	095b      	lsrs	r3, r3, #5
 80038a2:	005b      	lsls	r3, r3, #1
 80038a4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80038a8:	441c      	add	r4, r3
 80038aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038ae:	2200      	movs	r2, #0
 80038b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80038b4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80038b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80038bc:	4642      	mov	r2, r8
 80038be:	464b      	mov	r3, r9
 80038c0:	1891      	adds	r1, r2, r2
 80038c2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80038c4:	415b      	adcs	r3, r3
 80038c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80038c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80038cc:	4641      	mov	r1, r8
 80038ce:	1851      	adds	r1, r2, r1
 80038d0:	6339      	str	r1, [r7, #48]	@ 0x30
 80038d2:	4649      	mov	r1, r9
 80038d4:	414b      	adcs	r3, r1
 80038d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80038d8:	f04f 0200 	mov.w	r2, #0
 80038dc:	f04f 0300 	mov.w	r3, #0
 80038e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80038e4:	4659      	mov	r1, fp
 80038e6:	00cb      	lsls	r3, r1, #3
 80038e8:	4651      	mov	r1, sl
 80038ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038ee:	4651      	mov	r1, sl
 80038f0:	00ca      	lsls	r2, r1, #3
 80038f2:	4610      	mov	r0, r2
 80038f4:	4619      	mov	r1, r3
 80038f6:	4603      	mov	r3, r0
 80038f8:	4642      	mov	r2, r8
 80038fa:	189b      	adds	r3, r3, r2
 80038fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003900:	464b      	mov	r3, r9
 8003902:	460a      	mov	r2, r1
 8003904:	eb42 0303 	adc.w	r3, r2, r3
 8003908:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800390c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003918:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800391c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003920:	460b      	mov	r3, r1
 8003922:	18db      	adds	r3, r3, r3
 8003924:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003926:	4613      	mov	r3, r2
 8003928:	eb42 0303 	adc.w	r3, r2, r3
 800392c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800392e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003932:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003936:	f7fd f8b9 	bl	8000aac <__aeabi_uldivmod>
 800393a:	4602      	mov	r2, r0
 800393c:	460b      	mov	r3, r1
 800393e:	4b0d      	ldr	r3, [pc, #52]	@ (8003974 <UART_SetConfig+0x2d4>)
 8003940:	fba3 1302 	umull	r1, r3, r3, r2
 8003944:	095b      	lsrs	r3, r3, #5
 8003946:	2164      	movs	r1, #100	@ 0x64
 8003948:	fb01 f303 	mul.w	r3, r1, r3
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	00db      	lsls	r3, r3, #3
 8003950:	3332      	adds	r3, #50	@ 0x32
 8003952:	4a08      	ldr	r2, [pc, #32]	@ (8003974 <UART_SetConfig+0x2d4>)
 8003954:	fba2 2303 	umull	r2, r3, r2, r3
 8003958:	095b      	lsrs	r3, r3, #5
 800395a:	f003 0207 	and.w	r2, r3, #7
 800395e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4422      	add	r2, r4
 8003966:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003968:	e106      	b.n	8003b78 <UART_SetConfig+0x4d8>
 800396a:	bf00      	nop
 800396c:	40011000 	.word	0x40011000
 8003970:	40011400 	.word	0x40011400
 8003974:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003978:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800397c:	2200      	movs	r2, #0
 800397e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003982:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003986:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800398a:	4642      	mov	r2, r8
 800398c:	464b      	mov	r3, r9
 800398e:	1891      	adds	r1, r2, r2
 8003990:	6239      	str	r1, [r7, #32]
 8003992:	415b      	adcs	r3, r3
 8003994:	627b      	str	r3, [r7, #36]	@ 0x24
 8003996:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800399a:	4641      	mov	r1, r8
 800399c:	1854      	adds	r4, r2, r1
 800399e:	4649      	mov	r1, r9
 80039a0:	eb43 0501 	adc.w	r5, r3, r1
 80039a4:	f04f 0200 	mov.w	r2, #0
 80039a8:	f04f 0300 	mov.w	r3, #0
 80039ac:	00eb      	lsls	r3, r5, #3
 80039ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039b2:	00e2      	lsls	r2, r4, #3
 80039b4:	4614      	mov	r4, r2
 80039b6:	461d      	mov	r5, r3
 80039b8:	4643      	mov	r3, r8
 80039ba:	18e3      	adds	r3, r4, r3
 80039bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80039c0:	464b      	mov	r3, r9
 80039c2:	eb45 0303 	adc.w	r3, r5, r3
 80039c6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80039ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80039d6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80039da:	f04f 0200 	mov.w	r2, #0
 80039de:	f04f 0300 	mov.w	r3, #0
 80039e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80039e6:	4629      	mov	r1, r5
 80039e8:	008b      	lsls	r3, r1, #2
 80039ea:	4621      	mov	r1, r4
 80039ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039f0:	4621      	mov	r1, r4
 80039f2:	008a      	lsls	r2, r1, #2
 80039f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80039f8:	f7fd f858 	bl	8000aac <__aeabi_uldivmod>
 80039fc:	4602      	mov	r2, r0
 80039fe:	460b      	mov	r3, r1
 8003a00:	4b60      	ldr	r3, [pc, #384]	@ (8003b84 <UART_SetConfig+0x4e4>)
 8003a02:	fba3 2302 	umull	r2, r3, r3, r2
 8003a06:	095b      	lsrs	r3, r3, #5
 8003a08:	011c      	lsls	r4, r3, #4
 8003a0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003a14:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003a18:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003a1c:	4642      	mov	r2, r8
 8003a1e:	464b      	mov	r3, r9
 8003a20:	1891      	adds	r1, r2, r2
 8003a22:	61b9      	str	r1, [r7, #24]
 8003a24:	415b      	adcs	r3, r3
 8003a26:	61fb      	str	r3, [r7, #28]
 8003a28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a2c:	4641      	mov	r1, r8
 8003a2e:	1851      	adds	r1, r2, r1
 8003a30:	6139      	str	r1, [r7, #16]
 8003a32:	4649      	mov	r1, r9
 8003a34:	414b      	adcs	r3, r1
 8003a36:	617b      	str	r3, [r7, #20]
 8003a38:	f04f 0200 	mov.w	r2, #0
 8003a3c:	f04f 0300 	mov.w	r3, #0
 8003a40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a44:	4659      	mov	r1, fp
 8003a46:	00cb      	lsls	r3, r1, #3
 8003a48:	4651      	mov	r1, sl
 8003a4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a4e:	4651      	mov	r1, sl
 8003a50:	00ca      	lsls	r2, r1, #3
 8003a52:	4610      	mov	r0, r2
 8003a54:	4619      	mov	r1, r3
 8003a56:	4603      	mov	r3, r0
 8003a58:	4642      	mov	r2, r8
 8003a5a:	189b      	adds	r3, r3, r2
 8003a5c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003a60:	464b      	mov	r3, r9
 8003a62:	460a      	mov	r2, r1
 8003a64:	eb42 0303 	adc.w	r3, r2, r3
 8003a68:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003a76:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003a78:	f04f 0200 	mov.w	r2, #0
 8003a7c:	f04f 0300 	mov.w	r3, #0
 8003a80:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003a84:	4649      	mov	r1, r9
 8003a86:	008b      	lsls	r3, r1, #2
 8003a88:	4641      	mov	r1, r8
 8003a8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a8e:	4641      	mov	r1, r8
 8003a90:	008a      	lsls	r2, r1, #2
 8003a92:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003a96:	f7fd f809 	bl	8000aac <__aeabi_uldivmod>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	460b      	mov	r3, r1
 8003a9e:	4611      	mov	r1, r2
 8003aa0:	4b38      	ldr	r3, [pc, #224]	@ (8003b84 <UART_SetConfig+0x4e4>)
 8003aa2:	fba3 2301 	umull	r2, r3, r3, r1
 8003aa6:	095b      	lsrs	r3, r3, #5
 8003aa8:	2264      	movs	r2, #100	@ 0x64
 8003aaa:	fb02 f303 	mul.w	r3, r2, r3
 8003aae:	1acb      	subs	r3, r1, r3
 8003ab0:	011b      	lsls	r3, r3, #4
 8003ab2:	3332      	adds	r3, #50	@ 0x32
 8003ab4:	4a33      	ldr	r2, [pc, #204]	@ (8003b84 <UART_SetConfig+0x4e4>)
 8003ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aba:	095b      	lsrs	r3, r3, #5
 8003abc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ac0:	441c      	add	r4, r3
 8003ac2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	673b      	str	r3, [r7, #112]	@ 0x70
 8003aca:	677a      	str	r2, [r7, #116]	@ 0x74
 8003acc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003ad0:	4642      	mov	r2, r8
 8003ad2:	464b      	mov	r3, r9
 8003ad4:	1891      	adds	r1, r2, r2
 8003ad6:	60b9      	str	r1, [r7, #8]
 8003ad8:	415b      	adcs	r3, r3
 8003ada:	60fb      	str	r3, [r7, #12]
 8003adc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ae0:	4641      	mov	r1, r8
 8003ae2:	1851      	adds	r1, r2, r1
 8003ae4:	6039      	str	r1, [r7, #0]
 8003ae6:	4649      	mov	r1, r9
 8003ae8:	414b      	adcs	r3, r1
 8003aea:	607b      	str	r3, [r7, #4]
 8003aec:	f04f 0200 	mov.w	r2, #0
 8003af0:	f04f 0300 	mov.w	r3, #0
 8003af4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003af8:	4659      	mov	r1, fp
 8003afa:	00cb      	lsls	r3, r1, #3
 8003afc:	4651      	mov	r1, sl
 8003afe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b02:	4651      	mov	r1, sl
 8003b04:	00ca      	lsls	r2, r1, #3
 8003b06:	4610      	mov	r0, r2
 8003b08:	4619      	mov	r1, r3
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	4642      	mov	r2, r8
 8003b0e:	189b      	adds	r3, r3, r2
 8003b10:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b12:	464b      	mov	r3, r9
 8003b14:	460a      	mov	r2, r1
 8003b16:	eb42 0303 	adc.w	r3, r2, r3
 8003b1a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	663b      	str	r3, [r7, #96]	@ 0x60
 8003b26:	667a      	str	r2, [r7, #100]	@ 0x64
 8003b28:	f04f 0200 	mov.w	r2, #0
 8003b2c:	f04f 0300 	mov.w	r3, #0
 8003b30:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003b34:	4649      	mov	r1, r9
 8003b36:	008b      	lsls	r3, r1, #2
 8003b38:	4641      	mov	r1, r8
 8003b3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b3e:	4641      	mov	r1, r8
 8003b40:	008a      	lsls	r2, r1, #2
 8003b42:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003b46:	f7fc ffb1 	bl	8000aac <__aeabi_uldivmod>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	4b0d      	ldr	r3, [pc, #52]	@ (8003b84 <UART_SetConfig+0x4e4>)
 8003b50:	fba3 1302 	umull	r1, r3, r3, r2
 8003b54:	095b      	lsrs	r3, r3, #5
 8003b56:	2164      	movs	r1, #100	@ 0x64
 8003b58:	fb01 f303 	mul.w	r3, r1, r3
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	011b      	lsls	r3, r3, #4
 8003b60:	3332      	adds	r3, #50	@ 0x32
 8003b62:	4a08      	ldr	r2, [pc, #32]	@ (8003b84 <UART_SetConfig+0x4e4>)
 8003b64:	fba2 2303 	umull	r2, r3, r2, r3
 8003b68:	095b      	lsrs	r3, r3, #5
 8003b6a:	f003 020f 	and.w	r2, r3, #15
 8003b6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4422      	add	r2, r4
 8003b76:	609a      	str	r2, [r3, #8]
}
 8003b78:	bf00      	nop
 8003b7a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b84:	51eb851f 	.word	0x51eb851f

08003b88 <std>:
 8003b88:	2300      	movs	r3, #0
 8003b8a:	b510      	push	{r4, lr}
 8003b8c:	4604      	mov	r4, r0
 8003b8e:	e9c0 3300 	strd	r3, r3, [r0]
 8003b92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003b96:	6083      	str	r3, [r0, #8]
 8003b98:	8181      	strh	r1, [r0, #12]
 8003b9a:	6643      	str	r3, [r0, #100]	@ 0x64
 8003b9c:	81c2      	strh	r2, [r0, #14]
 8003b9e:	6183      	str	r3, [r0, #24]
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	2208      	movs	r2, #8
 8003ba4:	305c      	adds	r0, #92	@ 0x5c
 8003ba6:	f000 f921 	bl	8003dec <memset>
 8003baa:	4b0d      	ldr	r3, [pc, #52]	@ (8003be0 <std+0x58>)
 8003bac:	6263      	str	r3, [r4, #36]	@ 0x24
 8003bae:	4b0d      	ldr	r3, [pc, #52]	@ (8003be4 <std+0x5c>)
 8003bb0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003bb2:	4b0d      	ldr	r3, [pc, #52]	@ (8003be8 <std+0x60>)
 8003bb4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003bb6:	4b0d      	ldr	r3, [pc, #52]	@ (8003bec <std+0x64>)
 8003bb8:	6323      	str	r3, [r4, #48]	@ 0x30
 8003bba:	4b0d      	ldr	r3, [pc, #52]	@ (8003bf0 <std+0x68>)
 8003bbc:	6224      	str	r4, [r4, #32]
 8003bbe:	429c      	cmp	r4, r3
 8003bc0:	d006      	beq.n	8003bd0 <std+0x48>
 8003bc2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003bc6:	4294      	cmp	r4, r2
 8003bc8:	d002      	beq.n	8003bd0 <std+0x48>
 8003bca:	33d0      	adds	r3, #208	@ 0xd0
 8003bcc:	429c      	cmp	r4, r3
 8003bce:	d105      	bne.n	8003bdc <std+0x54>
 8003bd0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003bd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003bd8:	f000 b93a 	b.w	8003e50 <__retarget_lock_init_recursive>
 8003bdc:	bd10      	pop	{r4, pc}
 8003bde:	bf00      	nop
 8003be0:	080046a9 	.word	0x080046a9
 8003be4:	080046cb 	.word	0x080046cb
 8003be8:	08004703 	.word	0x08004703
 8003bec:	08004727 	.word	0x08004727
 8003bf0:	2000041c 	.word	0x2000041c

08003bf4 <stdio_exit_handler>:
 8003bf4:	4a02      	ldr	r2, [pc, #8]	@ (8003c00 <stdio_exit_handler+0xc>)
 8003bf6:	4903      	ldr	r1, [pc, #12]	@ (8003c04 <stdio_exit_handler+0x10>)
 8003bf8:	4803      	ldr	r0, [pc, #12]	@ (8003c08 <stdio_exit_handler+0x14>)
 8003bfa:	f000 b869 	b.w	8003cd0 <_fwalk_sglue>
 8003bfe:	bf00      	nop
 8003c00:	20000018 	.word	0x20000018
 8003c04:	08004641 	.word	0x08004641
 8003c08:	20000028 	.word	0x20000028

08003c0c <cleanup_stdio>:
 8003c0c:	6841      	ldr	r1, [r0, #4]
 8003c0e:	4b0c      	ldr	r3, [pc, #48]	@ (8003c40 <cleanup_stdio+0x34>)
 8003c10:	4299      	cmp	r1, r3
 8003c12:	b510      	push	{r4, lr}
 8003c14:	4604      	mov	r4, r0
 8003c16:	d001      	beq.n	8003c1c <cleanup_stdio+0x10>
 8003c18:	f000 fd12 	bl	8004640 <_fflush_r>
 8003c1c:	68a1      	ldr	r1, [r4, #8]
 8003c1e:	4b09      	ldr	r3, [pc, #36]	@ (8003c44 <cleanup_stdio+0x38>)
 8003c20:	4299      	cmp	r1, r3
 8003c22:	d002      	beq.n	8003c2a <cleanup_stdio+0x1e>
 8003c24:	4620      	mov	r0, r4
 8003c26:	f000 fd0b 	bl	8004640 <_fflush_r>
 8003c2a:	68e1      	ldr	r1, [r4, #12]
 8003c2c:	4b06      	ldr	r3, [pc, #24]	@ (8003c48 <cleanup_stdio+0x3c>)
 8003c2e:	4299      	cmp	r1, r3
 8003c30:	d004      	beq.n	8003c3c <cleanup_stdio+0x30>
 8003c32:	4620      	mov	r0, r4
 8003c34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c38:	f000 bd02 	b.w	8004640 <_fflush_r>
 8003c3c:	bd10      	pop	{r4, pc}
 8003c3e:	bf00      	nop
 8003c40:	2000041c 	.word	0x2000041c
 8003c44:	20000484 	.word	0x20000484
 8003c48:	200004ec 	.word	0x200004ec

08003c4c <global_stdio_init.part.0>:
 8003c4c:	b510      	push	{r4, lr}
 8003c4e:	4b0b      	ldr	r3, [pc, #44]	@ (8003c7c <global_stdio_init.part.0+0x30>)
 8003c50:	4c0b      	ldr	r4, [pc, #44]	@ (8003c80 <global_stdio_init.part.0+0x34>)
 8003c52:	4a0c      	ldr	r2, [pc, #48]	@ (8003c84 <global_stdio_init.part.0+0x38>)
 8003c54:	601a      	str	r2, [r3, #0]
 8003c56:	4620      	mov	r0, r4
 8003c58:	2200      	movs	r2, #0
 8003c5a:	2104      	movs	r1, #4
 8003c5c:	f7ff ff94 	bl	8003b88 <std>
 8003c60:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003c64:	2201      	movs	r2, #1
 8003c66:	2109      	movs	r1, #9
 8003c68:	f7ff ff8e 	bl	8003b88 <std>
 8003c6c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003c70:	2202      	movs	r2, #2
 8003c72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c76:	2112      	movs	r1, #18
 8003c78:	f7ff bf86 	b.w	8003b88 <std>
 8003c7c:	20000554 	.word	0x20000554
 8003c80:	2000041c 	.word	0x2000041c
 8003c84:	08003bf5 	.word	0x08003bf5

08003c88 <__sfp_lock_acquire>:
 8003c88:	4801      	ldr	r0, [pc, #4]	@ (8003c90 <__sfp_lock_acquire+0x8>)
 8003c8a:	f000 b8e2 	b.w	8003e52 <__retarget_lock_acquire_recursive>
 8003c8e:	bf00      	nop
 8003c90:	20000559 	.word	0x20000559

08003c94 <__sfp_lock_release>:
 8003c94:	4801      	ldr	r0, [pc, #4]	@ (8003c9c <__sfp_lock_release+0x8>)
 8003c96:	f000 b8dd 	b.w	8003e54 <__retarget_lock_release_recursive>
 8003c9a:	bf00      	nop
 8003c9c:	20000559 	.word	0x20000559

08003ca0 <__sinit>:
 8003ca0:	b510      	push	{r4, lr}
 8003ca2:	4604      	mov	r4, r0
 8003ca4:	f7ff fff0 	bl	8003c88 <__sfp_lock_acquire>
 8003ca8:	6a23      	ldr	r3, [r4, #32]
 8003caa:	b11b      	cbz	r3, 8003cb4 <__sinit+0x14>
 8003cac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cb0:	f7ff bff0 	b.w	8003c94 <__sfp_lock_release>
 8003cb4:	4b04      	ldr	r3, [pc, #16]	@ (8003cc8 <__sinit+0x28>)
 8003cb6:	6223      	str	r3, [r4, #32]
 8003cb8:	4b04      	ldr	r3, [pc, #16]	@ (8003ccc <__sinit+0x2c>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d1f5      	bne.n	8003cac <__sinit+0xc>
 8003cc0:	f7ff ffc4 	bl	8003c4c <global_stdio_init.part.0>
 8003cc4:	e7f2      	b.n	8003cac <__sinit+0xc>
 8003cc6:	bf00      	nop
 8003cc8:	08003c0d 	.word	0x08003c0d
 8003ccc:	20000554 	.word	0x20000554

08003cd0 <_fwalk_sglue>:
 8003cd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003cd4:	4607      	mov	r7, r0
 8003cd6:	4688      	mov	r8, r1
 8003cd8:	4614      	mov	r4, r2
 8003cda:	2600      	movs	r6, #0
 8003cdc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003ce0:	f1b9 0901 	subs.w	r9, r9, #1
 8003ce4:	d505      	bpl.n	8003cf2 <_fwalk_sglue+0x22>
 8003ce6:	6824      	ldr	r4, [r4, #0]
 8003ce8:	2c00      	cmp	r4, #0
 8003cea:	d1f7      	bne.n	8003cdc <_fwalk_sglue+0xc>
 8003cec:	4630      	mov	r0, r6
 8003cee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003cf2:	89ab      	ldrh	r3, [r5, #12]
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d907      	bls.n	8003d08 <_fwalk_sglue+0x38>
 8003cf8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003cfc:	3301      	adds	r3, #1
 8003cfe:	d003      	beq.n	8003d08 <_fwalk_sglue+0x38>
 8003d00:	4629      	mov	r1, r5
 8003d02:	4638      	mov	r0, r7
 8003d04:	47c0      	blx	r8
 8003d06:	4306      	orrs	r6, r0
 8003d08:	3568      	adds	r5, #104	@ 0x68
 8003d0a:	e7e9      	b.n	8003ce0 <_fwalk_sglue+0x10>

08003d0c <iprintf>:
 8003d0c:	b40f      	push	{r0, r1, r2, r3}
 8003d0e:	b507      	push	{r0, r1, r2, lr}
 8003d10:	4906      	ldr	r1, [pc, #24]	@ (8003d2c <iprintf+0x20>)
 8003d12:	ab04      	add	r3, sp, #16
 8003d14:	6808      	ldr	r0, [r1, #0]
 8003d16:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d1a:	6881      	ldr	r1, [r0, #8]
 8003d1c:	9301      	str	r3, [sp, #4]
 8003d1e:	f000 f8c3 	bl	8003ea8 <_vfiprintf_r>
 8003d22:	b003      	add	sp, #12
 8003d24:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d28:	b004      	add	sp, #16
 8003d2a:	4770      	bx	lr
 8003d2c:	20000024 	.word	0x20000024

08003d30 <_puts_r>:
 8003d30:	6a03      	ldr	r3, [r0, #32]
 8003d32:	b570      	push	{r4, r5, r6, lr}
 8003d34:	6884      	ldr	r4, [r0, #8]
 8003d36:	4605      	mov	r5, r0
 8003d38:	460e      	mov	r6, r1
 8003d3a:	b90b      	cbnz	r3, 8003d40 <_puts_r+0x10>
 8003d3c:	f7ff ffb0 	bl	8003ca0 <__sinit>
 8003d40:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003d42:	07db      	lsls	r3, r3, #31
 8003d44:	d405      	bmi.n	8003d52 <_puts_r+0x22>
 8003d46:	89a3      	ldrh	r3, [r4, #12]
 8003d48:	0598      	lsls	r0, r3, #22
 8003d4a:	d402      	bmi.n	8003d52 <_puts_r+0x22>
 8003d4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003d4e:	f000 f880 	bl	8003e52 <__retarget_lock_acquire_recursive>
 8003d52:	89a3      	ldrh	r3, [r4, #12]
 8003d54:	0719      	lsls	r1, r3, #28
 8003d56:	d502      	bpl.n	8003d5e <_puts_r+0x2e>
 8003d58:	6923      	ldr	r3, [r4, #16]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d135      	bne.n	8003dca <_puts_r+0x9a>
 8003d5e:	4621      	mov	r1, r4
 8003d60:	4628      	mov	r0, r5
 8003d62:	f000 fd23 	bl	80047ac <__swsetup_r>
 8003d66:	b380      	cbz	r0, 8003dca <_puts_r+0x9a>
 8003d68:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8003d6c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003d6e:	07da      	lsls	r2, r3, #31
 8003d70:	d405      	bmi.n	8003d7e <_puts_r+0x4e>
 8003d72:	89a3      	ldrh	r3, [r4, #12]
 8003d74:	059b      	lsls	r3, r3, #22
 8003d76:	d402      	bmi.n	8003d7e <_puts_r+0x4e>
 8003d78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003d7a:	f000 f86b 	bl	8003e54 <__retarget_lock_release_recursive>
 8003d7e:	4628      	mov	r0, r5
 8003d80:	bd70      	pop	{r4, r5, r6, pc}
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	da04      	bge.n	8003d90 <_puts_r+0x60>
 8003d86:	69a2      	ldr	r2, [r4, #24]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	dc17      	bgt.n	8003dbc <_puts_r+0x8c>
 8003d8c:	290a      	cmp	r1, #10
 8003d8e:	d015      	beq.n	8003dbc <_puts_r+0x8c>
 8003d90:	6823      	ldr	r3, [r4, #0]
 8003d92:	1c5a      	adds	r2, r3, #1
 8003d94:	6022      	str	r2, [r4, #0]
 8003d96:	7019      	strb	r1, [r3, #0]
 8003d98:	68a3      	ldr	r3, [r4, #8]
 8003d9a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003d9e:	3b01      	subs	r3, #1
 8003da0:	60a3      	str	r3, [r4, #8]
 8003da2:	2900      	cmp	r1, #0
 8003da4:	d1ed      	bne.n	8003d82 <_puts_r+0x52>
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	da11      	bge.n	8003dce <_puts_r+0x9e>
 8003daa:	4622      	mov	r2, r4
 8003dac:	210a      	movs	r1, #10
 8003dae:	4628      	mov	r0, r5
 8003db0:	f000 fcbd 	bl	800472e <__swbuf_r>
 8003db4:	3001      	adds	r0, #1
 8003db6:	d0d7      	beq.n	8003d68 <_puts_r+0x38>
 8003db8:	250a      	movs	r5, #10
 8003dba:	e7d7      	b.n	8003d6c <_puts_r+0x3c>
 8003dbc:	4622      	mov	r2, r4
 8003dbe:	4628      	mov	r0, r5
 8003dc0:	f000 fcb5 	bl	800472e <__swbuf_r>
 8003dc4:	3001      	adds	r0, #1
 8003dc6:	d1e7      	bne.n	8003d98 <_puts_r+0x68>
 8003dc8:	e7ce      	b.n	8003d68 <_puts_r+0x38>
 8003dca:	3e01      	subs	r6, #1
 8003dcc:	e7e4      	b.n	8003d98 <_puts_r+0x68>
 8003dce:	6823      	ldr	r3, [r4, #0]
 8003dd0:	1c5a      	adds	r2, r3, #1
 8003dd2:	6022      	str	r2, [r4, #0]
 8003dd4:	220a      	movs	r2, #10
 8003dd6:	701a      	strb	r2, [r3, #0]
 8003dd8:	e7ee      	b.n	8003db8 <_puts_r+0x88>
	...

08003ddc <puts>:
 8003ddc:	4b02      	ldr	r3, [pc, #8]	@ (8003de8 <puts+0xc>)
 8003dde:	4601      	mov	r1, r0
 8003de0:	6818      	ldr	r0, [r3, #0]
 8003de2:	f7ff bfa5 	b.w	8003d30 <_puts_r>
 8003de6:	bf00      	nop
 8003de8:	20000024 	.word	0x20000024

08003dec <memset>:
 8003dec:	4402      	add	r2, r0
 8003dee:	4603      	mov	r3, r0
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d100      	bne.n	8003df6 <memset+0xa>
 8003df4:	4770      	bx	lr
 8003df6:	f803 1b01 	strb.w	r1, [r3], #1
 8003dfa:	e7f9      	b.n	8003df0 <memset+0x4>

08003dfc <__errno>:
 8003dfc:	4b01      	ldr	r3, [pc, #4]	@ (8003e04 <__errno+0x8>)
 8003dfe:	6818      	ldr	r0, [r3, #0]
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop
 8003e04:	20000024 	.word	0x20000024

08003e08 <__libc_init_array>:
 8003e08:	b570      	push	{r4, r5, r6, lr}
 8003e0a:	4d0d      	ldr	r5, [pc, #52]	@ (8003e40 <__libc_init_array+0x38>)
 8003e0c:	4c0d      	ldr	r4, [pc, #52]	@ (8003e44 <__libc_init_array+0x3c>)
 8003e0e:	1b64      	subs	r4, r4, r5
 8003e10:	10a4      	asrs	r4, r4, #2
 8003e12:	2600      	movs	r6, #0
 8003e14:	42a6      	cmp	r6, r4
 8003e16:	d109      	bne.n	8003e2c <__libc_init_array+0x24>
 8003e18:	4d0b      	ldr	r5, [pc, #44]	@ (8003e48 <__libc_init_array+0x40>)
 8003e1a:	4c0c      	ldr	r4, [pc, #48]	@ (8003e4c <__libc_init_array+0x44>)
 8003e1c:	f000 fe86 	bl	8004b2c <_init>
 8003e20:	1b64      	subs	r4, r4, r5
 8003e22:	10a4      	asrs	r4, r4, #2
 8003e24:	2600      	movs	r6, #0
 8003e26:	42a6      	cmp	r6, r4
 8003e28:	d105      	bne.n	8003e36 <__libc_init_array+0x2e>
 8003e2a:	bd70      	pop	{r4, r5, r6, pc}
 8003e2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e30:	4798      	blx	r3
 8003e32:	3601      	adds	r6, #1
 8003e34:	e7ee      	b.n	8003e14 <__libc_init_array+0xc>
 8003e36:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e3a:	4798      	blx	r3
 8003e3c:	3601      	adds	r6, #1
 8003e3e:	e7f2      	b.n	8003e26 <__libc_init_array+0x1e>
 8003e40:	08004cd8 	.word	0x08004cd8
 8003e44:	08004cd8 	.word	0x08004cd8
 8003e48:	08004cd8 	.word	0x08004cd8
 8003e4c:	08004cdc 	.word	0x08004cdc

08003e50 <__retarget_lock_init_recursive>:
 8003e50:	4770      	bx	lr

08003e52 <__retarget_lock_acquire_recursive>:
 8003e52:	4770      	bx	lr

08003e54 <__retarget_lock_release_recursive>:
 8003e54:	4770      	bx	lr

08003e56 <__sfputc_r>:
 8003e56:	6893      	ldr	r3, [r2, #8]
 8003e58:	3b01      	subs	r3, #1
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	b410      	push	{r4}
 8003e5e:	6093      	str	r3, [r2, #8]
 8003e60:	da08      	bge.n	8003e74 <__sfputc_r+0x1e>
 8003e62:	6994      	ldr	r4, [r2, #24]
 8003e64:	42a3      	cmp	r3, r4
 8003e66:	db01      	blt.n	8003e6c <__sfputc_r+0x16>
 8003e68:	290a      	cmp	r1, #10
 8003e6a:	d103      	bne.n	8003e74 <__sfputc_r+0x1e>
 8003e6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003e70:	f000 bc5d 	b.w	800472e <__swbuf_r>
 8003e74:	6813      	ldr	r3, [r2, #0]
 8003e76:	1c58      	adds	r0, r3, #1
 8003e78:	6010      	str	r0, [r2, #0]
 8003e7a:	7019      	strb	r1, [r3, #0]
 8003e7c:	4608      	mov	r0, r1
 8003e7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003e82:	4770      	bx	lr

08003e84 <__sfputs_r>:
 8003e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e86:	4606      	mov	r6, r0
 8003e88:	460f      	mov	r7, r1
 8003e8a:	4614      	mov	r4, r2
 8003e8c:	18d5      	adds	r5, r2, r3
 8003e8e:	42ac      	cmp	r4, r5
 8003e90:	d101      	bne.n	8003e96 <__sfputs_r+0x12>
 8003e92:	2000      	movs	r0, #0
 8003e94:	e007      	b.n	8003ea6 <__sfputs_r+0x22>
 8003e96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e9a:	463a      	mov	r2, r7
 8003e9c:	4630      	mov	r0, r6
 8003e9e:	f7ff ffda 	bl	8003e56 <__sfputc_r>
 8003ea2:	1c43      	adds	r3, r0, #1
 8003ea4:	d1f3      	bne.n	8003e8e <__sfputs_r+0xa>
 8003ea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003ea8 <_vfiprintf_r>:
 8003ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003eac:	460d      	mov	r5, r1
 8003eae:	b09d      	sub	sp, #116	@ 0x74
 8003eb0:	4614      	mov	r4, r2
 8003eb2:	4698      	mov	r8, r3
 8003eb4:	4606      	mov	r6, r0
 8003eb6:	b118      	cbz	r0, 8003ec0 <_vfiprintf_r+0x18>
 8003eb8:	6a03      	ldr	r3, [r0, #32]
 8003eba:	b90b      	cbnz	r3, 8003ec0 <_vfiprintf_r+0x18>
 8003ebc:	f7ff fef0 	bl	8003ca0 <__sinit>
 8003ec0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003ec2:	07d9      	lsls	r1, r3, #31
 8003ec4:	d405      	bmi.n	8003ed2 <_vfiprintf_r+0x2a>
 8003ec6:	89ab      	ldrh	r3, [r5, #12]
 8003ec8:	059a      	lsls	r2, r3, #22
 8003eca:	d402      	bmi.n	8003ed2 <_vfiprintf_r+0x2a>
 8003ecc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003ece:	f7ff ffc0 	bl	8003e52 <__retarget_lock_acquire_recursive>
 8003ed2:	89ab      	ldrh	r3, [r5, #12]
 8003ed4:	071b      	lsls	r3, r3, #28
 8003ed6:	d501      	bpl.n	8003edc <_vfiprintf_r+0x34>
 8003ed8:	692b      	ldr	r3, [r5, #16]
 8003eda:	b99b      	cbnz	r3, 8003f04 <_vfiprintf_r+0x5c>
 8003edc:	4629      	mov	r1, r5
 8003ede:	4630      	mov	r0, r6
 8003ee0:	f000 fc64 	bl	80047ac <__swsetup_r>
 8003ee4:	b170      	cbz	r0, 8003f04 <_vfiprintf_r+0x5c>
 8003ee6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003ee8:	07dc      	lsls	r4, r3, #31
 8003eea:	d504      	bpl.n	8003ef6 <_vfiprintf_r+0x4e>
 8003eec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003ef0:	b01d      	add	sp, #116	@ 0x74
 8003ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ef6:	89ab      	ldrh	r3, [r5, #12]
 8003ef8:	0598      	lsls	r0, r3, #22
 8003efa:	d4f7      	bmi.n	8003eec <_vfiprintf_r+0x44>
 8003efc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003efe:	f7ff ffa9 	bl	8003e54 <__retarget_lock_release_recursive>
 8003f02:	e7f3      	b.n	8003eec <_vfiprintf_r+0x44>
 8003f04:	2300      	movs	r3, #0
 8003f06:	9309      	str	r3, [sp, #36]	@ 0x24
 8003f08:	2320      	movs	r3, #32
 8003f0a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003f0e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f12:	2330      	movs	r3, #48	@ 0x30
 8003f14:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80040c4 <_vfiprintf_r+0x21c>
 8003f18:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003f1c:	f04f 0901 	mov.w	r9, #1
 8003f20:	4623      	mov	r3, r4
 8003f22:	469a      	mov	sl, r3
 8003f24:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f28:	b10a      	cbz	r2, 8003f2e <_vfiprintf_r+0x86>
 8003f2a:	2a25      	cmp	r2, #37	@ 0x25
 8003f2c:	d1f9      	bne.n	8003f22 <_vfiprintf_r+0x7a>
 8003f2e:	ebba 0b04 	subs.w	fp, sl, r4
 8003f32:	d00b      	beq.n	8003f4c <_vfiprintf_r+0xa4>
 8003f34:	465b      	mov	r3, fp
 8003f36:	4622      	mov	r2, r4
 8003f38:	4629      	mov	r1, r5
 8003f3a:	4630      	mov	r0, r6
 8003f3c:	f7ff ffa2 	bl	8003e84 <__sfputs_r>
 8003f40:	3001      	adds	r0, #1
 8003f42:	f000 80a7 	beq.w	8004094 <_vfiprintf_r+0x1ec>
 8003f46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003f48:	445a      	add	r2, fp
 8003f4a:	9209      	str	r2, [sp, #36]	@ 0x24
 8003f4c:	f89a 3000 	ldrb.w	r3, [sl]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	f000 809f 	beq.w	8004094 <_vfiprintf_r+0x1ec>
 8003f56:	2300      	movs	r3, #0
 8003f58:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003f5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f60:	f10a 0a01 	add.w	sl, sl, #1
 8003f64:	9304      	str	r3, [sp, #16]
 8003f66:	9307      	str	r3, [sp, #28]
 8003f68:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003f6c:	931a      	str	r3, [sp, #104]	@ 0x68
 8003f6e:	4654      	mov	r4, sl
 8003f70:	2205      	movs	r2, #5
 8003f72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f76:	4853      	ldr	r0, [pc, #332]	@ (80040c4 <_vfiprintf_r+0x21c>)
 8003f78:	f7fc f952 	bl	8000220 <memchr>
 8003f7c:	9a04      	ldr	r2, [sp, #16]
 8003f7e:	b9d8      	cbnz	r0, 8003fb8 <_vfiprintf_r+0x110>
 8003f80:	06d1      	lsls	r1, r2, #27
 8003f82:	bf44      	itt	mi
 8003f84:	2320      	movmi	r3, #32
 8003f86:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003f8a:	0713      	lsls	r3, r2, #28
 8003f8c:	bf44      	itt	mi
 8003f8e:	232b      	movmi	r3, #43	@ 0x2b
 8003f90:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003f94:	f89a 3000 	ldrb.w	r3, [sl]
 8003f98:	2b2a      	cmp	r3, #42	@ 0x2a
 8003f9a:	d015      	beq.n	8003fc8 <_vfiprintf_r+0x120>
 8003f9c:	9a07      	ldr	r2, [sp, #28]
 8003f9e:	4654      	mov	r4, sl
 8003fa0:	2000      	movs	r0, #0
 8003fa2:	f04f 0c0a 	mov.w	ip, #10
 8003fa6:	4621      	mov	r1, r4
 8003fa8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003fac:	3b30      	subs	r3, #48	@ 0x30
 8003fae:	2b09      	cmp	r3, #9
 8003fb0:	d94b      	bls.n	800404a <_vfiprintf_r+0x1a2>
 8003fb2:	b1b0      	cbz	r0, 8003fe2 <_vfiprintf_r+0x13a>
 8003fb4:	9207      	str	r2, [sp, #28]
 8003fb6:	e014      	b.n	8003fe2 <_vfiprintf_r+0x13a>
 8003fb8:	eba0 0308 	sub.w	r3, r0, r8
 8003fbc:	fa09 f303 	lsl.w	r3, r9, r3
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	9304      	str	r3, [sp, #16]
 8003fc4:	46a2      	mov	sl, r4
 8003fc6:	e7d2      	b.n	8003f6e <_vfiprintf_r+0xc6>
 8003fc8:	9b03      	ldr	r3, [sp, #12]
 8003fca:	1d19      	adds	r1, r3, #4
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	9103      	str	r1, [sp, #12]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	bfbb      	ittet	lt
 8003fd4:	425b      	neglt	r3, r3
 8003fd6:	f042 0202 	orrlt.w	r2, r2, #2
 8003fda:	9307      	strge	r3, [sp, #28]
 8003fdc:	9307      	strlt	r3, [sp, #28]
 8003fde:	bfb8      	it	lt
 8003fe0:	9204      	strlt	r2, [sp, #16]
 8003fe2:	7823      	ldrb	r3, [r4, #0]
 8003fe4:	2b2e      	cmp	r3, #46	@ 0x2e
 8003fe6:	d10a      	bne.n	8003ffe <_vfiprintf_r+0x156>
 8003fe8:	7863      	ldrb	r3, [r4, #1]
 8003fea:	2b2a      	cmp	r3, #42	@ 0x2a
 8003fec:	d132      	bne.n	8004054 <_vfiprintf_r+0x1ac>
 8003fee:	9b03      	ldr	r3, [sp, #12]
 8003ff0:	1d1a      	adds	r2, r3, #4
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	9203      	str	r2, [sp, #12]
 8003ff6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003ffa:	3402      	adds	r4, #2
 8003ffc:	9305      	str	r3, [sp, #20]
 8003ffe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80040d4 <_vfiprintf_r+0x22c>
 8004002:	7821      	ldrb	r1, [r4, #0]
 8004004:	2203      	movs	r2, #3
 8004006:	4650      	mov	r0, sl
 8004008:	f7fc f90a 	bl	8000220 <memchr>
 800400c:	b138      	cbz	r0, 800401e <_vfiprintf_r+0x176>
 800400e:	9b04      	ldr	r3, [sp, #16]
 8004010:	eba0 000a 	sub.w	r0, r0, sl
 8004014:	2240      	movs	r2, #64	@ 0x40
 8004016:	4082      	lsls	r2, r0
 8004018:	4313      	orrs	r3, r2
 800401a:	3401      	adds	r4, #1
 800401c:	9304      	str	r3, [sp, #16]
 800401e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004022:	4829      	ldr	r0, [pc, #164]	@ (80040c8 <_vfiprintf_r+0x220>)
 8004024:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004028:	2206      	movs	r2, #6
 800402a:	f7fc f8f9 	bl	8000220 <memchr>
 800402e:	2800      	cmp	r0, #0
 8004030:	d03f      	beq.n	80040b2 <_vfiprintf_r+0x20a>
 8004032:	4b26      	ldr	r3, [pc, #152]	@ (80040cc <_vfiprintf_r+0x224>)
 8004034:	bb1b      	cbnz	r3, 800407e <_vfiprintf_r+0x1d6>
 8004036:	9b03      	ldr	r3, [sp, #12]
 8004038:	3307      	adds	r3, #7
 800403a:	f023 0307 	bic.w	r3, r3, #7
 800403e:	3308      	adds	r3, #8
 8004040:	9303      	str	r3, [sp, #12]
 8004042:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004044:	443b      	add	r3, r7
 8004046:	9309      	str	r3, [sp, #36]	@ 0x24
 8004048:	e76a      	b.n	8003f20 <_vfiprintf_r+0x78>
 800404a:	fb0c 3202 	mla	r2, ip, r2, r3
 800404e:	460c      	mov	r4, r1
 8004050:	2001      	movs	r0, #1
 8004052:	e7a8      	b.n	8003fa6 <_vfiprintf_r+0xfe>
 8004054:	2300      	movs	r3, #0
 8004056:	3401      	adds	r4, #1
 8004058:	9305      	str	r3, [sp, #20]
 800405a:	4619      	mov	r1, r3
 800405c:	f04f 0c0a 	mov.w	ip, #10
 8004060:	4620      	mov	r0, r4
 8004062:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004066:	3a30      	subs	r2, #48	@ 0x30
 8004068:	2a09      	cmp	r2, #9
 800406a:	d903      	bls.n	8004074 <_vfiprintf_r+0x1cc>
 800406c:	2b00      	cmp	r3, #0
 800406e:	d0c6      	beq.n	8003ffe <_vfiprintf_r+0x156>
 8004070:	9105      	str	r1, [sp, #20]
 8004072:	e7c4      	b.n	8003ffe <_vfiprintf_r+0x156>
 8004074:	fb0c 2101 	mla	r1, ip, r1, r2
 8004078:	4604      	mov	r4, r0
 800407a:	2301      	movs	r3, #1
 800407c:	e7f0      	b.n	8004060 <_vfiprintf_r+0x1b8>
 800407e:	ab03      	add	r3, sp, #12
 8004080:	9300      	str	r3, [sp, #0]
 8004082:	462a      	mov	r2, r5
 8004084:	4b12      	ldr	r3, [pc, #72]	@ (80040d0 <_vfiprintf_r+0x228>)
 8004086:	a904      	add	r1, sp, #16
 8004088:	4630      	mov	r0, r6
 800408a:	f3af 8000 	nop.w
 800408e:	4607      	mov	r7, r0
 8004090:	1c78      	adds	r0, r7, #1
 8004092:	d1d6      	bne.n	8004042 <_vfiprintf_r+0x19a>
 8004094:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004096:	07d9      	lsls	r1, r3, #31
 8004098:	d405      	bmi.n	80040a6 <_vfiprintf_r+0x1fe>
 800409a:	89ab      	ldrh	r3, [r5, #12]
 800409c:	059a      	lsls	r2, r3, #22
 800409e:	d402      	bmi.n	80040a6 <_vfiprintf_r+0x1fe>
 80040a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80040a2:	f7ff fed7 	bl	8003e54 <__retarget_lock_release_recursive>
 80040a6:	89ab      	ldrh	r3, [r5, #12]
 80040a8:	065b      	lsls	r3, r3, #25
 80040aa:	f53f af1f 	bmi.w	8003eec <_vfiprintf_r+0x44>
 80040ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80040b0:	e71e      	b.n	8003ef0 <_vfiprintf_r+0x48>
 80040b2:	ab03      	add	r3, sp, #12
 80040b4:	9300      	str	r3, [sp, #0]
 80040b6:	462a      	mov	r2, r5
 80040b8:	4b05      	ldr	r3, [pc, #20]	@ (80040d0 <_vfiprintf_r+0x228>)
 80040ba:	a904      	add	r1, sp, #16
 80040bc:	4630      	mov	r0, r6
 80040be:	f000 f91b 	bl	80042f8 <_printf_i>
 80040c2:	e7e4      	b.n	800408e <_vfiprintf_r+0x1e6>
 80040c4:	08004c9c 	.word	0x08004c9c
 80040c8:	08004ca6 	.word	0x08004ca6
 80040cc:	00000000 	.word	0x00000000
 80040d0:	08003e85 	.word	0x08003e85
 80040d4:	08004ca2 	.word	0x08004ca2

080040d8 <sbrk_aligned>:
 80040d8:	b570      	push	{r4, r5, r6, lr}
 80040da:	4e0f      	ldr	r6, [pc, #60]	@ (8004118 <sbrk_aligned+0x40>)
 80040dc:	460c      	mov	r4, r1
 80040de:	6831      	ldr	r1, [r6, #0]
 80040e0:	4605      	mov	r5, r0
 80040e2:	b911      	cbnz	r1, 80040ea <sbrk_aligned+0x12>
 80040e4:	f000 fc70 	bl	80049c8 <_sbrk_r>
 80040e8:	6030      	str	r0, [r6, #0]
 80040ea:	4621      	mov	r1, r4
 80040ec:	4628      	mov	r0, r5
 80040ee:	f000 fc6b 	bl	80049c8 <_sbrk_r>
 80040f2:	1c43      	adds	r3, r0, #1
 80040f4:	d103      	bne.n	80040fe <sbrk_aligned+0x26>
 80040f6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80040fa:	4620      	mov	r0, r4
 80040fc:	bd70      	pop	{r4, r5, r6, pc}
 80040fe:	1cc4      	adds	r4, r0, #3
 8004100:	f024 0403 	bic.w	r4, r4, #3
 8004104:	42a0      	cmp	r0, r4
 8004106:	d0f8      	beq.n	80040fa <sbrk_aligned+0x22>
 8004108:	1a21      	subs	r1, r4, r0
 800410a:	4628      	mov	r0, r5
 800410c:	f000 fc5c 	bl	80049c8 <_sbrk_r>
 8004110:	3001      	adds	r0, #1
 8004112:	d1f2      	bne.n	80040fa <sbrk_aligned+0x22>
 8004114:	e7ef      	b.n	80040f6 <sbrk_aligned+0x1e>
 8004116:	bf00      	nop
 8004118:	2000055c 	.word	0x2000055c

0800411c <_malloc_r>:
 800411c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004120:	1ccd      	adds	r5, r1, #3
 8004122:	f025 0503 	bic.w	r5, r5, #3
 8004126:	3508      	adds	r5, #8
 8004128:	2d0c      	cmp	r5, #12
 800412a:	bf38      	it	cc
 800412c:	250c      	movcc	r5, #12
 800412e:	2d00      	cmp	r5, #0
 8004130:	4606      	mov	r6, r0
 8004132:	db01      	blt.n	8004138 <_malloc_r+0x1c>
 8004134:	42a9      	cmp	r1, r5
 8004136:	d904      	bls.n	8004142 <_malloc_r+0x26>
 8004138:	230c      	movs	r3, #12
 800413a:	6033      	str	r3, [r6, #0]
 800413c:	2000      	movs	r0, #0
 800413e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004142:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004218 <_malloc_r+0xfc>
 8004146:	f000 faa3 	bl	8004690 <__malloc_lock>
 800414a:	f8d8 3000 	ldr.w	r3, [r8]
 800414e:	461c      	mov	r4, r3
 8004150:	bb44      	cbnz	r4, 80041a4 <_malloc_r+0x88>
 8004152:	4629      	mov	r1, r5
 8004154:	4630      	mov	r0, r6
 8004156:	f7ff ffbf 	bl	80040d8 <sbrk_aligned>
 800415a:	1c43      	adds	r3, r0, #1
 800415c:	4604      	mov	r4, r0
 800415e:	d158      	bne.n	8004212 <_malloc_r+0xf6>
 8004160:	f8d8 4000 	ldr.w	r4, [r8]
 8004164:	4627      	mov	r7, r4
 8004166:	2f00      	cmp	r7, #0
 8004168:	d143      	bne.n	80041f2 <_malloc_r+0xd6>
 800416a:	2c00      	cmp	r4, #0
 800416c:	d04b      	beq.n	8004206 <_malloc_r+0xea>
 800416e:	6823      	ldr	r3, [r4, #0]
 8004170:	4639      	mov	r1, r7
 8004172:	4630      	mov	r0, r6
 8004174:	eb04 0903 	add.w	r9, r4, r3
 8004178:	f000 fc26 	bl	80049c8 <_sbrk_r>
 800417c:	4581      	cmp	r9, r0
 800417e:	d142      	bne.n	8004206 <_malloc_r+0xea>
 8004180:	6821      	ldr	r1, [r4, #0]
 8004182:	1a6d      	subs	r5, r5, r1
 8004184:	4629      	mov	r1, r5
 8004186:	4630      	mov	r0, r6
 8004188:	f7ff ffa6 	bl	80040d8 <sbrk_aligned>
 800418c:	3001      	adds	r0, #1
 800418e:	d03a      	beq.n	8004206 <_malloc_r+0xea>
 8004190:	6823      	ldr	r3, [r4, #0]
 8004192:	442b      	add	r3, r5
 8004194:	6023      	str	r3, [r4, #0]
 8004196:	f8d8 3000 	ldr.w	r3, [r8]
 800419a:	685a      	ldr	r2, [r3, #4]
 800419c:	bb62      	cbnz	r2, 80041f8 <_malloc_r+0xdc>
 800419e:	f8c8 7000 	str.w	r7, [r8]
 80041a2:	e00f      	b.n	80041c4 <_malloc_r+0xa8>
 80041a4:	6822      	ldr	r2, [r4, #0]
 80041a6:	1b52      	subs	r2, r2, r5
 80041a8:	d420      	bmi.n	80041ec <_malloc_r+0xd0>
 80041aa:	2a0b      	cmp	r2, #11
 80041ac:	d917      	bls.n	80041de <_malloc_r+0xc2>
 80041ae:	1961      	adds	r1, r4, r5
 80041b0:	42a3      	cmp	r3, r4
 80041b2:	6025      	str	r5, [r4, #0]
 80041b4:	bf18      	it	ne
 80041b6:	6059      	strne	r1, [r3, #4]
 80041b8:	6863      	ldr	r3, [r4, #4]
 80041ba:	bf08      	it	eq
 80041bc:	f8c8 1000 	streq.w	r1, [r8]
 80041c0:	5162      	str	r2, [r4, r5]
 80041c2:	604b      	str	r3, [r1, #4]
 80041c4:	4630      	mov	r0, r6
 80041c6:	f000 fa69 	bl	800469c <__malloc_unlock>
 80041ca:	f104 000b 	add.w	r0, r4, #11
 80041ce:	1d23      	adds	r3, r4, #4
 80041d0:	f020 0007 	bic.w	r0, r0, #7
 80041d4:	1ac2      	subs	r2, r0, r3
 80041d6:	bf1c      	itt	ne
 80041d8:	1a1b      	subne	r3, r3, r0
 80041da:	50a3      	strne	r3, [r4, r2]
 80041dc:	e7af      	b.n	800413e <_malloc_r+0x22>
 80041de:	6862      	ldr	r2, [r4, #4]
 80041e0:	42a3      	cmp	r3, r4
 80041e2:	bf0c      	ite	eq
 80041e4:	f8c8 2000 	streq.w	r2, [r8]
 80041e8:	605a      	strne	r2, [r3, #4]
 80041ea:	e7eb      	b.n	80041c4 <_malloc_r+0xa8>
 80041ec:	4623      	mov	r3, r4
 80041ee:	6864      	ldr	r4, [r4, #4]
 80041f0:	e7ae      	b.n	8004150 <_malloc_r+0x34>
 80041f2:	463c      	mov	r4, r7
 80041f4:	687f      	ldr	r7, [r7, #4]
 80041f6:	e7b6      	b.n	8004166 <_malloc_r+0x4a>
 80041f8:	461a      	mov	r2, r3
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	42a3      	cmp	r3, r4
 80041fe:	d1fb      	bne.n	80041f8 <_malloc_r+0xdc>
 8004200:	2300      	movs	r3, #0
 8004202:	6053      	str	r3, [r2, #4]
 8004204:	e7de      	b.n	80041c4 <_malloc_r+0xa8>
 8004206:	230c      	movs	r3, #12
 8004208:	6033      	str	r3, [r6, #0]
 800420a:	4630      	mov	r0, r6
 800420c:	f000 fa46 	bl	800469c <__malloc_unlock>
 8004210:	e794      	b.n	800413c <_malloc_r+0x20>
 8004212:	6005      	str	r5, [r0, #0]
 8004214:	e7d6      	b.n	80041c4 <_malloc_r+0xa8>
 8004216:	bf00      	nop
 8004218:	20000560 	.word	0x20000560

0800421c <_printf_common>:
 800421c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004220:	4616      	mov	r6, r2
 8004222:	4698      	mov	r8, r3
 8004224:	688a      	ldr	r2, [r1, #8]
 8004226:	690b      	ldr	r3, [r1, #16]
 8004228:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800422c:	4293      	cmp	r3, r2
 800422e:	bfb8      	it	lt
 8004230:	4613      	movlt	r3, r2
 8004232:	6033      	str	r3, [r6, #0]
 8004234:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004238:	4607      	mov	r7, r0
 800423a:	460c      	mov	r4, r1
 800423c:	b10a      	cbz	r2, 8004242 <_printf_common+0x26>
 800423e:	3301      	adds	r3, #1
 8004240:	6033      	str	r3, [r6, #0]
 8004242:	6823      	ldr	r3, [r4, #0]
 8004244:	0699      	lsls	r1, r3, #26
 8004246:	bf42      	ittt	mi
 8004248:	6833      	ldrmi	r3, [r6, #0]
 800424a:	3302      	addmi	r3, #2
 800424c:	6033      	strmi	r3, [r6, #0]
 800424e:	6825      	ldr	r5, [r4, #0]
 8004250:	f015 0506 	ands.w	r5, r5, #6
 8004254:	d106      	bne.n	8004264 <_printf_common+0x48>
 8004256:	f104 0a19 	add.w	sl, r4, #25
 800425a:	68e3      	ldr	r3, [r4, #12]
 800425c:	6832      	ldr	r2, [r6, #0]
 800425e:	1a9b      	subs	r3, r3, r2
 8004260:	42ab      	cmp	r3, r5
 8004262:	dc26      	bgt.n	80042b2 <_printf_common+0x96>
 8004264:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004268:	6822      	ldr	r2, [r4, #0]
 800426a:	3b00      	subs	r3, #0
 800426c:	bf18      	it	ne
 800426e:	2301      	movne	r3, #1
 8004270:	0692      	lsls	r2, r2, #26
 8004272:	d42b      	bmi.n	80042cc <_printf_common+0xb0>
 8004274:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004278:	4641      	mov	r1, r8
 800427a:	4638      	mov	r0, r7
 800427c:	47c8      	blx	r9
 800427e:	3001      	adds	r0, #1
 8004280:	d01e      	beq.n	80042c0 <_printf_common+0xa4>
 8004282:	6823      	ldr	r3, [r4, #0]
 8004284:	6922      	ldr	r2, [r4, #16]
 8004286:	f003 0306 	and.w	r3, r3, #6
 800428a:	2b04      	cmp	r3, #4
 800428c:	bf02      	ittt	eq
 800428e:	68e5      	ldreq	r5, [r4, #12]
 8004290:	6833      	ldreq	r3, [r6, #0]
 8004292:	1aed      	subeq	r5, r5, r3
 8004294:	68a3      	ldr	r3, [r4, #8]
 8004296:	bf0c      	ite	eq
 8004298:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800429c:	2500      	movne	r5, #0
 800429e:	4293      	cmp	r3, r2
 80042a0:	bfc4      	itt	gt
 80042a2:	1a9b      	subgt	r3, r3, r2
 80042a4:	18ed      	addgt	r5, r5, r3
 80042a6:	2600      	movs	r6, #0
 80042a8:	341a      	adds	r4, #26
 80042aa:	42b5      	cmp	r5, r6
 80042ac:	d11a      	bne.n	80042e4 <_printf_common+0xc8>
 80042ae:	2000      	movs	r0, #0
 80042b0:	e008      	b.n	80042c4 <_printf_common+0xa8>
 80042b2:	2301      	movs	r3, #1
 80042b4:	4652      	mov	r2, sl
 80042b6:	4641      	mov	r1, r8
 80042b8:	4638      	mov	r0, r7
 80042ba:	47c8      	blx	r9
 80042bc:	3001      	adds	r0, #1
 80042be:	d103      	bne.n	80042c8 <_printf_common+0xac>
 80042c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80042c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042c8:	3501      	adds	r5, #1
 80042ca:	e7c6      	b.n	800425a <_printf_common+0x3e>
 80042cc:	18e1      	adds	r1, r4, r3
 80042ce:	1c5a      	adds	r2, r3, #1
 80042d0:	2030      	movs	r0, #48	@ 0x30
 80042d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80042d6:	4422      	add	r2, r4
 80042d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80042dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80042e0:	3302      	adds	r3, #2
 80042e2:	e7c7      	b.n	8004274 <_printf_common+0x58>
 80042e4:	2301      	movs	r3, #1
 80042e6:	4622      	mov	r2, r4
 80042e8:	4641      	mov	r1, r8
 80042ea:	4638      	mov	r0, r7
 80042ec:	47c8      	blx	r9
 80042ee:	3001      	adds	r0, #1
 80042f0:	d0e6      	beq.n	80042c0 <_printf_common+0xa4>
 80042f2:	3601      	adds	r6, #1
 80042f4:	e7d9      	b.n	80042aa <_printf_common+0x8e>
	...

080042f8 <_printf_i>:
 80042f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042fc:	7e0f      	ldrb	r7, [r1, #24]
 80042fe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004300:	2f78      	cmp	r7, #120	@ 0x78
 8004302:	4691      	mov	r9, r2
 8004304:	4680      	mov	r8, r0
 8004306:	460c      	mov	r4, r1
 8004308:	469a      	mov	sl, r3
 800430a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800430e:	d807      	bhi.n	8004320 <_printf_i+0x28>
 8004310:	2f62      	cmp	r7, #98	@ 0x62
 8004312:	d80a      	bhi.n	800432a <_printf_i+0x32>
 8004314:	2f00      	cmp	r7, #0
 8004316:	f000 80d2 	beq.w	80044be <_printf_i+0x1c6>
 800431a:	2f58      	cmp	r7, #88	@ 0x58
 800431c:	f000 80b9 	beq.w	8004492 <_printf_i+0x19a>
 8004320:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004324:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004328:	e03a      	b.n	80043a0 <_printf_i+0xa8>
 800432a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800432e:	2b15      	cmp	r3, #21
 8004330:	d8f6      	bhi.n	8004320 <_printf_i+0x28>
 8004332:	a101      	add	r1, pc, #4	@ (adr r1, 8004338 <_printf_i+0x40>)
 8004334:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004338:	08004391 	.word	0x08004391
 800433c:	080043a5 	.word	0x080043a5
 8004340:	08004321 	.word	0x08004321
 8004344:	08004321 	.word	0x08004321
 8004348:	08004321 	.word	0x08004321
 800434c:	08004321 	.word	0x08004321
 8004350:	080043a5 	.word	0x080043a5
 8004354:	08004321 	.word	0x08004321
 8004358:	08004321 	.word	0x08004321
 800435c:	08004321 	.word	0x08004321
 8004360:	08004321 	.word	0x08004321
 8004364:	080044a5 	.word	0x080044a5
 8004368:	080043cf 	.word	0x080043cf
 800436c:	0800445f 	.word	0x0800445f
 8004370:	08004321 	.word	0x08004321
 8004374:	08004321 	.word	0x08004321
 8004378:	080044c7 	.word	0x080044c7
 800437c:	08004321 	.word	0x08004321
 8004380:	080043cf 	.word	0x080043cf
 8004384:	08004321 	.word	0x08004321
 8004388:	08004321 	.word	0x08004321
 800438c:	08004467 	.word	0x08004467
 8004390:	6833      	ldr	r3, [r6, #0]
 8004392:	1d1a      	adds	r2, r3, #4
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	6032      	str	r2, [r6, #0]
 8004398:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800439c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80043a0:	2301      	movs	r3, #1
 80043a2:	e09d      	b.n	80044e0 <_printf_i+0x1e8>
 80043a4:	6833      	ldr	r3, [r6, #0]
 80043a6:	6820      	ldr	r0, [r4, #0]
 80043a8:	1d19      	adds	r1, r3, #4
 80043aa:	6031      	str	r1, [r6, #0]
 80043ac:	0606      	lsls	r6, r0, #24
 80043ae:	d501      	bpl.n	80043b4 <_printf_i+0xbc>
 80043b0:	681d      	ldr	r5, [r3, #0]
 80043b2:	e003      	b.n	80043bc <_printf_i+0xc4>
 80043b4:	0645      	lsls	r5, r0, #25
 80043b6:	d5fb      	bpl.n	80043b0 <_printf_i+0xb8>
 80043b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80043bc:	2d00      	cmp	r5, #0
 80043be:	da03      	bge.n	80043c8 <_printf_i+0xd0>
 80043c0:	232d      	movs	r3, #45	@ 0x2d
 80043c2:	426d      	negs	r5, r5
 80043c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80043c8:	4859      	ldr	r0, [pc, #356]	@ (8004530 <_printf_i+0x238>)
 80043ca:	230a      	movs	r3, #10
 80043cc:	e011      	b.n	80043f2 <_printf_i+0xfa>
 80043ce:	6821      	ldr	r1, [r4, #0]
 80043d0:	6833      	ldr	r3, [r6, #0]
 80043d2:	0608      	lsls	r0, r1, #24
 80043d4:	f853 5b04 	ldr.w	r5, [r3], #4
 80043d8:	d402      	bmi.n	80043e0 <_printf_i+0xe8>
 80043da:	0649      	lsls	r1, r1, #25
 80043dc:	bf48      	it	mi
 80043de:	b2ad      	uxthmi	r5, r5
 80043e0:	2f6f      	cmp	r7, #111	@ 0x6f
 80043e2:	4853      	ldr	r0, [pc, #332]	@ (8004530 <_printf_i+0x238>)
 80043e4:	6033      	str	r3, [r6, #0]
 80043e6:	bf14      	ite	ne
 80043e8:	230a      	movne	r3, #10
 80043ea:	2308      	moveq	r3, #8
 80043ec:	2100      	movs	r1, #0
 80043ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80043f2:	6866      	ldr	r6, [r4, #4]
 80043f4:	60a6      	str	r6, [r4, #8]
 80043f6:	2e00      	cmp	r6, #0
 80043f8:	bfa2      	ittt	ge
 80043fa:	6821      	ldrge	r1, [r4, #0]
 80043fc:	f021 0104 	bicge.w	r1, r1, #4
 8004400:	6021      	strge	r1, [r4, #0]
 8004402:	b90d      	cbnz	r5, 8004408 <_printf_i+0x110>
 8004404:	2e00      	cmp	r6, #0
 8004406:	d04b      	beq.n	80044a0 <_printf_i+0x1a8>
 8004408:	4616      	mov	r6, r2
 800440a:	fbb5 f1f3 	udiv	r1, r5, r3
 800440e:	fb03 5711 	mls	r7, r3, r1, r5
 8004412:	5dc7      	ldrb	r7, [r0, r7]
 8004414:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004418:	462f      	mov	r7, r5
 800441a:	42bb      	cmp	r3, r7
 800441c:	460d      	mov	r5, r1
 800441e:	d9f4      	bls.n	800440a <_printf_i+0x112>
 8004420:	2b08      	cmp	r3, #8
 8004422:	d10b      	bne.n	800443c <_printf_i+0x144>
 8004424:	6823      	ldr	r3, [r4, #0]
 8004426:	07df      	lsls	r7, r3, #31
 8004428:	d508      	bpl.n	800443c <_printf_i+0x144>
 800442a:	6923      	ldr	r3, [r4, #16]
 800442c:	6861      	ldr	r1, [r4, #4]
 800442e:	4299      	cmp	r1, r3
 8004430:	bfde      	ittt	le
 8004432:	2330      	movle	r3, #48	@ 0x30
 8004434:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004438:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800443c:	1b92      	subs	r2, r2, r6
 800443e:	6122      	str	r2, [r4, #16]
 8004440:	f8cd a000 	str.w	sl, [sp]
 8004444:	464b      	mov	r3, r9
 8004446:	aa03      	add	r2, sp, #12
 8004448:	4621      	mov	r1, r4
 800444a:	4640      	mov	r0, r8
 800444c:	f7ff fee6 	bl	800421c <_printf_common>
 8004450:	3001      	adds	r0, #1
 8004452:	d14a      	bne.n	80044ea <_printf_i+0x1f2>
 8004454:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004458:	b004      	add	sp, #16
 800445a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800445e:	6823      	ldr	r3, [r4, #0]
 8004460:	f043 0320 	orr.w	r3, r3, #32
 8004464:	6023      	str	r3, [r4, #0]
 8004466:	4833      	ldr	r0, [pc, #204]	@ (8004534 <_printf_i+0x23c>)
 8004468:	2778      	movs	r7, #120	@ 0x78
 800446a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800446e:	6823      	ldr	r3, [r4, #0]
 8004470:	6831      	ldr	r1, [r6, #0]
 8004472:	061f      	lsls	r7, r3, #24
 8004474:	f851 5b04 	ldr.w	r5, [r1], #4
 8004478:	d402      	bmi.n	8004480 <_printf_i+0x188>
 800447a:	065f      	lsls	r7, r3, #25
 800447c:	bf48      	it	mi
 800447e:	b2ad      	uxthmi	r5, r5
 8004480:	6031      	str	r1, [r6, #0]
 8004482:	07d9      	lsls	r1, r3, #31
 8004484:	bf44      	itt	mi
 8004486:	f043 0320 	orrmi.w	r3, r3, #32
 800448a:	6023      	strmi	r3, [r4, #0]
 800448c:	b11d      	cbz	r5, 8004496 <_printf_i+0x19e>
 800448e:	2310      	movs	r3, #16
 8004490:	e7ac      	b.n	80043ec <_printf_i+0xf4>
 8004492:	4827      	ldr	r0, [pc, #156]	@ (8004530 <_printf_i+0x238>)
 8004494:	e7e9      	b.n	800446a <_printf_i+0x172>
 8004496:	6823      	ldr	r3, [r4, #0]
 8004498:	f023 0320 	bic.w	r3, r3, #32
 800449c:	6023      	str	r3, [r4, #0]
 800449e:	e7f6      	b.n	800448e <_printf_i+0x196>
 80044a0:	4616      	mov	r6, r2
 80044a2:	e7bd      	b.n	8004420 <_printf_i+0x128>
 80044a4:	6833      	ldr	r3, [r6, #0]
 80044a6:	6825      	ldr	r5, [r4, #0]
 80044a8:	6961      	ldr	r1, [r4, #20]
 80044aa:	1d18      	adds	r0, r3, #4
 80044ac:	6030      	str	r0, [r6, #0]
 80044ae:	062e      	lsls	r6, r5, #24
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	d501      	bpl.n	80044b8 <_printf_i+0x1c0>
 80044b4:	6019      	str	r1, [r3, #0]
 80044b6:	e002      	b.n	80044be <_printf_i+0x1c6>
 80044b8:	0668      	lsls	r0, r5, #25
 80044ba:	d5fb      	bpl.n	80044b4 <_printf_i+0x1bc>
 80044bc:	8019      	strh	r1, [r3, #0]
 80044be:	2300      	movs	r3, #0
 80044c0:	6123      	str	r3, [r4, #16]
 80044c2:	4616      	mov	r6, r2
 80044c4:	e7bc      	b.n	8004440 <_printf_i+0x148>
 80044c6:	6833      	ldr	r3, [r6, #0]
 80044c8:	1d1a      	adds	r2, r3, #4
 80044ca:	6032      	str	r2, [r6, #0]
 80044cc:	681e      	ldr	r6, [r3, #0]
 80044ce:	6862      	ldr	r2, [r4, #4]
 80044d0:	2100      	movs	r1, #0
 80044d2:	4630      	mov	r0, r6
 80044d4:	f7fb fea4 	bl	8000220 <memchr>
 80044d8:	b108      	cbz	r0, 80044de <_printf_i+0x1e6>
 80044da:	1b80      	subs	r0, r0, r6
 80044dc:	6060      	str	r0, [r4, #4]
 80044de:	6863      	ldr	r3, [r4, #4]
 80044e0:	6123      	str	r3, [r4, #16]
 80044e2:	2300      	movs	r3, #0
 80044e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80044e8:	e7aa      	b.n	8004440 <_printf_i+0x148>
 80044ea:	6923      	ldr	r3, [r4, #16]
 80044ec:	4632      	mov	r2, r6
 80044ee:	4649      	mov	r1, r9
 80044f0:	4640      	mov	r0, r8
 80044f2:	47d0      	blx	sl
 80044f4:	3001      	adds	r0, #1
 80044f6:	d0ad      	beq.n	8004454 <_printf_i+0x15c>
 80044f8:	6823      	ldr	r3, [r4, #0]
 80044fa:	079b      	lsls	r3, r3, #30
 80044fc:	d413      	bmi.n	8004526 <_printf_i+0x22e>
 80044fe:	68e0      	ldr	r0, [r4, #12]
 8004500:	9b03      	ldr	r3, [sp, #12]
 8004502:	4298      	cmp	r0, r3
 8004504:	bfb8      	it	lt
 8004506:	4618      	movlt	r0, r3
 8004508:	e7a6      	b.n	8004458 <_printf_i+0x160>
 800450a:	2301      	movs	r3, #1
 800450c:	4632      	mov	r2, r6
 800450e:	4649      	mov	r1, r9
 8004510:	4640      	mov	r0, r8
 8004512:	47d0      	blx	sl
 8004514:	3001      	adds	r0, #1
 8004516:	d09d      	beq.n	8004454 <_printf_i+0x15c>
 8004518:	3501      	adds	r5, #1
 800451a:	68e3      	ldr	r3, [r4, #12]
 800451c:	9903      	ldr	r1, [sp, #12]
 800451e:	1a5b      	subs	r3, r3, r1
 8004520:	42ab      	cmp	r3, r5
 8004522:	dcf2      	bgt.n	800450a <_printf_i+0x212>
 8004524:	e7eb      	b.n	80044fe <_printf_i+0x206>
 8004526:	2500      	movs	r5, #0
 8004528:	f104 0619 	add.w	r6, r4, #25
 800452c:	e7f5      	b.n	800451a <_printf_i+0x222>
 800452e:	bf00      	nop
 8004530:	08004cad 	.word	0x08004cad
 8004534:	08004cbe 	.word	0x08004cbe

08004538 <__sflush_r>:
 8004538:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800453c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004540:	0716      	lsls	r6, r2, #28
 8004542:	4605      	mov	r5, r0
 8004544:	460c      	mov	r4, r1
 8004546:	d454      	bmi.n	80045f2 <__sflush_r+0xba>
 8004548:	684b      	ldr	r3, [r1, #4]
 800454a:	2b00      	cmp	r3, #0
 800454c:	dc02      	bgt.n	8004554 <__sflush_r+0x1c>
 800454e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004550:	2b00      	cmp	r3, #0
 8004552:	dd48      	ble.n	80045e6 <__sflush_r+0xae>
 8004554:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004556:	2e00      	cmp	r6, #0
 8004558:	d045      	beq.n	80045e6 <__sflush_r+0xae>
 800455a:	2300      	movs	r3, #0
 800455c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004560:	682f      	ldr	r7, [r5, #0]
 8004562:	6a21      	ldr	r1, [r4, #32]
 8004564:	602b      	str	r3, [r5, #0]
 8004566:	d030      	beq.n	80045ca <__sflush_r+0x92>
 8004568:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800456a:	89a3      	ldrh	r3, [r4, #12]
 800456c:	0759      	lsls	r1, r3, #29
 800456e:	d505      	bpl.n	800457c <__sflush_r+0x44>
 8004570:	6863      	ldr	r3, [r4, #4]
 8004572:	1ad2      	subs	r2, r2, r3
 8004574:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004576:	b10b      	cbz	r3, 800457c <__sflush_r+0x44>
 8004578:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800457a:	1ad2      	subs	r2, r2, r3
 800457c:	2300      	movs	r3, #0
 800457e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004580:	6a21      	ldr	r1, [r4, #32]
 8004582:	4628      	mov	r0, r5
 8004584:	47b0      	blx	r6
 8004586:	1c43      	adds	r3, r0, #1
 8004588:	89a3      	ldrh	r3, [r4, #12]
 800458a:	d106      	bne.n	800459a <__sflush_r+0x62>
 800458c:	6829      	ldr	r1, [r5, #0]
 800458e:	291d      	cmp	r1, #29
 8004590:	d82b      	bhi.n	80045ea <__sflush_r+0xb2>
 8004592:	4a2a      	ldr	r2, [pc, #168]	@ (800463c <__sflush_r+0x104>)
 8004594:	410a      	asrs	r2, r1
 8004596:	07d6      	lsls	r6, r2, #31
 8004598:	d427      	bmi.n	80045ea <__sflush_r+0xb2>
 800459a:	2200      	movs	r2, #0
 800459c:	6062      	str	r2, [r4, #4]
 800459e:	04d9      	lsls	r1, r3, #19
 80045a0:	6922      	ldr	r2, [r4, #16]
 80045a2:	6022      	str	r2, [r4, #0]
 80045a4:	d504      	bpl.n	80045b0 <__sflush_r+0x78>
 80045a6:	1c42      	adds	r2, r0, #1
 80045a8:	d101      	bne.n	80045ae <__sflush_r+0x76>
 80045aa:	682b      	ldr	r3, [r5, #0]
 80045ac:	b903      	cbnz	r3, 80045b0 <__sflush_r+0x78>
 80045ae:	6560      	str	r0, [r4, #84]	@ 0x54
 80045b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80045b2:	602f      	str	r7, [r5, #0]
 80045b4:	b1b9      	cbz	r1, 80045e6 <__sflush_r+0xae>
 80045b6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80045ba:	4299      	cmp	r1, r3
 80045bc:	d002      	beq.n	80045c4 <__sflush_r+0x8c>
 80045be:	4628      	mov	r0, r5
 80045c0:	f000 fa24 	bl	8004a0c <_free_r>
 80045c4:	2300      	movs	r3, #0
 80045c6:	6363      	str	r3, [r4, #52]	@ 0x34
 80045c8:	e00d      	b.n	80045e6 <__sflush_r+0xae>
 80045ca:	2301      	movs	r3, #1
 80045cc:	4628      	mov	r0, r5
 80045ce:	47b0      	blx	r6
 80045d0:	4602      	mov	r2, r0
 80045d2:	1c50      	adds	r0, r2, #1
 80045d4:	d1c9      	bne.n	800456a <__sflush_r+0x32>
 80045d6:	682b      	ldr	r3, [r5, #0]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d0c6      	beq.n	800456a <__sflush_r+0x32>
 80045dc:	2b1d      	cmp	r3, #29
 80045de:	d001      	beq.n	80045e4 <__sflush_r+0xac>
 80045e0:	2b16      	cmp	r3, #22
 80045e2:	d11e      	bne.n	8004622 <__sflush_r+0xea>
 80045e4:	602f      	str	r7, [r5, #0]
 80045e6:	2000      	movs	r0, #0
 80045e8:	e022      	b.n	8004630 <__sflush_r+0xf8>
 80045ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80045ee:	b21b      	sxth	r3, r3
 80045f0:	e01b      	b.n	800462a <__sflush_r+0xf2>
 80045f2:	690f      	ldr	r7, [r1, #16]
 80045f4:	2f00      	cmp	r7, #0
 80045f6:	d0f6      	beq.n	80045e6 <__sflush_r+0xae>
 80045f8:	0793      	lsls	r3, r2, #30
 80045fa:	680e      	ldr	r6, [r1, #0]
 80045fc:	bf08      	it	eq
 80045fe:	694b      	ldreq	r3, [r1, #20]
 8004600:	600f      	str	r7, [r1, #0]
 8004602:	bf18      	it	ne
 8004604:	2300      	movne	r3, #0
 8004606:	eba6 0807 	sub.w	r8, r6, r7
 800460a:	608b      	str	r3, [r1, #8]
 800460c:	f1b8 0f00 	cmp.w	r8, #0
 8004610:	dde9      	ble.n	80045e6 <__sflush_r+0xae>
 8004612:	6a21      	ldr	r1, [r4, #32]
 8004614:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004616:	4643      	mov	r3, r8
 8004618:	463a      	mov	r2, r7
 800461a:	4628      	mov	r0, r5
 800461c:	47b0      	blx	r6
 800461e:	2800      	cmp	r0, #0
 8004620:	dc08      	bgt.n	8004634 <__sflush_r+0xfc>
 8004622:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004626:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800462a:	81a3      	strh	r3, [r4, #12]
 800462c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004634:	4407      	add	r7, r0
 8004636:	eba8 0800 	sub.w	r8, r8, r0
 800463a:	e7e7      	b.n	800460c <__sflush_r+0xd4>
 800463c:	dfbffffe 	.word	0xdfbffffe

08004640 <_fflush_r>:
 8004640:	b538      	push	{r3, r4, r5, lr}
 8004642:	690b      	ldr	r3, [r1, #16]
 8004644:	4605      	mov	r5, r0
 8004646:	460c      	mov	r4, r1
 8004648:	b913      	cbnz	r3, 8004650 <_fflush_r+0x10>
 800464a:	2500      	movs	r5, #0
 800464c:	4628      	mov	r0, r5
 800464e:	bd38      	pop	{r3, r4, r5, pc}
 8004650:	b118      	cbz	r0, 800465a <_fflush_r+0x1a>
 8004652:	6a03      	ldr	r3, [r0, #32]
 8004654:	b90b      	cbnz	r3, 800465a <_fflush_r+0x1a>
 8004656:	f7ff fb23 	bl	8003ca0 <__sinit>
 800465a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d0f3      	beq.n	800464a <_fflush_r+0xa>
 8004662:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004664:	07d0      	lsls	r0, r2, #31
 8004666:	d404      	bmi.n	8004672 <_fflush_r+0x32>
 8004668:	0599      	lsls	r1, r3, #22
 800466a:	d402      	bmi.n	8004672 <_fflush_r+0x32>
 800466c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800466e:	f7ff fbf0 	bl	8003e52 <__retarget_lock_acquire_recursive>
 8004672:	4628      	mov	r0, r5
 8004674:	4621      	mov	r1, r4
 8004676:	f7ff ff5f 	bl	8004538 <__sflush_r>
 800467a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800467c:	07da      	lsls	r2, r3, #31
 800467e:	4605      	mov	r5, r0
 8004680:	d4e4      	bmi.n	800464c <_fflush_r+0xc>
 8004682:	89a3      	ldrh	r3, [r4, #12]
 8004684:	059b      	lsls	r3, r3, #22
 8004686:	d4e1      	bmi.n	800464c <_fflush_r+0xc>
 8004688:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800468a:	f7ff fbe3 	bl	8003e54 <__retarget_lock_release_recursive>
 800468e:	e7dd      	b.n	800464c <_fflush_r+0xc>

08004690 <__malloc_lock>:
 8004690:	4801      	ldr	r0, [pc, #4]	@ (8004698 <__malloc_lock+0x8>)
 8004692:	f7ff bbde 	b.w	8003e52 <__retarget_lock_acquire_recursive>
 8004696:	bf00      	nop
 8004698:	20000558 	.word	0x20000558

0800469c <__malloc_unlock>:
 800469c:	4801      	ldr	r0, [pc, #4]	@ (80046a4 <__malloc_unlock+0x8>)
 800469e:	f7ff bbd9 	b.w	8003e54 <__retarget_lock_release_recursive>
 80046a2:	bf00      	nop
 80046a4:	20000558 	.word	0x20000558

080046a8 <__sread>:
 80046a8:	b510      	push	{r4, lr}
 80046aa:	460c      	mov	r4, r1
 80046ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046b0:	f000 f978 	bl	80049a4 <_read_r>
 80046b4:	2800      	cmp	r0, #0
 80046b6:	bfab      	itete	ge
 80046b8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80046ba:	89a3      	ldrhlt	r3, [r4, #12]
 80046bc:	181b      	addge	r3, r3, r0
 80046be:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80046c2:	bfac      	ite	ge
 80046c4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80046c6:	81a3      	strhlt	r3, [r4, #12]
 80046c8:	bd10      	pop	{r4, pc}

080046ca <__swrite>:
 80046ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046ce:	461f      	mov	r7, r3
 80046d0:	898b      	ldrh	r3, [r1, #12]
 80046d2:	05db      	lsls	r3, r3, #23
 80046d4:	4605      	mov	r5, r0
 80046d6:	460c      	mov	r4, r1
 80046d8:	4616      	mov	r6, r2
 80046da:	d505      	bpl.n	80046e8 <__swrite+0x1e>
 80046dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046e0:	2302      	movs	r3, #2
 80046e2:	2200      	movs	r2, #0
 80046e4:	f000 f94c 	bl	8004980 <_lseek_r>
 80046e8:	89a3      	ldrh	r3, [r4, #12]
 80046ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80046ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80046f2:	81a3      	strh	r3, [r4, #12]
 80046f4:	4632      	mov	r2, r6
 80046f6:	463b      	mov	r3, r7
 80046f8:	4628      	mov	r0, r5
 80046fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80046fe:	f000 b973 	b.w	80049e8 <_write_r>

08004702 <__sseek>:
 8004702:	b510      	push	{r4, lr}
 8004704:	460c      	mov	r4, r1
 8004706:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800470a:	f000 f939 	bl	8004980 <_lseek_r>
 800470e:	1c43      	adds	r3, r0, #1
 8004710:	89a3      	ldrh	r3, [r4, #12]
 8004712:	bf15      	itete	ne
 8004714:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004716:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800471a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800471e:	81a3      	strheq	r3, [r4, #12]
 8004720:	bf18      	it	ne
 8004722:	81a3      	strhne	r3, [r4, #12]
 8004724:	bd10      	pop	{r4, pc}

08004726 <__sclose>:
 8004726:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800472a:	f000 b8f7 	b.w	800491c <_close_r>

0800472e <__swbuf_r>:
 800472e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004730:	460e      	mov	r6, r1
 8004732:	4614      	mov	r4, r2
 8004734:	4605      	mov	r5, r0
 8004736:	b118      	cbz	r0, 8004740 <__swbuf_r+0x12>
 8004738:	6a03      	ldr	r3, [r0, #32]
 800473a:	b90b      	cbnz	r3, 8004740 <__swbuf_r+0x12>
 800473c:	f7ff fab0 	bl	8003ca0 <__sinit>
 8004740:	69a3      	ldr	r3, [r4, #24]
 8004742:	60a3      	str	r3, [r4, #8]
 8004744:	89a3      	ldrh	r3, [r4, #12]
 8004746:	071a      	lsls	r2, r3, #28
 8004748:	d501      	bpl.n	800474e <__swbuf_r+0x20>
 800474a:	6923      	ldr	r3, [r4, #16]
 800474c:	b943      	cbnz	r3, 8004760 <__swbuf_r+0x32>
 800474e:	4621      	mov	r1, r4
 8004750:	4628      	mov	r0, r5
 8004752:	f000 f82b 	bl	80047ac <__swsetup_r>
 8004756:	b118      	cbz	r0, 8004760 <__swbuf_r+0x32>
 8004758:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800475c:	4638      	mov	r0, r7
 800475e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004760:	6823      	ldr	r3, [r4, #0]
 8004762:	6922      	ldr	r2, [r4, #16]
 8004764:	1a98      	subs	r0, r3, r2
 8004766:	6963      	ldr	r3, [r4, #20]
 8004768:	b2f6      	uxtb	r6, r6
 800476a:	4283      	cmp	r3, r0
 800476c:	4637      	mov	r7, r6
 800476e:	dc05      	bgt.n	800477c <__swbuf_r+0x4e>
 8004770:	4621      	mov	r1, r4
 8004772:	4628      	mov	r0, r5
 8004774:	f7ff ff64 	bl	8004640 <_fflush_r>
 8004778:	2800      	cmp	r0, #0
 800477a:	d1ed      	bne.n	8004758 <__swbuf_r+0x2a>
 800477c:	68a3      	ldr	r3, [r4, #8]
 800477e:	3b01      	subs	r3, #1
 8004780:	60a3      	str	r3, [r4, #8]
 8004782:	6823      	ldr	r3, [r4, #0]
 8004784:	1c5a      	adds	r2, r3, #1
 8004786:	6022      	str	r2, [r4, #0]
 8004788:	701e      	strb	r6, [r3, #0]
 800478a:	6962      	ldr	r2, [r4, #20]
 800478c:	1c43      	adds	r3, r0, #1
 800478e:	429a      	cmp	r2, r3
 8004790:	d004      	beq.n	800479c <__swbuf_r+0x6e>
 8004792:	89a3      	ldrh	r3, [r4, #12]
 8004794:	07db      	lsls	r3, r3, #31
 8004796:	d5e1      	bpl.n	800475c <__swbuf_r+0x2e>
 8004798:	2e0a      	cmp	r6, #10
 800479a:	d1df      	bne.n	800475c <__swbuf_r+0x2e>
 800479c:	4621      	mov	r1, r4
 800479e:	4628      	mov	r0, r5
 80047a0:	f7ff ff4e 	bl	8004640 <_fflush_r>
 80047a4:	2800      	cmp	r0, #0
 80047a6:	d0d9      	beq.n	800475c <__swbuf_r+0x2e>
 80047a8:	e7d6      	b.n	8004758 <__swbuf_r+0x2a>
	...

080047ac <__swsetup_r>:
 80047ac:	b538      	push	{r3, r4, r5, lr}
 80047ae:	4b29      	ldr	r3, [pc, #164]	@ (8004854 <__swsetup_r+0xa8>)
 80047b0:	4605      	mov	r5, r0
 80047b2:	6818      	ldr	r0, [r3, #0]
 80047b4:	460c      	mov	r4, r1
 80047b6:	b118      	cbz	r0, 80047c0 <__swsetup_r+0x14>
 80047b8:	6a03      	ldr	r3, [r0, #32]
 80047ba:	b90b      	cbnz	r3, 80047c0 <__swsetup_r+0x14>
 80047bc:	f7ff fa70 	bl	8003ca0 <__sinit>
 80047c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047c4:	0719      	lsls	r1, r3, #28
 80047c6:	d422      	bmi.n	800480e <__swsetup_r+0x62>
 80047c8:	06da      	lsls	r2, r3, #27
 80047ca:	d407      	bmi.n	80047dc <__swsetup_r+0x30>
 80047cc:	2209      	movs	r2, #9
 80047ce:	602a      	str	r2, [r5, #0]
 80047d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80047d4:	81a3      	strh	r3, [r4, #12]
 80047d6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80047da:	e033      	b.n	8004844 <__swsetup_r+0x98>
 80047dc:	0758      	lsls	r0, r3, #29
 80047de:	d512      	bpl.n	8004806 <__swsetup_r+0x5a>
 80047e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80047e2:	b141      	cbz	r1, 80047f6 <__swsetup_r+0x4a>
 80047e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80047e8:	4299      	cmp	r1, r3
 80047ea:	d002      	beq.n	80047f2 <__swsetup_r+0x46>
 80047ec:	4628      	mov	r0, r5
 80047ee:	f000 f90d 	bl	8004a0c <_free_r>
 80047f2:	2300      	movs	r3, #0
 80047f4:	6363      	str	r3, [r4, #52]	@ 0x34
 80047f6:	89a3      	ldrh	r3, [r4, #12]
 80047f8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80047fc:	81a3      	strh	r3, [r4, #12]
 80047fe:	2300      	movs	r3, #0
 8004800:	6063      	str	r3, [r4, #4]
 8004802:	6923      	ldr	r3, [r4, #16]
 8004804:	6023      	str	r3, [r4, #0]
 8004806:	89a3      	ldrh	r3, [r4, #12]
 8004808:	f043 0308 	orr.w	r3, r3, #8
 800480c:	81a3      	strh	r3, [r4, #12]
 800480e:	6923      	ldr	r3, [r4, #16]
 8004810:	b94b      	cbnz	r3, 8004826 <__swsetup_r+0x7a>
 8004812:	89a3      	ldrh	r3, [r4, #12]
 8004814:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004818:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800481c:	d003      	beq.n	8004826 <__swsetup_r+0x7a>
 800481e:	4621      	mov	r1, r4
 8004820:	4628      	mov	r0, r5
 8004822:	f000 f83f 	bl	80048a4 <__smakebuf_r>
 8004826:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800482a:	f013 0201 	ands.w	r2, r3, #1
 800482e:	d00a      	beq.n	8004846 <__swsetup_r+0x9a>
 8004830:	2200      	movs	r2, #0
 8004832:	60a2      	str	r2, [r4, #8]
 8004834:	6962      	ldr	r2, [r4, #20]
 8004836:	4252      	negs	r2, r2
 8004838:	61a2      	str	r2, [r4, #24]
 800483a:	6922      	ldr	r2, [r4, #16]
 800483c:	b942      	cbnz	r2, 8004850 <__swsetup_r+0xa4>
 800483e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004842:	d1c5      	bne.n	80047d0 <__swsetup_r+0x24>
 8004844:	bd38      	pop	{r3, r4, r5, pc}
 8004846:	0799      	lsls	r1, r3, #30
 8004848:	bf58      	it	pl
 800484a:	6962      	ldrpl	r2, [r4, #20]
 800484c:	60a2      	str	r2, [r4, #8]
 800484e:	e7f4      	b.n	800483a <__swsetup_r+0x8e>
 8004850:	2000      	movs	r0, #0
 8004852:	e7f7      	b.n	8004844 <__swsetup_r+0x98>
 8004854:	20000024 	.word	0x20000024

08004858 <__swhatbuf_r>:
 8004858:	b570      	push	{r4, r5, r6, lr}
 800485a:	460c      	mov	r4, r1
 800485c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004860:	2900      	cmp	r1, #0
 8004862:	b096      	sub	sp, #88	@ 0x58
 8004864:	4615      	mov	r5, r2
 8004866:	461e      	mov	r6, r3
 8004868:	da0d      	bge.n	8004886 <__swhatbuf_r+0x2e>
 800486a:	89a3      	ldrh	r3, [r4, #12]
 800486c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004870:	f04f 0100 	mov.w	r1, #0
 8004874:	bf14      	ite	ne
 8004876:	2340      	movne	r3, #64	@ 0x40
 8004878:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800487c:	2000      	movs	r0, #0
 800487e:	6031      	str	r1, [r6, #0]
 8004880:	602b      	str	r3, [r5, #0]
 8004882:	b016      	add	sp, #88	@ 0x58
 8004884:	bd70      	pop	{r4, r5, r6, pc}
 8004886:	466a      	mov	r2, sp
 8004888:	f000 f858 	bl	800493c <_fstat_r>
 800488c:	2800      	cmp	r0, #0
 800488e:	dbec      	blt.n	800486a <__swhatbuf_r+0x12>
 8004890:	9901      	ldr	r1, [sp, #4]
 8004892:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004896:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800489a:	4259      	negs	r1, r3
 800489c:	4159      	adcs	r1, r3
 800489e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80048a2:	e7eb      	b.n	800487c <__swhatbuf_r+0x24>

080048a4 <__smakebuf_r>:
 80048a4:	898b      	ldrh	r3, [r1, #12]
 80048a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80048a8:	079d      	lsls	r5, r3, #30
 80048aa:	4606      	mov	r6, r0
 80048ac:	460c      	mov	r4, r1
 80048ae:	d507      	bpl.n	80048c0 <__smakebuf_r+0x1c>
 80048b0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80048b4:	6023      	str	r3, [r4, #0]
 80048b6:	6123      	str	r3, [r4, #16]
 80048b8:	2301      	movs	r3, #1
 80048ba:	6163      	str	r3, [r4, #20]
 80048bc:	b003      	add	sp, #12
 80048be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048c0:	ab01      	add	r3, sp, #4
 80048c2:	466a      	mov	r2, sp
 80048c4:	f7ff ffc8 	bl	8004858 <__swhatbuf_r>
 80048c8:	9f00      	ldr	r7, [sp, #0]
 80048ca:	4605      	mov	r5, r0
 80048cc:	4639      	mov	r1, r7
 80048ce:	4630      	mov	r0, r6
 80048d0:	f7ff fc24 	bl	800411c <_malloc_r>
 80048d4:	b948      	cbnz	r0, 80048ea <__smakebuf_r+0x46>
 80048d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048da:	059a      	lsls	r2, r3, #22
 80048dc:	d4ee      	bmi.n	80048bc <__smakebuf_r+0x18>
 80048de:	f023 0303 	bic.w	r3, r3, #3
 80048e2:	f043 0302 	orr.w	r3, r3, #2
 80048e6:	81a3      	strh	r3, [r4, #12]
 80048e8:	e7e2      	b.n	80048b0 <__smakebuf_r+0xc>
 80048ea:	89a3      	ldrh	r3, [r4, #12]
 80048ec:	6020      	str	r0, [r4, #0]
 80048ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048f2:	81a3      	strh	r3, [r4, #12]
 80048f4:	9b01      	ldr	r3, [sp, #4]
 80048f6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80048fa:	b15b      	cbz	r3, 8004914 <__smakebuf_r+0x70>
 80048fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004900:	4630      	mov	r0, r6
 8004902:	f000 f82d 	bl	8004960 <_isatty_r>
 8004906:	b128      	cbz	r0, 8004914 <__smakebuf_r+0x70>
 8004908:	89a3      	ldrh	r3, [r4, #12]
 800490a:	f023 0303 	bic.w	r3, r3, #3
 800490e:	f043 0301 	orr.w	r3, r3, #1
 8004912:	81a3      	strh	r3, [r4, #12]
 8004914:	89a3      	ldrh	r3, [r4, #12]
 8004916:	431d      	orrs	r5, r3
 8004918:	81a5      	strh	r5, [r4, #12]
 800491a:	e7cf      	b.n	80048bc <__smakebuf_r+0x18>

0800491c <_close_r>:
 800491c:	b538      	push	{r3, r4, r5, lr}
 800491e:	4d06      	ldr	r5, [pc, #24]	@ (8004938 <_close_r+0x1c>)
 8004920:	2300      	movs	r3, #0
 8004922:	4604      	mov	r4, r0
 8004924:	4608      	mov	r0, r1
 8004926:	602b      	str	r3, [r5, #0]
 8004928:	f7fd fc1b 	bl	8002162 <_close>
 800492c:	1c43      	adds	r3, r0, #1
 800492e:	d102      	bne.n	8004936 <_close_r+0x1a>
 8004930:	682b      	ldr	r3, [r5, #0]
 8004932:	b103      	cbz	r3, 8004936 <_close_r+0x1a>
 8004934:	6023      	str	r3, [r4, #0]
 8004936:	bd38      	pop	{r3, r4, r5, pc}
 8004938:	20000564 	.word	0x20000564

0800493c <_fstat_r>:
 800493c:	b538      	push	{r3, r4, r5, lr}
 800493e:	4d07      	ldr	r5, [pc, #28]	@ (800495c <_fstat_r+0x20>)
 8004940:	2300      	movs	r3, #0
 8004942:	4604      	mov	r4, r0
 8004944:	4608      	mov	r0, r1
 8004946:	4611      	mov	r1, r2
 8004948:	602b      	str	r3, [r5, #0]
 800494a:	f7fd fc16 	bl	800217a <_fstat>
 800494e:	1c43      	adds	r3, r0, #1
 8004950:	d102      	bne.n	8004958 <_fstat_r+0x1c>
 8004952:	682b      	ldr	r3, [r5, #0]
 8004954:	b103      	cbz	r3, 8004958 <_fstat_r+0x1c>
 8004956:	6023      	str	r3, [r4, #0]
 8004958:	bd38      	pop	{r3, r4, r5, pc}
 800495a:	bf00      	nop
 800495c:	20000564 	.word	0x20000564

08004960 <_isatty_r>:
 8004960:	b538      	push	{r3, r4, r5, lr}
 8004962:	4d06      	ldr	r5, [pc, #24]	@ (800497c <_isatty_r+0x1c>)
 8004964:	2300      	movs	r3, #0
 8004966:	4604      	mov	r4, r0
 8004968:	4608      	mov	r0, r1
 800496a:	602b      	str	r3, [r5, #0]
 800496c:	f7fd fc15 	bl	800219a <_isatty>
 8004970:	1c43      	adds	r3, r0, #1
 8004972:	d102      	bne.n	800497a <_isatty_r+0x1a>
 8004974:	682b      	ldr	r3, [r5, #0]
 8004976:	b103      	cbz	r3, 800497a <_isatty_r+0x1a>
 8004978:	6023      	str	r3, [r4, #0]
 800497a:	bd38      	pop	{r3, r4, r5, pc}
 800497c:	20000564 	.word	0x20000564

08004980 <_lseek_r>:
 8004980:	b538      	push	{r3, r4, r5, lr}
 8004982:	4d07      	ldr	r5, [pc, #28]	@ (80049a0 <_lseek_r+0x20>)
 8004984:	4604      	mov	r4, r0
 8004986:	4608      	mov	r0, r1
 8004988:	4611      	mov	r1, r2
 800498a:	2200      	movs	r2, #0
 800498c:	602a      	str	r2, [r5, #0]
 800498e:	461a      	mov	r2, r3
 8004990:	f7fd fc0e 	bl	80021b0 <_lseek>
 8004994:	1c43      	adds	r3, r0, #1
 8004996:	d102      	bne.n	800499e <_lseek_r+0x1e>
 8004998:	682b      	ldr	r3, [r5, #0]
 800499a:	b103      	cbz	r3, 800499e <_lseek_r+0x1e>
 800499c:	6023      	str	r3, [r4, #0]
 800499e:	bd38      	pop	{r3, r4, r5, pc}
 80049a0:	20000564 	.word	0x20000564

080049a4 <_read_r>:
 80049a4:	b538      	push	{r3, r4, r5, lr}
 80049a6:	4d07      	ldr	r5, [pc, #28]	@ (80049c4 <_read_r+0x20>)
 80049a8:	4604      	mov	r4, r0
 80049aa:	4608      	mov	r0, r1
 80049ac:	4611      	mov	r1, r2
 80049ae:	2200      	movs	r2, #0
 80049b0:	602a      	str	r2, [r5, #0]
 80049b2:	461a      	mov	r2, r3
 80049b4:	f7fd fb9c 	bl	80020f0 <_read>
 80049b8:	1c43      	adds	r3, r0, #1
 80049ba:	d102      	bne.n	80049c2 <_read_r+0x1e>
 80049bc:	682b      	ldr	r3, [r5, #0]
 80049be:	b103      	cbz	r3, 80049c2 <_read_r+0x1e>
 80049c0:	6023      	str	r3, [r4, #0]
 80049c2:	bd38      	pop	{r3, r4, r5, pc}
 80049c4:	20000564 	.word	0x20000564

080049c8 <_sbrk_r>:
 80049c8:	b538      	push	{r3, r4, r5, lr}
 80049ca:	4d06      	ldr	r5, [pc, #24]	@ (80049e4 <_sbrk_r+0x1c>)
 80049cc:	2300      	movs	r3, #0
 80049ce:	4604      	mov	r4, r0
 80049d0:	4608      	mov	r0, r1
 80049d2:	602b      	str	r3, [r5, #0]
 80049d4:	f7fd fbfa 	bl	80021cc <_sbrk>
 80049d8:	1c43      	adds	r3, r0, #1
 80049da:	d102      	bne.n	80049e2 <_sbrk_r+0x1a>
 80049dc:	682b      	ldr	r3, [r5, #0]
 80049de:	b103      	cbz	r3, 80049e2 <_sbrk_r+0x1a>
 80049e0:	6023      	str	r3, [r4, #0]
 80049e2:	bd38      	pop	{r3, r4, r5, pc}
 80049e4:	20000564 	.word	0x20000564

080049e8 <_write_r>:
 80049e8:	b538      	push	{r3, r4, r5, lr}
 80049ea:	4d07      	ldr	r5, [pc, #28]	@ (8004a08 <_write_r+0x20>)
 80049ec:	4604      	mov	r4, r0
 80049ee:	4608      	mov	r0, r1
 80049f0:	4611      	mov	r1, r2
 80049f2:	2200      	movs	r2, #0
 80049f4:	602a      	str	r2, [r5, #0]
 80049f6:	461a      	mov	r2, r3
 80049f8:	f7fd fb97 	bl	800212a <_write>
 80049fc:	1c43      	adds	r3, r0, #1
 80049fe:	d102      	bne.n	8004a06 <_write_r+0x1e>
 8004a00:	682b      	ldr	r3, [r5, #0]
 8004a02:	b103      	cbz	r3, 8004a06 <_write_r+0x1e>
 8004a04:	6023      	str	r3, [r4, #0]
 8004a06:	bd38      	pop	{r3, r4, r5, pc}
 8004a08:	20000564 	.word	0x20000564

08004a0c <_free_r>:
 8004a0c:	b538      	push	{r3, r4, r5, lr}
 8004a0e:	4605      	mov	r5, r0
 8004a10:	2900      	cmp	r1, #0
 8004a12:	d041      	beq.n	8004a98 <_free_r+0x8c>
 8004a14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a18:	1f0c      	subs	r4, r1, #4
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	bfb8      	it	lt
 8004a1e:	18e4      	addlt	r4, r4, r3
 8004a20:	f7ff fe36 	bl	8004690 <__malloc_lock>
 8004a24:	4a1d      	ldr	r2, [pc, #116]	@ (8004a9c <_free_r+0x90>)
 8004a26:	6813      	ldr	r3, [r2, #0]
 8004a28:	b933      	cbnz	r3, 8004a38 <_free_r+0x2c>
 8004a2a:	6063      	str	r3, [r4, #4]
 8004a2c:	6014      	str	r4, [r2, #0]
 8004a2e:	4628      	mov	r0, r5
 8004a30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a34:	f7ff be32 	b.w	800469c <__malloc_unlock>
 8004a38:	42a3      	cmp	r3, r4
 8004a3a:	d908      	bls.n	8004a4e <_free_r+0x42>
 8004a3c:	6820      	ldr	r0, [r4, #0]
 8004a3e:	1821      	adds	r1, r4, r0
 8004a40:	428b      	cmp	r3, r1
 8004a42:	bf01      	itttt	eq
 8004a44:	6819      	ldreq	r1, [r3, #0]
 8004a46:	685b      	ldreq	r3, [r3, #4]
 8004a48:	1809      	addeq	r1, r1, r0
 8004a4a:	6021      	streq	r1, [r4, #0]
 8004a4c:	e7ed      	b.n	8004a2a <_free_r+0x1e>
 8004a4e:	461a      	mov	r2, r3
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	b10b      	cbz	r3, 8004a58 <_free_r+0x4c>
 8004a54:	42a3      	cmp	r3, r4
 8004a56:	d9fa      	bls.n	8004a4e <_free_r+0x42>
 8004a58:	6811      	ldr	r1, [r2, #0]
 8004a5a:	1850      	adds	r0, r2, r1
 8004a5c:	42a0      	cmp	r0, r4
 8004a5e:	d10b      	bne.n	8004a78 <_free_r+0x6c>
 8004a60:	6820      	ldr	r0, [r4, #0]
 8004a62:	4401      	add	r1, r0
 8004a64:	1850      	adds	r0, r2, r1
 8004a66:	4283      	cmp	r3, r0
 8004a68:	6011      	str	r1, [r2, #0]
 8004a6a:	d1e0      	bne.n	8004a2e <_free_r+0x22>
 8004a6c:	6818      	ldr	r0, [r3, #0]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	6053      	str	r3, [r2, #4]
 8004a72:	4408      	add	r0, r1
 8004a74:	6010      	str	r0, [r2, #0]
 8004a76:	e7da      	b.n	8004a2e <_free_r+0x22>
 8004a78:	d902      	bls.n	8004a80 <_free_r+0x74>
 8004a7a:	230c      	movs	r3, #12
 8004a7c:	602b      	str	r3, [r5, #0]
 8004a7e:	e7d6      	b.n	8004a2e <_free_r+0x22>
 8004a80:	6820      	ldr	r0, [r4, #0]
 8004a82:	1821      	adds	r1, r4, r0
 8004a84:	428b      	cmp	r3, r1
 8004a86:	bf04      	itt	eq
 8004a88:	6819      	ldreq	r1, [r3, #0]
 8004a8a:	685b      	ldreq	r3, [r3, #4]
 8004a8c:	6063      	str	r3, [r4, #4]
 8004a8e:	bf04      	itt	eq
 8004a90:	1809      	addeq	r1, r1, r0
 8004a92:	6021      	streq	r1, [r4, #0]
 8004a94:	6054      	str	r4, [r2, #4]
 8004a96:	e7ca      	b.n	8004a2e <_free_r+0x22>
 8004a98:	bd38      	pop	{r3, r4, r5, pc}
 8004a9a:	bf00      	nop
 8004a9c:	20000560 	.word	0x20000560

08004aa0 <round>:
 8004aa0:	ec51 0b10 	vmov	r0, r1, d0
 8004aa4:	b570      	push	{r4, r5, r6, lr}
 8004aa6:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8004aaa:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 8004aae:	2a13      	cmp	r2, #19
 8004ab0:	460b      	mov	r3, r1
 8004ab2:	4605      	mov	r5, r0
 8004ab4:	dc1b      	bgt.n	8004aee <round+0x4e>
 8004ab6:	2a00      	cmp	r2, #0
 8004ab8:	da0b      	bge.n	8004ad2 <round+0x32>
 8004aba:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 8004abe:	3201      	adds	r2, #1
 8004ac0:	bf04      	itt	eq
 8004ac2:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 8004ac6:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 8004aca:	2200      	movs	r2, #0
 8004acc:	4619      	mov	r1, r3
 8004ace:	4610      	mov	r0, r2
 8004ad0:	e015      	b.n	8004afe <round+0x5e>
 8004ad2:	4c15      	ldr	r4, [pc, #84]	@ (8004b28 <round+0x88>)
 8004ad4:	4114      	asrs	r4, r2
 8004ad6:	ea04 0601 	and.w	r6, r4, r1
 8004ada:	4306      	orrs	r6, r0
 8004adc:	d00f      	beq.n	8004afe <round+0x5e>
 8004ade:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8004ae2:	fa41 f202 	asr.w	r2, r1, r2
 8004ae6:	4413      	add	r3, r2
 8004ae8:	ea23 0304 	bic.w	r3, r3, r4
 8004aec:	e7ed      	b.n	8004aca <round+0x2a>
 8004aee:	2a33      	cmp	r2, #51	@ 0x33
 8004af0:	dd08      	ble.n	8004b04 <round+0x64>
 8004af2:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8004af6:	d102      	bne.n	8004afe <round+0x5e>
 8004af8:	4602      	mov	r2, r0
 8004afa:	f7fb fbe7 	bl	80002cc <__adddf3>
 8004afe:	ec41 0b10 	vmov	d0, r0, r1
 8004b02:	bd70      	pop	{r4, r5, r6, pc}
 8004b04:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 8004b08:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004b0c:	40f4      	lsrs	r4, r6
 8004b0e:	4204      	tst	r4, r0
 8004b10:	d0f5      	beq.n	8004afe <round+0x5e>
 8004b12:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 8004b16:	2201      	movs	r2, #1
 8004b18:	408a      	lsls	r2, r1
 8004b1a:	1952      	adds	r2, r2, r5
 8004b1c:	bf28      	it	cs
 8004b1e:	3301      	addcs	r3, #1
 8004b20:	ea22 0204 	bic.w	r2, r2, r4
 8004b24:	e7d2      	b.n	8004acc <round+0x2c>
 8004b26:	bf00      	nop
 8004b28:	000fffff 	.word	0x000fffff

08004b2c <_init>:
 8004b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b2e:	bf00      	nop
 8004b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b32:	bc08      	pop	{r3}
 8004b34:	469e      	mov	lr, r3
 8004b36:	4770      	bx	lr

08004b38 <_fini>:
 8004b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b3a:	bf00      	nop
 8004b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b3e:	bc08      	pop	{r3}
 8004b40:	469e      	mov	lr, r3
 8004b42:	4770      	bx	lr
